title
A Hybrid Approach to Skeleton-based Translation

abstract
In this paper we explicitly consider sentence skeleton information for Machine Translation (MT). The basic idea is that we translate the key elements of the input sentence using a skeleton translation model, and then cover the remain segments using a full translation model. We apply our approach to a state-of-the-art phrase-based system and demonstrate very promising BLEU improvements and TER reductions on the NIST Chinese-English MT evaluation data.

Introduction Current Statistical Machine Translation (SMT) approaches model the translation problem as a process of generating a derivation of atomic translation units, assuming that every unit is drawn out of the same model. The simplest of these is the phrase-based approach  (Och et al., 1999; Koehn et al., 2003)  which employs a global model to process any sub-strings of the input sentence. In this way, all we need is to increasingly translate a sequence of source words each time until the entire sentence is covered. Despite good results in many tasks, such a method ignores the roles of each source word and is somewhat different from the way used by translators. For example, an important-first strategy is generally adopted in human translation -we translate the key elements/structures (or skeleton) of the sentence first, and then translate the remaining parts. This especially makes sense for some languages, such as Chinese, where complex structures are usually involved. Note that the source-language structural information has been intensively investigated in recent studies of syntactic translation models. Some of them developed syntax-based models on complete syntactic trees with Treebank annotations  (Liu et al., 2006; Huang et al., 2006; , and others used source-language syntax as soft constraints  (Marton and Resnik, 2008; Chiang, 2010) . However, these approaches suffer from the same problem as the phrase-based counterpart and use the single global model to handle different translation units, no matter they are from the skeleton of the input tree/sentence or other not-soimportant sub-structures. In this paper we instead explicitly model the translation problem with sentence skeleton information. In particular, ? We develop a skeleton-based model which divides translation into two sub-models: a skeleton translation model (i.e., translating the key elements) and a full translation model (i.e., translating the remaining source words and generating the complete translation). ? We develop a skeletal language model to describe the possibility of translation skeleton and handle some of the long-distance word dependencies. ? We apply the proposed model to Chinese-English phrase-based MT and demonstrate promising BLEU improvements and TER reductions on the NIST evaluation data. 

 A Skeleton-based Approach to MT 

 Skeleton Identification The first issue that arises is how to identify the skeleton for a given source sentence. Many ways are available. E.g., we can start with a full syntactic tree and transform it into a simpler form (e.g., removing a sub-tree). Here we choose a simple and straightforward method: a skeleton is obtained by dropping all unimportant words in the original sentence, while preserving the grammaticality. See the following for an example skeleton of a Chinese sentence. Original Sentence (subscripts represent indices): z [1] per ? [2] ton ?Y z [3] seawater desalination ?n [4] treatment [5] of ? [6] the cost 3 [7] 5 [8] 5 [9] yuan [10] of ?: [11] from ? [12] ??  [13]  has been further e?  [14]  reduced " [15] . (The cost of seawater desalination treatment has been further reduced from 5 yuan per ton.) Sentence Skeleton (subscripts represent indices): ? [6] the cost ??  [13]  has been further e?  [14]  reduced " [15] . (The cost has been further reduced.) Obviously the skeleton used in this work can be viewed as a simplified sentence. Thus the problem is in principle the same as sentence simplification/compression. The motivations of defining the problem in this way are two-fold. First, as the skeleton is a well-formed (but simple) sentence, all current MT approaches are applicable to the skeleton translation problem. Second, obtaining simplified sentences by word deletion is a well-studied issue  (Knight and Marcu, 2000; Clarke and Lapata, 2006; Galley and McKeown, 2007; Cohn and Lapata, 2008; Yamangil and Shieber, 2010; Yoshikawa et al., 2012) . Many good sentence simpliciation/compression methods are available to our work. Due to the lack of space, we do not go deep into this problem. In Section 3.1 we describe the corpus and system employed for automatic generation of sentence skeletons. 

 Base Model Next we describe our approach to integrating skeleton information into MT models. We start with an assumption that the 1-best skeleton is provided by the skeleton identification system. Then we define skeleton-based translation as a task of searching for the best target string t given the source string and its skeleton ? : t = arg max t P(t|?, s) (1) As is standard in SMT, we further assume that 1) the translation process can be decomposed into a derivation of phrase-pairs (for phrase-based models) or translation rules (for syntax-based models); 2) and a linear function g(?) is used to assign a model score to each derivation. Let d s,?,t (or d for short) denote a translation derivation. The above problem can be redefined in a Viterbi fashion -we find the derivation d with the highest model score given s and ? : d = arg max d g(d) (2) In this way, the MT output can be regarded as the target-string encoded in d. To compute g(d), we use a linear combination of a skeleton translation model g skel (d) and a full translation model g f ull (d): g(d) = g skel (d) + g f ull (d) (3) where the skeleton translation model handles the translation of the sentence skeleton, while the full translation model is the baseline model and handles the original problem of translating the whole sentence. The motivation here is straightforward: we use an additional score g skel (d) to model the problem of skeleton translation and interpolate it with the baseline model. See Figure  1  for an example of applying the above model to phrase-based MT. In the figure, each source phrase is translated into a target phrase, which is represented by linked rectangles. The skeleton translation model focuses on the translation of the sentence skeleton, i.e., the solid (red) rectangles; while the full translation model computes the model score for all those phrase-pairs, i.e., all solid and dashed rectangles. Another note on the model. Eq. (  3 ) provides a very flexible way for model selection. While we will restrict ourself to phrase-based translation in the following description and experiments, we can choose different models/features for g skel (d) and g f ull (d). E.g., one may introduce syntactic features into g skel (d) due to their good ability in capturing structural information; and employ a standard phrase-based model for g f ull (d) in which not all segments of the sentence need to respect syntactic constraints. 

 Model Score Computation In this work both the skeleton translation model g skel (d) and full translation model g f ull (d) resemble the usual forms used in phrase-based MT, i.e., the model score is computed by a linear combination of a group of phrase-based features and language models. In phrase-based MT, the translation problem is modeled by a derivation of phrasepairs. Given a translation model m, a language model lm and a vector of feature weights w, the model score of a derivation d is computed by z? ?Y z ?n ? 3 5 ?: ? ?? e? " the cost phrase 1 p1 Skeleton: Full: g(d? ; w ? , m, lm ? ) = w ? m ? fm(p1) + w ? lm ? lm ? ("the cost") g(d; w, m, lm) = wm ? fm(p1) + w lm ? lm("the cost") z? ?Y z ?n ? 3 5 ?: ? ?? e? " the cost of seawater desalination treatment phrases 2 & 3 p1 p2 p3 Skeleton: Full: g(d? ; w ? , m, lm ? ) = w ? m ? fm(p1) + w ? lm ? lm ? ("the cost X") g(d; w, m, lm) = wm ? fm(p1 ? p2 ? p3) + w lm ? lm("the cost of seawater desalination treatment") z? ?Y z ?n ? 3 5 ?: ? ?? e? " the cost of seawater desalination treatment has been further reduced phrases 4 & 5 p1 p2 p3 p4 p5 Skeleton: Full: g(d? ; w ? , m, lm ? ) = w ? m ? fm(p1 ? p4 ? p5)+ w ? lm ? lm ? ("the cost X has been further reduced") g(d; w, m, lm) = wm ? fm(p1 ? p2 ? ... ? p5) + w lm ? lm("the cost of seawater ... further reduced") z? ?Y z ?n ? 3 5 ?: ? ?? e? " the cost of seawater desalination treatment has been further reduced from 5 yuan per ton . phrases 6-9 p1 p2 p3 p4 p5 p6 p7 p8 p9 Skeleton: Full: To ease modeling, we only consider skeletonconsistent derivations in this work. A derivation d is skeleton-consistent if no phrases in d cross skeleton boundaries (e.g., a phrase where two of the source words are in the skeleton and one is outside). Obviously, from any skeletonconsistent derivation d we can extract a skeleton derivation d ? which covers the sentence skeleton exactly. For example, in Figure  1 , the derivation of phrase-pairs {p 1 , p 2 , ..., p 9 } is skeletonconsistent, and the skeleton derivation is formed by {p 1 , p 4 , p 5 , p 9 }. g(d? ; w ? , m, lm ? ) = w ? m ? fm(p1 ? p4 ? p5 ? p9)+ w ? lm ? lm ? ("the cost X has been further reduced X .") g(d; w, m, lm) = wm ? fm(p1 ? p2 ? ... ? p9) + w lm ? lm(" Then, we can simply define g skel (d) and g f ull (d) as the model scores of d ? and d: g skel (d) g(d ? ; w ? , m, lm ? ) (5) g f ull (d) g(d; w, m, lm) (6) This model makes the skeleton translation and full translation much simpler because they perform in the same way of string translation in phrase-based MT. Both g skel (d) and g f ull (d) share the same translation model m which can easily learned from the bilingual data 1 . On the other hand, it has different feature weight vectors for individual models (i.e., w and w ? ). For language modeling, lm is the standard ngram language model adopted in the baseline system. lm ? is a skeletal language for estimating the well-formedness of the translation skeleton. Here a translation skeleton is a target string where all segments of non-skeleton translation are generalized to a symbol X. E.g., in Figure  1 , the trans-lation skeleton is 'the cost X has been further reduced X .', where two Xs represent non-skeleton segments in the translation. In such a way of string representation, the skeletal language model can be implemented as a standard n-gram language model, that is, a string probability is calculated by a product of a sequence of n-gram probabilities (involving normal words and X). To learn the skeletal language model, we replace non-skeleton parts of the target sentences in the bilingual corpus to Xs using the source sentence skeletons and word alignments. The skeletal language model is then trained on these generalized strings in a standard way of n-gram language modeling. By substituting Eq. (  4 ) into Eqs. (  5 ) and (  6 ), and then Eqs. (  3 ) and (  2 ), we have the final model used in this work: d = arg max d w m ? f m (d) + w lm ? lm(d) + w ? m ? f m (d ? ) + w ? lm ? lm ? (d ? ) (7) Figure  1  shows the translation process and associated model scores for the example sentence. Note that this method does not require any new translation models for implementation. Given a baseline phrase-based system, all we need is to learn the feature weights w and w ? on the development set (with source-language skeleton annotation) and the skeletal language model lm ? on the target-language side of the bilingual corpus. To implement Eq. (  7 ), we can perform standard decoding while "doubly weighting" the phrases which cover a skeletal section of the sentence, and combining the two language models and the translation model in a linear fashion. 

 Evaluation 

 Experimental Setup We experimented with our approach on Chinese-English translation using the NiuTrans opensource MT toolkit  (Xiao et al., 2012) . Our bilingual corpus consists of 2.7M sentence pairs. All these sentences were aligned in word level using the GIZA++ system and the "grow-diag-finaland" heuristics. A 5-gram language model was trained on the Xinhua portion of the English Gigaword corpus in addition to the target-side of the bilingual data. This language model was used in both the baseline and our improved systems. For our skeletal language model, we trained a 5-gram language model on the target-side of the bilingual data by generalizing non-skeleton segments to Xs. We used the newswire portion of the NIST MT06 evaluation data as our development set, and used the evaluation data of MT04 and MT05 as our test sets. We chose the default feature set of the NiuTrans.Phrase engine for building the baseline, including phrase translation probabilities, lexical weights, a 5-gram language model, word and phrase bonuses, a ME-based lexicalized reordering model. All feature weights were learned using minimum error rate training  (Och, 2003) . Our skeleton identification system was built using the t3 toolkit 2 which implements a stateof-the-art sentence simplification system. We used the NEU Chinese sentence simplification (NEUCSS) corpus as our training data  (Zhang et al., 2013) . It contains the annotation of sentence skeleton on the Chinese-language side of the Penn Parallel Chinese-English Treebank (LD-C2003E07). We trained our system using the Parts 1-8 of the NEUCSS corpus and obtained a 65.2% relational F1 score and 63.1% compression rate in held-out test (Part 10). For comparison, we also manually annotated the MT development and test data with skeleton information according to the annotation standard provided within NEUCSS. 

 Results Table  1  shows the case-insensitive IBM-version BLEU and TER scores of different systems. We see, first of all, that the MT system benefits from our approach in most cases. In both the manual and automatic identification of sentence skeleton (rows 2 and 4), there is a significant improvement on the "All" data set. However, using different skeleton identification results for training and inference (row 3) does not show big improvements due to the data inconsistency problem. Another interesting question is whether the skeletal language model really contributes to the improvements. To investigate it, we removed the skeletal language model from our skeleton-based translation system (with automatic skeleton identification on both the development and test sets). Seen from row ?lm ? of Table  1 , the removal of the skeletal language model results in a significant drop in both BLEU and TER performance. It indicates that this language model is very beneficial to our system. ) means that we remove the skeletal language model (or translation model) from our proposed approach. s-space means that we restrict the baseline system to the search space of skeleton-consistent derivations. s-feat. means that we introduce an indicator feature for skeleton-consistent derivations into the baseline system. the skeleton-based translation model from our system as well. Row ?m ? of Table  1  shows that the skeleton-based translation model can contribute to the overall improvement but there is no big differences between baseline and ?m ? . Apart from showing the effects of the skeletonbased model, we also studied the behavior of the MT system under the different settings of search space. Row s-space of Table  1  shows the BLEU and TER results of restricting the baseline system to the space of skeleton-consistent derivations, i.e., we remove both the skeleton-based translation model and language model from the SBMT system. We see that the limited search space is a little harmful to the baseline system. Further, we regarded skeleton-consistent derivations as an indicator feature and introduced it into the baseline system. Seen from row s-feat., this feature does not show promising improvements. These results indicate that the real improvements are due to the skeleton-based model/features used in this work, rather than the "well-formed" derivations. 

 Related Work Skeleton is a concept that has been used in several sub-areas in MT for years. For example, in confusion network-based system combination it refers to the backbone hypothesis for building confusion networks  (Rosti et al., 2007; Rosti et al., 2008) ;  Liu et al. (2011)  regard skeleton as a shortened sentence after removing some of the function words for better word deletion. In contrast, we define sentence skeleton as the key segments of a sentence and develop a new MT approach based on this information. There are some previous studies on the use of sentence skeleton or related information in MT  (Mellebeek et al., 2006a; Mellebeek et al., 2006b; . In spite of their good ideas of using skeleton skeleton information, they did not model the skeleton-based translation problem in modern SMT pipelines. Our work is a further step towards the use of sentence skeleton in MT. More importantly, we develop a complete approach to this issue and show its effectiveness in a state-of-the-art MT system. 

 Conclusion and Future Work We have presented a simple but effective approach to integrating the sentence skeleton information into a phrase-based system. The experimental results show that the proposed approach achieves very promising BLEU improvements and TER reductions on the NIST evaluation data. In our future work we plan to investigate methods of integrating both syntactic models (for skeleton translation) and phrasal models (for full translation) in our system. We also plan to study sophisticated reordering models for skeleton translation, rather than reusing the baseline reordering model which is learned on the full sentences. Figure 1 : 1 Figure 1: Example derivation and model scores for a sentence in LDC2006E38. The solid (red) rectangles represent the sentence skeleton, and the dashed (blue) rectangles represent the non-skeleton segments. X represents a slot in the translation skeleton. ? represents composition of phrase-pairs. 
