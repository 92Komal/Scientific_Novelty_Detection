title
Adversarial Subword Regularization for Robust Neural Machine Translation

abstract
Exposing diverse subword segmentations to neural machine translation (NMT) models often improves the robustness of machine translation as NMT models can experience various subword candidates. However, the diversification of subword segmentations mostly relies on the pre-trained subword language models from which erroneous segmentations of unseen words are less likely to be sampled. In this paper, we present adversarial subword regularization (ADVSR) to study whether gradient signals during training can be a substitute criterion for exposing diverse subword segmentations. We experimentally show that our model-based adversarial samples effectively encourage NMT models to be less sensitive to segmentation errors and improve the performance of NMT models in low-resource and out-domain datasets.

Introduction Subword segmentation is a method of segmenting an input sentence into a sequence of subword units  (Sennrich et al., 2016; Wu et al., 2016; Kudo, 2018) . Segmenting a word to the composition of subwords alleviates the out-of-vocabulary problem while retaining encoded sequence length compactly. Due to its effectiveness in the open vocabulary set, the method has been applied to many NLP tasks including neural machine translation (NMT) and others  (Gehring et al., 2017; Vaswani et al., 2017; Devlin et al., 2019; Yang et al., 2019) . Recently, Byte-Pair-Encoding(BPE)  (Sennrich et al., 2016)  has become one of the de facto subword segmentation methods. However, as BPE deterministically segments each word into subword units, NMT models with BPE always observe the Figure  1 : NMT models suffer from typos (character drop, character replacement) in the source text due to the unseen subword compositions ('_' denotes segmentation). On the other hand, Ours correctly decodes them. Base: standard training, SR: subword regularization  (Kudo, 2018)  same segmentation result for each word and often fail to learn diverse morphological features. In this regard,  Kudo (2018)  proposed subword regularization, a training method that exposes multiple segmentations using a unigram language model. Starting from machine translation, it has been shown that subword regularization can improve the robustness of NLP models in various tasks  (Kim, 2019; Provilkov et al., 2019; Drexler and Glass, 2019; M?ller et al., 2019) . However, subword regularization relies on the unigram language models to sample candidates, where the language models are optimized based on the corpus-level statistics from training data with no regard to the translation task objective. This causes NMT models to experience a limited set of subword candidates which are frequently observed in the training data. Thus, NMT models trained with the subword regularization can fail to inference the meaning of unseen words having unseen segmentations. This issue can be particularly problematic for low resource languages and noisy text where many morphological variations are not present in the training data. The suboptimality issue of the subword segmentation methods has been also raised in many prior works  (Kreutzer and Sokolov, 2018; Wang et al., 2019b; Ataman et al., 2019; Salesky et al., 2020) . To tackle the problem of unigram language models, we search for a different sampling strategy using gradient signals which does not rely on corpus-level statistics and is oriented to the task objective. We adopt the adversarial training framework  (Goodfellow et al., 2014; Miyato et al., 2016; Ebrahimi et al., 2017; Cheng et al., 2019)  to search for a subword segmentation that effectively regularizes the NMT models. Our proposed method, adversarial subword regularization (ADVSR), greedily searches for a diverse, yet adversarial subword segmentation which will likely incur the highest translation loss. Our experiment shows that the NMT models trained with ADVSR improve the performance of baseline NMT models up to 3.2 BLEU scores in IWSLT datasets while outperforming the standard subword regularization method. We also highlight that NMT models trained with the proposed method are highly robust to characterlevel input noises. 1 2 Background Subword Regularization Subword regularization  (Kudo, 2018)  exposes multiple subword candidates during training via on-the-fly data sampling. The proposed training method optimizes the parameter set ? with marginal log-likelihood: L(?) = D s=1 E x?Pseg(x|X (s) ) y?Pseg(y|Y (s) ) [log P (y|x; ?)] (1) where x = (x 1 , . . . , x M ) and y = (y 1 , . . . , y N ) are sampled segmentations (in a subword unit) from a source sentence X and a target sentence Y through the unigram language model (subwordlevel) P seg (?) and D denotes the number of samples. Generally, a single sample per epoch is used during training to approximate Eq 1. The probability of a tokenized output is obtained by the product of each subword's occurrence probability where subword occurrence probabilities are attained through the Bayesian EM algorithm  (Dempster et al., 1977; Liang et al., 2007; Liang and Klein, 2009) . Segmentation output with maximum probability is acquired by using Viterbi algorithm  (Viterbi, 1967) . Adversarial Regularization in NLP Adversarial samples are constructed by corrupting the original input with a small perturbation which distorts the model output.  Miyato et al. (2016)  adopted the adversarial training framework to the task of text classification where input embeddings are perturbed with adversarial noise r: e i = Ex i + ri (2) where, r = argmax r, r ? { (X, r, Y ; ?)} (3) E is an embedding matrix, e i is an perturbed embedding vector, and (?) is loss function obtained with the input embeddings perturbed with noise r. Note that Miyato et al. (  2016 ) use a word for the unit of x i unlike our definition. As it is computationally expensive to exactly estimate r in Eq 3,  Miyato et al. (2016)  resort to the linear approximation method  (Goodfellow et al., 2014) , where ri is approximated as follows: ri = g i g 2 , g i = ? e i (X, Y ; ?) (4) indicates the degree of perturbation and g i denotes a gradient of the loss function with respect to a word vector. Moreover,  Ebrahimi et al. (2017)  extended adversarial training framework to directly perturb discrete input space, i.e. character, through the first-order approximation by the use of gradient signals. 

 Approach Relying on the subword language models might bias NMT models to frequent segmentations, hence hinders the NMT model in understanding diverse segmentations. This may harm the translation quality of the NMT models when diverse morphological variations occur. However, simply exposing diverse segmentations uniformly leads to a decrease in performance  (Kudo, 2018) . In this regard, we utilize gradient signals for exposing diverse, yet adversarial subword segmentation inputs for effectively regularizing NMT models.  Kreutzer and Sokolov (2018)  proposed to jointly learn to segment and translate by using hierarchical RNN  (Graves, 2016) , but the method is not model-agnostic and slow due to the increased sequence length of characterlevel inputs. On the other hand, our method is model-agnostic and operates on the word-level. Our method seeks adversarial segmentations onthe-fly, thus the model chooses the subword candidates that are vulnerable to itself according to the state of the model at each training step. 

 Problem Definition Our method generates a sequence of subwords by greedily replacing the word's original segmentation to that of adversarial ones estimated by gradients. Given a source sentence X and a target sentence Y , we want to find the sequence of subwords x and ? which incurs the highest loss: x, ? = argmax x?(X) y?(Y ) { (x, y; ?)} (5) ?(X) and ?(Y ) denote all the subword segmentation candidates of X and Y and (?) denotes loss function. Our method operates on a word unit split by whitespaces, each of which consists of variable length subwords. We first define a sequence of words in X as w = (w 1 , . . . , w M ) where M denotes the length of the word-level sequence. Then, we can segment w j as s j = (s j 1 , . . . , s j K ) which are K subword units of the j-th word (note that now we can represent input X as as a sequence of s j as s = (s 1 , . . . , s M )). For example, as for the j-th word "lovely", its tokenized output "love" and "ly" will be s j 1 and s j 2 respectively. Then, we define the embedding and the gradient of the word segmentation as the aggregation of K subwords consisting it: e(s j ) = f ([e(s j 1 ), . . . , e(s j K )]) ? R d (6) g s j = f ([g s j 1 , . . . , g s j K ]) ? R d (7) where g s j k = ? e(s j k ) (x, y; ?) ? R d (8) where e denotes the embedding lookup operation, d denotes the hidden dimension of embeddings. We simply use the element-wise average operation for f . Therefore if the segmentation of the word changes, the corresponding embedding and gradient vector will change accordingly. Algorithm 1: AdvSR function input :input sentence X, probability R output :adversarial subword sequence x Function AdvSR(X, R): x  

 Adversarial Subword Regularization As it is intractable to find the most adversarial sequence of subwords given combinatorially large space, we approximately search for word-wise adversarial segmentation candidates. We seek for the adversarial segmented result of a j-th word, i.e. w j , from the sentence X by following criteria which was originally proposed by  Ebrahimi et al. (2017)  and applied to many other NLP tasks  (Cheng et al., 2019; Wallace et al., 2019; . More formally, we seek an adversarial segmentation ?j of the j-th word w j as ?j = argmax s j ?(w j ) g T sj ? [e(s j ) ? e(s j )] (9) where s j represents one of the tokenized output among the possible candidates ?(w j ) which are obtained by SentencePiece tokenizer  (Kudo and Richardson, 2018) . sj denotes an original deterministic segmentation of j-th word. Note that for computing g sj , we use (x, ?) which is from the original deterministic segmentation results. We applied L2 normalization to the gradient vectors and embedding vectors. We uniformly select words in the sentence with a probability R and replace them into adversarial subword composition according to the Eq 9. We perturb both the source and the target sequences. We summarize our method in Algorithm 1. The existing adversarial training methods in the NLP domain generally train the model with both the original samples and the adversarial samples  (Miyato et al., 2016; Ebrahimi et al., 2017; Cheng et   Table  2 : BLEU scores on the main results. Bold indicates the best score and all scores whose difference from the best is not statistically significant computed via bootstrapping  (Koehn, 2004 ) (p-value < 0.05). 2019;  Motoki Sato, 2019) . However, we train the model with only the adversarial samples for the sake of fair comparison with the baselines. More details are described in Appendix A.1. 

 Experimental Setup 

 Datasets and Implementation Details We conduct experiments on a low-resource multilingual dataset, IWSLT 2 , where unseen morphological variations outside the training dataset can occur frequently. We also test NMT models on MTNT  (Michel and Neubig, 2018) , a testbed for evaluating the NMT systems on the noisy text. We used the English-French language pair. Moreover, for evaluating the robustness to the typos, we generate the synthetic test data with character-level noises using the IWSLT dataset. 2 http://iwslt.org/ For all experiments, we use Transformer-Base  (Vaswani et al., 2017)  as a backbone model (L=6, H=512) and follow the same regularization and optimization procedures. We train our models with a joined dictionary of the size 16k. Our implementation is based on Fairseq  (Ott et al., 2019) . Further details on the experimental setup are described in Appendix A.2. 

 Evaluation For inference, we use a beam search with a beam size of 4. For the evaluation, we used the checkpoint which performed the best in the validation dataset. We evaluated the translation quality through BLEU  (Papineni et al., 2002)  computed by SacreBleu  (Post, 2018) . Our baselines are NMT models trained with deterministic segmentations (BASE) and models trained with the subword regularization method (SR)  (Kudo, 2018) . We set the hyperparameters of subword regularization equivalent to those of  Kudo (2018) . 

 Experiments 

 Results on Low-Resource Dataset Table  2  shows the main results on IWSLT datasets. Our method significantly outperforms both the BASE and the SR. This shows that leveraging translation loss to expose various segmentations is more effective than constraining the NMT models to observe limited sets of segmentations. Specifically, ADVSR improves 1.6 BLEU over SR and 3.2 BLEU over BASE in the Czech to English dataset. We assume that the large gains are due to the morphological richness of Czech. The performance improvement over the baselines can also be explained by the robustness to unseen lexical variations, which are shown in Appendix B. 

 Results on Out-Domain Dataset Table  3  shows the results on the MTNT dataset where we utilized the NMT models trained from Section 5.1. We also experiment with the domain adaptive fine-tuning with the MTNT dataset (denoted as + FT). Generally, exposing multiple subword candidates to the NMT models shows superior performance in domain adaptation, which matches the finding from  M?ller et al. (2019) . Above all, NMT models trained with our proposed method outperforms BASE up to 2.3 and SR up to 0.9 BLEU scores.  

 Results on Synthetic Dataset Additionally, we conduct an experiment to see the changes in translation quality according to different noise ratios. Using IWSLT17 (FR ? EN), we synthetically generated 3 types of noise, 1. character drop, 2. character replacement, 3. character insertion and perturbed each word with the given noise probability. Table  4  shows that as the noise fraction increases, our method proves its robustness compared to the baseline models improving BASE up to 10.4 and SR up to 7.1 BLEU scores. 

 Related Work Subword segmentation has been widely used as a standard in the NMT community since the Byte-Pair-Encoding  (Sennrich et al., 2016)  was proposed.  Kudo (2018)  introduced the training method of subword regularization. Most recently, the BPEdropout  (Provilkov et al., 2019)  was introduced which modifies the original BPE's encoding process to enable stochastic segmentation. Our work shares the motivation of exposing diverse subword candidates to the NMT models with previous works but differs in that our method uses gradient signals. Other segmentation methods include word-piece  (Schuster and Nakajima, 2012)  and variable length encoding schme  (Chitnis and DeNero, 2015) . Also, there is another line of research that utilizes character-level segmentation  (Luong and Manning, 2016; Lee et al., 2017; Cherry et al., 2018) . Other works explored generating synthetic or natural noise for regularizing NMT models  (Belinkov and Bisk, 2018; Sperber et al., 2018; Karpukhin et al., 2019) .  Michel and Neubig (2018)  introduced a dataset scraped from Reddit for testing the NMT systems on the noisy text. Recently, a shared task on building the robust NMT models was held  B?rard et al., 2019) . Our method extends the adversarial training framework, which was initially developed in the vision domain  (Goodfellow et al., 2014)  and has begun to be adopted in the NLP domain recently  (Jia and Liang, 2017; Belinkov and Bisk, 2018; Samanta and Mehta, 2017; Miyato et al., 2016; Motoki Sato, 2019; Wang et al., 2019a; Cheng et al., 2019) .  Miyato et al. (2016)  adopted the adversarial training framework on text classification by perturbing embedding space with continuous adversarial noise.  Cheng et al. (2019)  introduced an adversarial training framework by discrete word replacements where candidates were generated from the language model. However, our method does not replace the word but replaces its subword composition. 

 Conclusions In this study, we propose adversarial subword regularization which samples subword segmentations that maximize the translation loss. Segmentations from the subword language model might bias NMT models to frequent segmentations in the training set. On the other hand, our method regularizes the NMT models to be invariant to unseen segmentations. Experimental results on low resource and out-domain datasets demonstrate the effectiveness of our method. ? [ ] // initialize empty list x ? argmax Pseg(x|X) x?(X) s ? group(x) // group subwords as word-level for j ? 1 to M do r ? uniform(0, 1) if r < R then // compute Eq 7. gs j ? f ([g sj 1 // compute Eq 9. , . . . , g sj K ]) ?j ? argmax g T sj ? [e(sj) ? e(sj)] s j ?(w j ) else ?j ? sj x ? x + ?j // append return x 

 al.,    Number of sentences Dataset Lang Pair (train/valid/test) IWSLT17 FR ? EN 232k / 890 / 1210 AR ? EN 231k / 888 / 1205 IWSLT15 CS ? EN 105k / 1385 / 1327 VI ? EN 133k / 1553 / 1268 IWSLT13 TR ? EN 132k / 887 / 1568 PL ? EN 144k / 767 / 1564 MTNT1.1 FR ? EN 19k / 886 / 1022 (1233) EN ? FR 35k / 852 / 1020 (1401) Table 1: Data statistics. The number in the parenthe- ses denotes the number of sentences in the MTNT2019 test set which was provided by the WMT Robustness Shared Task (Li et al., 2019) Lang Pair BASE SR ADVSR IWSLT17 FR ? EN 37.9 38.1 38.5 EN ? FR 38.8 39.1 39.8 AR ? EN 31.7 32.3 32.6 EN ? AR 14.4 14.3 14.9 IWSLT15 CS ? EN 28.9 30.5 32.1 EN ? CS 20.4 21.7 23.0 VI ? EN 28.1 28.4 29.3 EN ? VI 30.9 31.7 32.4 IWSLT13 PL ? EN 19.1 19.7 20.6 EN ? PL 13.5 14.1 15.1 TR ? EN 21.3 22.6 24.0 EN ? TR 12.6 14.4 14.6 

 Table 3 : 3 BLEU scores on the MTNT (Michel and Neubig, 2018)  dataset. FT denotes finetuning. Dataset BASE SR ADVSR MTNT2018 FR ? EN 25.7 27.6 27.2 EN ? FR 26.7 27.5 28.2 MTNT2018 + FT FR ? EN 36.5 37.9 38.8 EN ? FR 33.2 34.4 35.3 MTNT2019 FR ? EN 27.6 29.3 30.2 EN ? FR 22.8 23.8 24.1 MTNT2019 + FT FR ? EN 36.2 38.1 38.6 EN ? FR 27.6 28.2 28.9 Method 0.1 0.2 0.3 0.4 0.5 FR ? EN BASE 30.7 25.6 20.3 16.2 11.4 SR 33.2 28.5 23.3 18.7 14.7 ADVSR 34.8 31.1 28.7 25.0 21.8 EN ? FR BASE 31.1 24.2 18.6 14.6 10.6 SR 34.2 27.8 23.9 18.9 14.4 ADVSR 35.1 30.3 26.4 23.0 19.1 

 Table 4 : 4 BLEU scores on the synthetic dataset of typos. The column lists results for different noise fractions. 

			 Our code is available in https://github.com/ dmis-lab/AdvSR
