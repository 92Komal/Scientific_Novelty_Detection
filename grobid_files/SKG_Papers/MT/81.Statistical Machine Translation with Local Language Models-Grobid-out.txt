title
Statistical Machine Translation with Local Language Models

abstract
Part-of-speech language modeling is commonly used as a component in statistical machine translation systems, but there is mixed evidence that its usage leads to significant improvements. We argue that its limited effectiveness is due to the lack of lexicalization. We introduce a new approach that builds a separate local language model for each word and part-of-speech pair. The resulting models lead to more context-sensitive probability distributions and we also exploit the fact that different local models are used to estimate the language model probability of each word during decoding. Our approach is evaluated for Arabic-and Chinese-to-English translation. We show that it leads to statistically significant improvements for multiple test sets and also across different genres, when compared against a competitive baseline and a system using a part-of-speech model.

Introduction Language models are an important component of current statistical machine translation systems. They affect the selection of phrase translation candidates and reordering choices by estimating the probability that an application of a phrase translation is a fluent continuation of the current translation hypothesis. The size and domain of the language model can have a significant impact on translation quality.  Brants et al. (2007)  have shown that each doubling of the training data from the news domain (used to build the language model), leads to improvements of approximately 0.5 BLEU points. On the other hand, each doubling using general web data leads to improvements of approximately 0.15 BLEU points. While large n-gram language models do lead to improved translation quality, they still lack any generalization beyond the surface forms  (Schwenk, 2007) . Consider example (1), which is a short sentence fragment from the MT09 Arabic-English test set, with the corresponding machine translation output (1.b), from a phrase-based statistical machine translation system, and reference translation (1.c). (1) a. Clearly, the adjective "controversial" should precede the nouns "press statement", but since the AFP and Xinhua portions of the Gigaword corpus, used to build the language model for the translation system, do not contain this surface n-gram, translations with obviously ungrammatical constructions such as (1.b) can result. For unseen n-grams, one would like to model adjectives as being likely to precede nouns in English, for example. A straightforward approach to address this is to exploit the part-of-speech (POS) tags of the target words during translation  (Kirchhoff and Yang, 2005) . Though models exploiting POS information are not expressive enough to model long-distance dependencies, they can account for locally ungrammatical constructions such as (1.b). Several attempts have been made to interpolate POS language models with surface models. Under constrained data conditions, this can lead to improvements. But once larger amounts of training data are used, the gains obtained from adding POS language models decline substantially. This raises the question of why POS language models are not more effective. We argue that one of the short-comings of previous approaches to using POS language models is that these models are estimated globally, not lexically anchored, and hence rather context insensitive. In this paper, we introduce a novel approach that builds and uses individual, local POS language models for each word in the vocabulary. Our experiments show that it leads to statistically significant improvements over a competitive baseline, using lexicalized reordering and a sizable 5-gram word language model, as well as a standard 7-gram POS language model approach. 2 Part-of-Speech Language Models 

 Background Typically, POS language models are used like wordbased language models. N-grams are extracted from a POS-tagged corpus and an n-gram language model is built from that. While word-based models estimate the probability of a string of m words by Equation 2, POS-based models estimate the probability of string of m POS tags by Equation  3 . p(w m 1 ) ? m i=1 p(w i |w i?1 i?n+1 ) (2) p(t m 1 ) ? m i=1 p(t i |t i?1 i?n+1 ) (3) where, n is the order of the language model, and w j i refers to the sub-sequence of words (or tags) from positions i to j. Word language models can be built directly from large text corpora, such as LDC's Gigaword corpus, but POS models require texts that are annotated with POS tags. Ideally, one would use manually annotated corpora such as the Penn Treebank  (Marcus et al., 1993) , but since those tend to be small, most approaches rely on larger corpora which have been automatically annotated by a POS tagger or a parser  (Koehn et al., 2008) . Though automated annotation inevitably contains errors, it is assumed that this is ameliorated by the increased size of annotated data. The event space of a language models is of size |V | n , where V is the vocabulary, and n is the order of the language model. The vocabulary of POS models, (typically ranging between 40 and 100 tags), is much smaller than the vocabulary of a word model, which can easily approach a million words. Nevertheless, most POS language modeling approaches apply some form of smoothing to account for unseen events  (Bonneau-Maynard et al., 2007) . To deploy POS language models in machine translation, translation candidates need to be annotated with POS tags. Each target phrase ? in a phrase pair ( f , ?) can be associated with a number of POS tag sequences t? .  Heeman (1998)  shows that using the joint probability leads to improved perplexity for POS models. For machine translation one can sum over all possible tag sequences, as in Equation  4 . p(e|f ) = arg max e t p(e, t|f ) (4) Summing over all possible tag sequences has the disadvantage that it requires one to keep this information during decoding. Below, we opt for an approximate solution, where each target phrase is annotated with the most likely POS tag sequence given the source and target phrase: t? = arg max t p( t|?, f ). 

 Effectiveness of POS Language Models Reported results on the effectiveness of POS language models for machine translation are mixed, in particular when translating into languages that are not morphologically rich, such as English. While they rarely seem to hurt translation quality, there does not seem to be a clear consensus that they significantly improve quality either.  have reported an increase of 0.86 BLEU points for German-to-English translation for small training data. After relaxing phrase-matching to include lemma and morphological information on the source side, POS language models lead to a decrease of -0.42 BLEU points. Supertagging encapsulates more contextual information than POS tags and  report improvements when comparing a supertag language model to a baseline using a word language model only. Once the baseline incorporates lexicalized distortion  (Tillmann, 2004; Koehn et al., 2005) , these improvements disappear. Factored language models have not resulted in significant improvements either.  Kirchhoff and Yang (2005)  report slight improvements when re-ranking the n-best lists of their decoder, which word tri-grams. But these improvements are less than those gained by re-ranking the n-best lists with a 4-gram word language model. The impact of POS language models depends among other things on the size of the parallel corpus, the size and order of the word language model, and whether lexicalized distortion models are used. To gauge the potential effectiveness of POS language models without taking into consideration all these factors, we isolate the contribution of the language model by simulating machine translation output using English data only  (Al-Onaizan and Papineni, 2006; Post and Gildea, 2008) . Taking a set of POS-tagged reference translations of the MT04 Arabic-to-English test set, each English sentence is randomly chunked into n-grams of average length three. The chunks of each sentence, with their corresponding POS tags, are randomly reordered. This is repeated 500 times for each sentence in the test set. The smoothed sentence BLEU score (ignoring brevity penalty) is computed for each reordered sentence with respect to all reference translations. The higher the BLEU score, the more well-formed the reordering is. As each reordered sentence only contains words from at least one of the reference translations, the uni-gram precision is always 1.0. The language model probability is then computed for each reordering. Table  1  shows the average correlations between language model probabilities and BLEU scores. We can see that the surface language model correlates moderately well with BLEU, explaining about 49% (r 2 = 0.49) of the variation, whereas the POS language model does not correlate with BLEU at all. 1 On the other hand, local language models alone (as introduced in Section 3) correlate with BLEU only slightly worse than surface models. The highest correlation is seen when they are interpolated with word models. The BLEU scores in are computed using the 1-best sentences after reranking. These system-agnostic correlation results look promising for our local models and the endto-end translation results in Section 5 confirm these initial findings. 

 Local Language Models In this section, we introduce a novel approach to language modeling that is more context-sensitive than standard POS language models. Instead of using one global POS language model that is built by using all of a mono-lingual corpus in the target language, we build individual models, or local models, for each word-POS pair using the POS tags surrounding each occurrence of that pair. This adds an aspect of lexicalization that is entirely absent in previous POS language models. The effect is that the resulting ngram probability distributions of each local model are more biased towards the contextual constraints of each individual word-POS pair. This is similar to the idea of cached language models  (Kuhn, 1988) , but more fine-grained and with a tighter integration of POS and lexical information. 

 Definition of Local Language Models Each conditional probability of order n in a local model for the word-POS pair w : t is of the form: p w:t (t n , p n |t 1 : p 1 , . . . , t n?1 : p n?1 ) where t i refers to POS tags and p i to positions relative to an occurrence of the pair (w : t). For example, consider the sentence fragment in Figure  1 . The conditional local n-gram probabilities (a-d) are generated from the occurrence of the word told with POS tag VBD. Probability (c) in Figure  1  estimates that a word with POS tag NN occurs two positions to the right of told, given the n-gram history that a noun occurs to its left and a determiner to its right.  For each local model we use a sliding window considering all n-grams of length n starting n words to the left and ending n words to the right of an occurrence of the word-POS pair of the model at hand. All local model probabilities are smoothed using Witten-Bell smoothing and interpolation. 2 POS tags are annotated with positional information to distinguish between lower-order estimates such as p told:VBD (NN+2) and p told:VBD (NN+3) both of which can arise when backing off during smoothing. Without positional information, p told:VBD (NN) only estimates the probability of the tag NN occurring within the proximity of told.  3  A local model of order n contains the conditional probabilities for words occurring at relative positions -1, +1, . . . +n. Therefore the probability of a word occurrence is estimated by all local models covering this word's position. Figure  2  shows schematically how overlapping n-gram probabilities interact. E.g., the probability of word w i+2 is based on the probability of the local model for w i+1 , w i , w i?1 , and w i?2 (the last two are not shown in Figure 2 for space reasons). Formally, the conditional probability of a word-POS pair, given its word and POS tag history is defined in Equation  5 . p(w i , t i | w i?1 i?n+1 , t i?1 i?n+1 ) = p w i :t i (t i?1 : -1 | t i?n : -n, . . . , t i?2 : -2 ) ? n?1 j=0 p w i?n+j :t i?n+j (t i : n?j | H i,n [j, ?]) (5) 2 The smaller event space of local models often leads to incomplete counts-of-counts, preventing the use of Kneser-Ney smoothing (Chen and Goodman, 1999). 3 Despite the notational similarities, our approach should not be confused with projected POS models, which use source side POS tags to model reordering  (Och et al., 2004)  where H i,n is an n ? n matrix specifying the history of the word at position i. Each row j of H i,n represents the history of the conditional probability belonging to the local model associated with position i?n+j. Each entry H i,n [j, k] is defined as follows: H i,n [j, k] = t i?n+k : k ? j if j = k otherwise where t i?n+k is the POS tag at position i ? n + k and k ? j is the relative position with respect to the diagonal of H i,n , i.e., the position of the local language model corresponding to row j. H i,n [j, ?] is the jth row vector from which the jth entry (the empty element) has been removed. For instance, given the example in Figure  1  Figure  3 : Language model probability computation for the sentence "Cuba frees more dissidents." using our local language modeling approach. The example in Figure  3  shows word-by-word how tri-gram local language models are used to compute the probability of a whole sentence. Our local language model approach also bears some resemblance to statistical approaches to modeling subcategorization frames  (Manning, 1993) . While our approach is more general by considering all words and not just focusing on verbal subcategorization frames, it is also more shallow in the sense that only part-of-speech categories are considered which does not model any contextual relationships on the phrase level. 

 Building Local Language Models To build the local language models, we use the SRILM toolkit  (Stolcke, 2002) , which is commonly applied in speech recognition and statistical machine translation. While SRILM collects n-gram statistics from all n-grams occurring in a corpus to build a single global language model, we build a language model for each word-POS pair only using the ngrams within the proximity of occurrences for that word-POS pair in a POS-tagged corpus. This results in separate n-gram count files, which are then processed by SRILM to build the individual language models.  4  Charniak's parser  (Charniak, 2000)  is used to POS tag the corpus. 

 Decoder Integration Several approaches that integrate POS language models have focused on n-best list re-ranking only  (Hasan et al., 2006; Wang et al., 2007) . Often this is due to the computational (and implementational) complexities of integrating more complex language models with the decoder, although it is expected that a tighter integration with the decoder itself leads to better improvements than n-best list re-ranking. Integrating our local language modeling approach with a decoder is straightforward. Our baseline decoder already uses SRILM's API for computing word language model probabilities. Since SRILM supports arbitrarily many language models, local language models can be added using the same functionalities of SRILM's API. For the experiments discussed in Section 4, we add about 150,000 local language models to the word model. All local language model probabilities are coupled with the same feature weight. Potentially, improvements could be gained from using separate weights for individual local models, but this would require an optimization procedure such as MIRA  (Chiang et al., 2009) , which can handle a larger number of features. During decoding no POS tagging ambiguities are resolved. Each target phrase is associated with its most likely POS tag sequence, given the source and target side of the phrase pair; see Section 2.1. 

 Experimental Setup Three approaches are compared in our experiments: the baseline system is a phrase-based statistical machine translation system  (Koehn et al., 2003) , very similar to Moses , using a wordbased 5-gram language model. The second approach extends the baseline by including a 7-gram POSbased language model. The third approach represents the work described in this paper, extending the baseline by including 4-gram local language models. Translation quality is evaluated for two language pairs: Arabic-to-English and Chinese-to-English. NIST's MT-Eval test sets are used for both pairs. Only resources allowed under NIST's constrained data conditions are used to train the language, translation, and lexicalized distortion models. To see whether our local language models result in improvements over a competitive baseline, we designed the baseline to use a large 5-gram word language model and lexicalized distortion modeling, both of which are known to cancel-out improvements gained from POS language models  Kirchhoff and Yang, 2005) . The 5-gram word language model is trained on the Xinhua and AFP sections of the Gigaword corpus (3rd edition, LDC2007T40) and the target side of the bitext. We removed from the training data all documents released during the periods that overlap with the publication dates of the documents included in our development or test data sets. In total, 630 million tokens were used to build the word language model. The language model was trained using SRILM with modified Kneser-Ney smoothing and interpolation (Chen and Goodman, 1999). It is common practice not to include higher-order n-grams that occur fewer than a predefined number of times. Here, we applied rather conservative cut-offs, by ignoring 3-, 4-, and 5-grams that occurred only once. The 7-gram POS and 4-gram local language models were both trained on the POS tagged English side of the bitext and 10M sentences from Gigaword's Xinhua and AFP sections. The data for building the translation models were primarily drawn from the parallel news resources distributed by the Linguistic Data Consortium (LDC).  5  The Arabic-English bitext consists of 11.4M source and 12.6M target tokens, and the Chinese-English bitext of 10.6M source and 12.3M target tokens. Word alignment was performed running GIZA++ in both directions and generating the symmetric alignments using the 'grow-diag-finaland' heuristics. All three approaches, including the baseline, use lexicalized distortion, distinguishing between monotone, swap, and discontinuous reordering, all with respect to the previous and next phrase  (Koehn et al., 2005) . The distortion limit is set to 5 for Arabicto-English, and 6 for Chinese-to-English. For each source phrase the top 30 translations are considered. For tuning and testing we use NIST's official MT-Eval test sets. MT04 was used as the development set for both language pairs. Testing was carried out on MT05 to MT09 for Arabic-English and MT05 to MT08 for Chinese-English. NIST did not release a new Chinese-English test set for MT-Eval 2009. Parameter tuning of the decoder was done with minimum error rate training (MERT)  (Och, 2003) , adapted to BLEU maximization. As evaluation metrics we used NIST's adaptation of BLEU-4  (Papineni et al., 2001) , version 13a, where the brevity penalty is based on the reference translation with the closest length, and translation error rate (TER) version 0.7.25  (Snover et al., 2006) . All results reported here are case-insensitive. TER scores are shown as 1-TER. To see whether the differences between the approaches we compared in our experiments are statistically significant, we apply approximate randomization  (Noreen, 1989) ;  Riezler and Maxwell (2005)  have shown that approximate randomization is less sensitive to Type-I errors, i.e., less likely to falsely reject the null hypothesis, than bootstrap resampling  (Koehn, 2004)  in the context of machine translation. 

 Results and Analysis The Arabic-to-English results are shown in Table 2, and the Chinese-to-English results in Table 3. All results are subdivided by genre following NIST's genre classification. Note that MT06 con- Table  2 : Results for Arabic-to-English translation. Comparison of our approach (+locLM, rows 4a/b) to the baseline using a word language model (wordLM, rows 1a/b) and a competing approach using a POS-based language model (+posLM, rows 2a/b). Results are presented using BLEU[%] (rows 1a-6a) and 1-TER[%] (rows 1b-6b) and broken down by genre: NW=newswire, WB=web, and ALL=NW?WB. Rows 3a/b, 5a/b, and 6a/b show the relative improvements over the system mentioned to the right of the > sign. Statistically significant improvements/declines (using approximate randomization) at the p < .01 level are marked / and / at the p < .05 level. tains the genres 'broadcast news' and 'newsgroup'. In both tables, the former has been classified under 'newswire' and the latter under 'web'. The first approach is the baseline system 'wordLM' (rows 1a/b in Tables  2 and 3 ), which uses a 5-gram word-based language model. The next approach '+posLM' extends the baseline by adding a 7-gram POS language model (rows 2a/b in both tables). Rows 3a/b show the relative improvements over the baseline. The third approach '+locLM' (rows 4a/b) uses local language models in addition to the baseline's word-based model. Note that +lo-cLM does not use the 7-gram POS language model as well. Rows 5a/b show the relative improvements of the local modeling approach over the baseline and rows 6a/b the improvements over the approach using a POS language model. Let us first take a closer look at the Arabic-to-English results in Table  2 . The approach using a POS language model results in statistically significant improvements for only one test set (MT05) and the newswire documents of MT09. The average improvements across all sets and genres are negligible (+0.07 BLEU). Our local language modeling approach achieves the highest BLEU scores for all test sets and across all genres. In particular, the improvements of +1.06 BLEU for newswire documents are substantial. With the exception of MT08-WB and MT09-WB all BLEU improvements over the baseline are statistically significant. When evaluating with 1-TER, local language modeling also achieves the best results, with the exception of MT06, where the POS language model approach performs slightly better. Turning to the Chinese-English results in Table  3 , we see similar improvements in BLEU. The improvements of using a POS language model are negligible (+0.04 BLEU). Here as well, local language modeling leads to the best results, with substantial improvements of +0.88 BLEU for web documents. The major difference between Arabic-English and Chinese-English is the discrepancy between BLEU score improvements and decreases in 1-TER. While we cannot explain this discrepancy, it is worth noting that similar discrepancies between BLEU and TER and Arabic-to-English and Chinese-to-English translation can be found in the literature. The results described in  Shen et al. (2009)    for Arabic-to-English on the MT06 and MT08 sets, but for Chinese-to-English the correlation seems to be much weaker and BLEU improvements of +0.75 can correspond to decreases of up to -0.80 in 1-TER. One of the motivations of using POS language models in general, and local language models in our case, is to improve the fluency of translations, which should be reflected in increased precision for higherorder n-grams. Table  4  shows that this is the case when comparing local modeling to both word and POS language models for Arabic-to-English translation. The same trend, but to a somewhat weaker degree can be observed for Chinese-to-English.  The effectiveness of a POS language model often diminishes with improved translation quality of the base system to which it is added. Naturally, we are interested in the extent that this diminishing effect also holds for our local language mod-els. A full experimental setup, varying all relevant factors, such as language, translation, and distortion model size, and the various meta-parameters, is beyond the scope of this paper. Nevertheless, we can gauge this by taking a closer look at the distribution of improvements within our experiments. Figure  4  shows performance improvements in document-level BLEU for both language pairs. The document-level BLEU score for the baseline system is plotted on the x-axis and improvements are plotted on the y-axis. The dotted line is the linear fit (using least square regression). If the effectiveness of either added model (POS or local) diminishes with increasing translation quality, we would expect a declining regression line. This is not the case for Arabic-to-English translation. Relative improvements for both added models increase as the translation quality of the baseline increases. The slope of both regression fits is almost identical, but the y-intercept is larger for our local modeling approach. Note that the small slope is also due to difference in scale between full BLEU scores and relative improvements. We can observe the opposite for Chinese-to-English translation, where the slope is negative. Both models seem to help more for documents with lower baseline translation quality. For the POS model, the regression line intersects with the neutral line (?0 improvement) at around 31 BLEU, which is close to the average BLEU score and in line with its negligible improvements (see Ta-  ble 3). For the local language model, the regression line intersects with the neutral line at about 40 BLEU, suggesting that until translation quality improves substantially, local language models could still have a positive impact. 

 Related Work The main goal of this paper is to show that by tying POS language models to lexical items, we get more accurate distributions for specific words. The work on factored language models  (Bilmes and Kirchhoff, 2003)  is related to our work to the extent that it also mixes POS tags with lexical information, albeit in a very different manner. Factored language models use more general representations, such as POS tags or stems, only during back-off.  Kirchhoff and Yang (2005)  applied factored language models to machine translation but the improvements were negligible.  Collins et al. (2005)  proposed a discriminative language modeling approach that uses mixtures of POS and surface information and showed that it leads to a reduction in speech recognition word er-ror rates. On the other hand, their approach seems more suited for n-best list re-ranking and it is not clear whether those improvements carry over to machine translation.  Li and Khudanpur (2008)  adapted this discriminative approach to machine translation re-ranking but used surface forms only.  Wang et al. (2007)  and  Zheng et al. (2008)  use elaborately enriched representations, called super abstract role values  (Wang and Harper, 2002) , which capture contextual dependencies using lexical categories, role labels, and dependency grammar structures. So far their approach has been limited to re-ranking n-best lists only. 

 Conclusion Though POS language models do not lead to significant improvements over a competitive baseline, we have shown that a competitive phrase-based baseline system can benefit from using POS information by building lexically anchored local models. Our local model approach does not only lead to more contextspecific probability distributions, but also takes ad-vantage of the language model probability of each word being based on all surrounding local models. The evaluations for Arabic-and Chinese-to-English show that local models lead to statistically significant improvements across different test sets and genres. Correlating the translation quality of the baseline with the improvements that result from adding local models, further suggests that these improvements are sustainable and should carry over to improved baseline systems. .. the background of press statements of controversial and accused him ... c. ... the background of controversial press statements and accused him ... 
