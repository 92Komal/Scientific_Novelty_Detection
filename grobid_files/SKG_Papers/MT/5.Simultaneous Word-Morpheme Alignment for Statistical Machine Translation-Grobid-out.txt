title
Simultaneous Word-Morpheme Alignment for Statistical Machine Translation

abstract
Current word alignment models for statistical machine translation do not address morphology beyond merely splitting words. We present a two-level alignment model that distinguishes between words and morphemes, in which we embed an IBM Model 1 inside an HMM based word alignment model. The model jointly induces word and morpheme alignments using an EM algorithm. We evaluated our model on Turkish-English parallel data. We obtained significant improvement of BLEU scores over IBM Model 4. Our results indicate that utilizing information from morphology improves the quality of word alignments.

Introduction All current state-of-the-art approaches to SMT rely on an automatically word-aligned corpus. However, current alignment models do not take into account the morpheme, the smallest unit of syntax, beyond merely splitting words. Since morphology has not been addressed explicitly in word alignment models, researchers have resorted to tweaking SMT systems by manipulating the content and the form of what should be the so-called "word". Since the word is the smallest unit of translation from the standpoint of word alignment models, the central focus of research on translating morphologically rich languages has been decomposition of morphologically complex words into tokens of the right granularity and representation for machine translation.  Chung and Gildea (2009)  and  Naradowsky and Toutanova (2011)  use unsupervised methods to find word segmentations that create a one-to-one mapping of words in both languages.  Al-Onaizan et al. (1999) ,  ?mejrek et al. (2003) , and  Goldwater and McClosky (2005)  manipulate morphologically rich languages by selective lemmatization.  Lee (2004)  attempts to learn the probability of deleting or merging Arabic morphemes for Arabic to English translation.  Niessen and Ney (2000)  split German compound nouns, and merge German phrases that correspond to a single English word. Alternatively,  Yeniterzi and Oflazer (2010)  manipulate words of the morphologically poor side of a language pair to mimic having a morphological structure similar to the richer side via exploiting syntactic structure, in order to improve the similarity of words on both sides of the translation. We present an alignment model that assumes internal structure for words, and we can legitimately talk about words and their morphemes in line with the linguistic conception of these terms. Our model avoids the problem of collapsing words and morphemes into one single category. We adopt a twolevel representation of alignment: the first level involves word alignment, the second level involves morpheme alignment in the scope of a given word alignment. The model jointly induces word and morpheme alignments using an EM algorithm. We develop our model in two stages. Our initial model is analogous to IBM Model 1: the first level is a bag of words in a pair of sentences, and the second level is a bag of morphemes. In this manner, we embed one IBM Model 1 in the scope of another IBM Model 1. At the second stage, by introducing distortion probabilities at the word level, we develop an HMM extension of the initial model. We evaluated the performance of our model on the Turkish-English pair both on hand-aligned data and by running end-to-end machine translation experiments. To evaluate our results, we created gold word alignments for 75 Turkish-English sentences. We obtain significant improvement of AER and BLEU scores over IBM Model 4. Section 2.1 introduces the concept of morpheme alignment in terms of its relation to word alignment. Section 2.2 presents the derivation of the EM algorithm and Section 3 presents the results of our experiments. 2 Two-level Alignment Model (TAM) 

 Morpheme Alignment Following the standard alignment models of  Brown et al. (1993) , we assume one-to-many alignment for both words and morphemes. A word alignment a w (or only a) is a function mapping a set of word positions in a source language sentence to a set of word positions in a target language sentence. A morpheme alignment a m is a function mapping a set of morpheme positions in a source language sentence to a set of morpheme positions in a target language sentence. A morpheme position is a pair of integers (j, k), which defines a word position j and a relative morpheme position k in the word at position j. The alignments below are depicted in Figures  1 and 2 . a w (1) = 1 a m (2, 1) = (1, 1) a w (2) = 1 Figure  1  shows a word alignment between two sentences. Figure  2  shows the morpheme alignment between same sentences. We assume that all unaligned morphemes in a sentence map to a special null morpheme. A morpheme alignment a m and a word alignment a w are compatible if and only if they satisfy the following conditions: If the morpheme alignment a m maps a morpheme of e to a morpheme of f , then the word alignment a w maps e to f . If the word alignment a w maps e to f , then the morpheme alignment a m maps at least one morpheme of e to a morpheme of f . If the word alignment a w maps e to null, then all of its morphemes are mapped to null. In sum, a morpheme alignment a m and a word alignment a w are compatible if and only if: ? j, k, m, n ? N + , ? s, t ? N + [a m (j, k) = (m, n) ? a w (j) = m] ? [a w (j) = m ? a m (j, s) = (m, t)] ? [a w (j) = null ? a m (j, k) = null] (1) Please note that, according to this definition of compatibility, 'a m (j, k) = null' does not necessarily imply 'a w (j) = null'. A word alignment induces a set of compatible morpheme alignments. However, a morpheme alignment induces a unique word alignment. Therefore, if a morpheme alignment a m and a word alignment a w are compatible, then the word alignment is a w is recoverable from the morpheme alignment a m . The two-level alignment model (TAM), like IBM Model 1, defines an alignment between words of a sentence pair. In addition, it defines a morpheme alignment between the morphemes of a sentence pair. The problem domain of IBM Model 1 is defined over alignments between words, which is depicted as the gray box in Figure  1 . In Figure  2 , the smaller boxes embedded inside the main box depict the new problem domain of TAM. Given the word alignments in Figure  1 , we are presented with a new alignment problem defined over their morphemes. The new alignment problem is constrained by the given word alignment. We, like IBM Model 1, adopt a bag-of-morphemes approach to this new problem. We thus embed one IBM Model 1 into the scope of another IBM Model 1, and formulate a second-order interpretation of IBM Model 1. TAM, like IBM Model 1, assumes that words and morphemes are translated independently of their context. The units of translation are both words and morphemes. Both the word alignment a w and the morpheme alignment a m are hidden variables that need to be learned from the data using the EM algorithm. In IBM Model 1, p(e|f ), the probability of translating the sentence f into e with any alignment is computed by summing over all possible word alignments:  In TAM, the probability of translating the sentence f into e with any alignment is computed by summing over all possible word alignments and all possible morpheme alignments that are compatible with a given word alignment a w : p(e|f ) = a p(a, e|f ) p(e|f ) = aw p(a w , e|f ) am p(a m , e|a w , f ) (2) where a m stands for a morpheme alignment. Since the morpheme alignment a m is in the scope of a given word alignment a w , a m is constrained by a w . In IBM Model 1, we compute the probability of translating the sentence f into e by summing over all possible word alignments between the words of f and e: p(e|f ) = R(e, f ) |e| j=1 |f | i=0 t(e j |f i ) (3) where t(e j | f i ) is the word translation probability of e j given f i . R(e, f ) substitutes P (le|l f ) (l f +1) le for easy readability.  1  In TAM, the probability of translating the sentence f into e is computed as follows: Word R(e, f ) |e| j=1 |f | i=0 t(e j |f i ) R(e j , f i ) |e j | k=1 |f i | n=0 t(e k j |f n i ) 

 Morpheme where f n i is the n th morpheme of the word at position i. The right part of this equation, the contribution of morpheme translation probabilities, is 1 le = |e| is the number of words in sentence e and l f = |f |. in the scope of the left part. In the right part, we compute the probability of translating the word f i into the word e j by summing over all possible morpheme alignments between the morphemes of e j and f i . R(e j , f i ) is equivalent to R(e, f ) except for the fact that its domain is not the set of sentences but the set of words. The length of words e j and f i in R(e j , f i ) are the number of morphemes of e j and f i . The left part, the contribution of word translation probabilities alone, equals Eqn. 3. Therefore, canceling the contribution of morpheme translation probabilities reduces TAM to IBM Model 1. In our experiments, we call this reduced version of TAM 'word-only' (IBM). TAM with the contribution of both word and morpheme translation probabilities, as the equation above, is called 'word-andmorpheme'. Finally, we also cancel out the contribution of word translation probabilities, which is called 'morpheme-only'. In the 'morpheme-only' version of TAM, t(e j |f i ) equals 1. Bellow is the equation of p(e|f ) in the morpheme-only model. p(e|f ) = R(e, f ) |e| j=1 |f | i=0 |e j | k=1 |f i | n=0 R(e j , f i )t(e k j |f n i ) (4) Please note that, although this version of the twolevel alignment model does not use word translation probabilities, it is also a word-aware model, as morpheme alignments are restricted to correspond to a valid word alignment according to Eqn. 1. When presented with words that exhibit no morphology, the morpheme-only version of TAM is equivalent to IBM Model 1, as every single-morpheme word is itself a morpheme. Deficiency and Non-Deficiency of TAM We present two versions of TAM, the word-and-morpheme and the morpheme-only versions. The word-and-morpheme version of the model is deficient whereas the morpheme-only model is not. The word-and-morpheme version is deficient, because some probability is allocated to cases where the morphemes generated by the morpheme model do not match the words generated by the word model. Moreover, although most languages exhibit morphology to some extent, they can be input to the algorithm without morpheme boundaries. This also causes deficiency in the word-and-morpheme version, as single morpheme words are generated twice, as a word and as a morpheme. Nevertheless, we observed that the deficient version of TAM can perform as good as the nondeficient version of TAM, and sometimes performs better. This is not surprising, as deficient word alignment models such as IBM Model 3 or discriminative word alignment models work well in practice.  Goldwater and McClosky (2005)  proposed a morpheme aware word alignment model for language pairs in which the source language words correspond to only one morpheme. Their word alignment model is: P (e|f ) = K k=0 P (e k |f ) where e k is the k th morpheme of the word e. The morpheme-only version of our model is a generalization of this model. However, there are major differences in their and our implementation and experimentation. Their model assumes a fixed number of possible morphemes associated with any stem in the language, and if the morpheme e k is not present, it is assigned a null value. The null word on the source side is also a null morpheme, since every single morpheme word is itself a morpheme. In TAM, the null word is the null morpheme that all unaligned morphemes align to. 

 Second-Order Counts In TAM, we collect counts for both word translations and morpheme translations. Unlike IBM Model 1, R(e, f ) = P (le|l f ) (l f +1) le does not cancel out in the counts of TAM. To compute the conditional probability P (l e |l f ), we assume that the length of word e (the number of morphemes of word e) varies according to a Poisson distribution with a mean that is linear with length of the word f . P (l e |l f ) = F Poisson (l e , r ? l f ) = exp(?r ? l f )(r ? l f ) le l e ! F Poisson (l e , r ? l f ) expresses the probability that there are l e morphemes in e if the expected number of morphemes in e is r ? l f , where r = E[le] E[l f ] is the rate parameter. Since l f is undefined for null words, we omit R(e, f ) for null words. We introduce T (e|f ), the translation probability of e given f with all possible morpheme alignments, as it will occur frequently in the counts of TAM: T (e|f ) = t(e|f )R(e, f ) |e| k=1 |f | n=0 t(e k |f n ) The role of T (e|f ) in TAM is very similar to the role of t(e|f ) in IBM Model 1. In finding the Viterbi alignments, we do not take max over the values in the summation in T (e|f ). 

 Word Counts Similar to IBM Model 1, we collect counts for word translations over all possible alignments, weighted by their probability. In Eqn. 5, the count function collects evidence from a sentence pair (e, f ) as follows: For all words e j of the sentence e and for all word alignments a w (j), we collect counts for a particular input word f and an output word e iff e j = e and f aw(j) = f . c w (e|f ; e, f , a w ) = 1?j?|e| s.t. e=e j f =f aw (j) T (e|f ) |f | i=0 T (e|f i ) (5) 

 Morpheme Counts As for morpheme translations, we collect counts over all possible word and morpheme alignments, weighted by their probability. The morpheme count function below collects evidence from a word pair (e, f ) in a sentence pair (e, f ) as follows: For all words e j of the sentence e and for all word alignments a w (j), for all morphemes e k j of the word e j and for all morpheme alignments a m (j, k), we collect counts for a particular input morpheme g and an output morpheme h iff e j = e and f aw(j) = f and h = e k j and g = f am(j,k) . c m (h|g; e, f , a w , a m ) = 1?j?|e| s.t. e=e j f =f aw (j) 1?k?|e| s.t. h=e k j g=f am(j,k) T (e|f ) |f | i=0 T (e|f i ) t(h|g) |f | i=1 t(h|f i ) The left part of the morpheme count function is the same as the word-counts in Eqn. 5. Since it does not contain h or g, it needs to be computed only once for each word. The right part of the equation is familiar from the IBM Model 1 counts. 

 HMM Extension We implemented TAM with the HMM extension  (Vogel et al., 1996)  at the word level. We redefine p(e|f ) as follows: R(e, f ) aw |e| j=1 p(s(j ) |C (f aw (j ?1 ) )) t(e j |f aw(j) ) R(e j , f aw(j) ) am |e j | k=1 t(e k j |f am(j,k) ) where the distortion probability depends on the relative jump width s(j) = a w (j ? 1) ? a w (j), as opposed to absolute positions. The distortion probability is conditioned on class of the previous aligned word C (f aw(j?1) ). We used the mkcls tool in GIZA  (Och and Ney, 2003)  to learn the word classes. We formulated the HMM extension of TAM only at the word level. Nevertheless, the morpheme-only version of TAM also has an HMM extension, as it is also a word-aware model. To obtain the HMM extension of the morpheme-only version, substitute t(e j |f aw(j) ) with 1 in the equation above. For the HMM to work correctly, we must handle jumping to and jumping from null positions. We learn the probabilities of jumping to a null position from the data. To compute the jump probability from a null position, we keep track of the nearest previous source word that does not align to null, and use the position of the previous non-null word to calculate the jump width. For this reason, we use a total of 2l f ? 1 words for the HMM model, the positions > l f stand for null positions between the words of f (Och and Ney, 2003). We do not allow null to null jumps. In sum, we enforce the following constraints: P (i + l f + 1|i ) = p(null|i ) P (i + l f + 1|i + l f + 1) = 0 P (i|i + l f + 1) = p(i|i ) In the HMM extension of TAM, we perform forward-backward training using the word counts in Eqn. 5 as the emission probabilities. We calculate the posterior word translation probabilities for each e j and f i such that 1 ? j ? l e and 1 ? i ? 2l f ? 1 as follows: ? j (i) = ? j (i)? j (i) 2l f ?1 m=1 ? j (m)? j (m) where ? is the forward and ? is the backward probabilities of the HMM. The HMM word counts, in turn, are the posterior word translation probabilities obtained from the forward-backward training: c w (e|f ; e, f , a w ) = 1?j?|e| s.t. e=e j f =f aw (j) ? j (a w (j)) Likewise, we use the posterior probabilities in HMM morpheme counts: c m (h|g; e, f , a w , a m ) = 1?j?|e| s.t. e=e j f =f aw (j) 1?k?|e| s.t. h=e k j g=f am(j,k) ? j (a w (j)) t(h|g) |f | i=1 t(h|f i ) The complexity of the HMM extension of TAM is O(n 3 m 2 ), where n is the number of words, and m is the number of morphemes per word. 

 Variational Bayes Moore  (2004)  showed that the EM algorithm is particularly susceptible to overfitting in the case of rare words when training IBM Model 1. In order to prevent overfitting, we use the Variational Bayes extension of the EM algorithm  (Beal, 2003) . This  amounts to a small change to the M step of the original EM algorithm. We introduce Dirichlet priors ? to perform an inexact normalization by applying the function f (v) = exp(?(v)) to the expected counts collected in the E step, where ? is the digamma function  (Johnson, 2007) . ? x|y = f (E[c(x|y)] + ?) f ( j E[c(x j |y)] + ?) We set ? to 10 ?20 , a very low value, to have the effect of anti-smoothing, as low values of ? cause the algorithm to favor words which co-occur frequently and to penalize words that co-occur rarely. 3 Experimental Setup 

 Data We trained our model on a Turkish-English parallel corpus of approximately 50K sentences, which have a maximum of 80 morphemes. Our parallel data consists mainly of documents in international relations and legal documents from sources such as the Turkish Ministry of Foreign Affairs, EU, etc. We followed a heavily supervised approach in morphological analysis. The Turkish data was first morphologically parsed  (Oflazer, 1994 ), then disambiguated (Sak et al., 2007  to select the contextually salient interpretation of words. In addition, we removed morphological features that are not explicitly marked by an overt morpheme -thus each feature symbol beyond the root part-of-speech corresponds to a morpheme. Line (b) of Figure  3  shows an example of a segmented Turkish sentence. The root is followed by its part-of-speech tag separated by a '+'. The derivational and inflectional morphemes that follow the root are separated by '-'s. In all experiments, we used the same segmented version of the Turkish data, because Turkish is an agglutinative language. For English, we used the CELEX database  (Baayen et al., 1995)  to segment English words into morphemes. We created two versions of the data: a segmented version that involves both derivational and inflectional morphology, and an unsegmented POS tagged version. The CELEX database provides tags for English derivational morphemes, which indicate their function: the part-of-speech category the morpheme attaches to and the part-of-speech category it returns. For example, in 'sparse+ity' = 'sparsity', the morpheme -ity attaches to an adjective to the right and returns a noun. This behavior is represented as 'N|A.' in CELEX, where '.' indicates the attachment position. We used these tags in addition to the surface forms of the English morphemes, in order to disambiguate multiple functions of a single surface morpheme. The English sentence in line (d) of Figure  3  exhibits both derivational and inflectional morphology. For example, 'author+ity+s'='authorities' has both an inflectional suffix -s and a derivational suffix -ity, whereas 'person+s' has only an inflectional suffix -s. For both English and Turkish data, the dashes in Figure  3  stand for morpheme boundaries, therefore the strings between the dashes are treated as indi-   1  shows the number of words, the number of morphemes and the respective vocabulary sizes. The average number of morphemes in segmented Turkish words is 2.69, and the average length of segmented English words is 1.57. 

 Experiments We initialized our baseline word-only model with 5 iterations of IBM Model 1, and further trained the HMM extension  (Vogel et al., 1996)  for 5 iterations. We call this model 'baseline HMM' in the discussions. Similarly, we initialized the two versions of TAM with 5 iterations of the model explained in Section 2.2, and then trained the HMM extension of it as explained in Section 2.3 for 5 iterations. To obtain BLEU scores for TAM models and our implementation of the word-only model, i.e. baseline-HMM, we bypassed GIZA++ in the Moses toolkit  (Och and Ney, 2003) . We also ran GIZA++ (IBM Model 1-4) on the data. We translated 1000 sentence test sets. 

 Results and Discussion We evaluated the performance of our model in two different ways. First, we evaluated against gold word alignments for 75 Turkish-English sentences. Second, we used the word Viterbi alignments of our algorithm to obtain BLEU scores. Table  2  shows the AER (Och and Ney, 2003) of the word alignments of the Turkish-English pair and the translation performance of the word alignments learned by our models. We report the grow-diagfinal  (Koehn et al., 2003)  of the Viterbi alignments. In Table  2 , results obtained with different versions of the English data are represented as follows: 'Der' stands for derivational morphology, 'Inf' for inflectional morphology, and 'POS' for part-of-speech tags. 'Der+Inf' corresponds to the example sentence in line (d) in Figure  3 , and 'POS' to line (e). 'DIR' stands for models with Dirichlet priors, and 'NO DIR' stands for models without Dirichlet priors. All reported results are of the HMM extension of respective models. Table  2  shows that using Dirichlet priors hurts the AER performance of the word-and-morpheme model in all experiment settings, and benefits the morpheme-only model in the POS tagged experiment settings. In order to reduce the effect of nondeterminism, we run Moses three times per experiment setting, and report the highest BLEU scores obtained. Since the BLEU scores we obtained are close, we did a significance test on the scores  (Koehn, 2004) . Table  2  visualizes the partition of the BLEU scores into statistical significance groups. If two scores within the same column have the same background color, or the border between their cells is removed, then the difference between their scores is not statistically significant. For example, the best BLEU scores, which are in bold, have white background. All scores in a given experiment setting without white background are significantly worse than the best score in that experiment setting, unless there is no border separating them from the best score. In all experiment settings, the TAM Models perform better than the baseline-HMM. Our experiments showed that the baseline-HMM benefits from Dirichlet priors to a larger extent than the TAM models. Dirichlet priors help reduce the overfitting in the case of rare words. The size of the word vocabulary is larger than the size of the morpheme vocabulary. Therefore the number of rare words is larger for words than it is for morphemes. Consequently, baseline-HMM, using only the vocab- In four out of eight experiment settings, the morpheme-only model performs better than the word-and-morpheme version of TAM. However, please note that our extensive experimentation with TAM models revealed that the superiority of the morpheme-only model over the word-andmorpheme model is highly dependent on segmentation accuracy, degree of segmentation, and morphological richness of languages. Finally, we treated morphemes as words and trained IBM Model 4 on the morpheme segmented versions of the data. To obtain BLEU scores, we had to unsegment the translation output: we concatenated the prefixes to the morpheme to the right, and suffixes to the morpheme to the left. Since this process creates malformed words, the BLEU scores obtained are much lower than the scores obtained by IBM Model 4, the baseline and the TAM Models. 

 Conclusion We presented two versions of a two-level alignment model for morphologically rich languages. We ob-served that information provided by word translations and morpheme translations interact in a way that enables the model to be receptive to the partial information in rarely occurring words through their frequently occurring morphemes. We obtained significant improvement of BLEU scores over IBM Model 4. In conclusion, morphologically aware word alignment models prove to be superior to their word-only counterparts. Figure 1 : 1 Figure 1: Word alignment 
