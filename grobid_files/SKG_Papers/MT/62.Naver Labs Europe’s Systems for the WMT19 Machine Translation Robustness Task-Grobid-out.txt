title
Naver Labs Europe's Systems for the WMT19 Machine Translation Robustness Task

abstract
This paper describes the systems that we submitted to the WMT19 Machine Translation robustness task. This task aims to improve MT's robustness to noise found on social media, like informal language, spelling mistakes and other orthographic variations. The organizers provide parallel data extracted from a social media website 1 in two language pairs: French-English and Japanese-English (in both translation directions). The goal is to obtain the best scores on unseen test sets from the same source, according to automatic metrics (BLEU) and human evaluation. We proposed one single and one ensemble system for each translation direction. Our ensemble models ranked first in all language pairs, according to BLEU evaluation. We discuss the preprocessing choices that we made, and present our solutions for robustness to noise and domain adaptation.

Introduction Neural Machine Translation (NMT) has achieved impressive results in recent years, especially on high-resource language pairs  (Vaswani et al., 2017; , and has even lead to some claims of human parity  (Hassan et al., 2018) .  2  However,  Belinkov and Bisk (2018)  show that NMT is brittle, and very sensitive to simple character-level perturbations like letter swaps or keyboard typos. They show that one can make an MT system more robust to these types of synthetic noise, by introducing similar noise on the source side of the training corpus.  Sperber et al. (2017)  do similar data augmentation, but at the word level and so as to make an MT model more robust to Automatic Speech Recognition errors (within a speech translation pipeline).  Cheng et al. (2018)  propose an adversarial training approach to make an encoder invariant to word-level noise.  Karpukhin et al. (2019)  propose to inject aggressive synthetic noise on the source side of training corpora (with random char-level operations: deletion, insertion, substitution and swap), and show that this is helpful to deal with natural errors found in Wikipedia edit logs, in several language pairs.  Michel and Neubig (2018)  release MTNT, a real-world noisy corpus, to help researchers develop MT systems that are robust to natural noise found on social media. The same authors coorganized this task  (Li et al., 2019) , in which MTNT is the primary resource.  Vaibhav et al. (2019)  show that back-translation (with a model trained on MTNT) and synthetic noise (that emulates errors found in MTNT) are useful to make NMT models more robust to MTNT noise. This task aims at improving MT's robustness to noise found on social media, like informal language, spelling mistakes and other orthographic variations. We present the task in more detail in Section 2. Then, we describe our baseline models and pre-processing in Section 3. We extend these baseline models with robustness and domain adaptation techniques that are presented in Section 4. Finally, in Section 5, we present and discuss the results of our systems on this task. 

 Task description The goal of the task is to make NMT systems that are robust to noisy text found on Reddit, a social media, in two language pairs (French-English and Japanese-English) and both translation directions. The evaluation will be performed on a blind test set (obtained from the same source), using automatic metrics and human evaluation. We present our final BLEU scores in Section 5, while the human evaluation results are given in the shared task overview paper  (Li et al., 2019) .  Michel and Neubig (2018)  crawled monolingual data from Reddit in three languages: English, French and Japanese, which they filtered to keep only the "noisiest" comments (containing unknown words or with low LM scores). 

 MTNT Then, they tasked professional translators to translate part of the English data to French, and part of it to Japanese. The Japanese and French data was translated to English. The resulting parallel corpora were split into train, valid and test sets (see Table  1 ). The test sets were manually filtered so as to keep only good quality translations. The data that was not translated is made available as monolingual corpora (see Table  3 ). Other data In addition to the provided indomain training and evaluation data, we are allowed to use larger parallel and monolingual corpora (see Tables  2 and 3 ). For FR?EN, any parallel or monolingual data from the WMT15 news translation task 3 is authorized. For JA?EN, we are allowed the same data that was used by  Michel and Neubig (2018) : KFTT, TED and JESC. Challenges  Michel and Neubig (2018)  identified a number of challenges for Machine Translation of MTNT data, which warrant the study of MT robustness. Here is an abbreviated version of their taxonomy: ? Spelling and grammar mistakes: e.g., their/they're, have/of. ? Spoken language and internet slang: e.g., lol, mdr, lmao, etc. ? Named entities: many Reddit posts link to recent news articles and evoke celebrities or politicians. There are also many references to movies, TV shows and video games. ? Code switching: for instance, Japanese text on Reddit contains many English words. ? Reddit jargon: words like "downvote", "upvote" and "cross-post", 4 and many acronyms like TIL (Today I Learned), OP (Original Poster), etc. ? Reddit markdown: characters like "?", "*" and "^" are extensively used for formatting. "!" is used to call macros. ? Emojis (?) and emoticons (";-)"). 3 http://www.statmt.org/wmt15/ translation-task.html 4 The French-speaking Reddit community sometimes uses funny literal translations of these: "bas-vote", "haut-vote" and "croix-poteau".  ? Inconsistent capitalization: missing capital letters on proper names, capitalization for emphasis or "shouting", etc. ? Inconsistent punctuation. Evaluation Automatic evaluation is performed with cased BLEU  (Papineni et al., 2002) , using SacreBLEU  (Post, 2018) .  5  For English and French, the latter takes as input the detokenized MT outputs and the untokenized reference data. For Japanese, the MT output and reference are first tokenized with Kytea 6  (Neubig et al., 2011)  before being processed by SacreBLEU (because it does not know how to tokenize Japanese). The organizers will also collect subjective judgments from human annotators, and rank the participants accordingly.   

 Language 

 Baseline models This section describes the pre-processing and hyper parameters of our baseline models. We will then detail the techniques that we applied for robustness and domain adaptation. 

 Pre-processing CommonCrawl filtering We first spent efforts on filtering and cleaning the WMT data (in particular CommonCrawl). We observed two types of catastrophic failures when training FR?EN models: source sentence copy, and total hallucinations. The first type of error (copy) is due to having sentence pairs in the training data whose reference "translation" is a copy of the source sentence.  Khayrallah and Koehn (2018)  show that even a small amount of this type of noise can have catastrophic effects on BLEU. We solve this problem by using a language identifier (langid.py,  Lui and Baldwin, 2012)  to remove any sentence pair whose source or target language is not right. Then, we observed that most of the hallucinations produced by our models were variants of the same phrases (see Table  5  for an example). We looked for the origin of these phrases in the training data, and found that they all come from Com-monCrawl  (Smith et al., 2013) . We tried several approaches to eliminate hallucinations, whose corresponding scores are shown in Table  4:  1. Length filtering (removing any sentence pair whose length ratio is greater than 1.8, or 1.5 for CommonCrawl): removes most hallucinations and gives the best BLEU score (when combined with LID filtering). This type of filtering is common in MT pipelines  (Koehn et al., 2007) .  filtered CommonCrawl as follows: we trained a baseline FR?EN model on WMT without filtering, then translated CommonCrawl while forcing the MT output to be the actual reference, and extracted the corresponding attention matrices. We computed statistics on these attention matrices: their entropy and proportion of French words with a total attention mass lower than 0.2, 0.3, 0.4 and 0.5. Then, we manually looked for thresholds to filter out most of the misalignments, while removing as little correctly aligned data as possible. 

 Excluding A combination of LID, length-based and attention-based filtering removed all hallucinations in the MT outputs, while obtaining excellent BLEU scores. The resulting corpus has 12% fewer lines.  8  We use this filtered data for both FR?EN and EN?FR. As the JA?EN training data seemed much cleaner, we only did a LID filtering step. SentencePiece We use SentencePiece  (Kudo and Richardson, 2018)  for segmentation into subword units. An advantage of SentencePiece is that it does not require a prior tokenization step (it does its own coarse tokenization, based on whitespaces and changes of unicode categories). It also escapes all whitespaces (by replacing them with a meta symbol), so that its tokenization is fully reversible. This is convenient for emoticons (e.g., ':-('), which Moses-style tokenization tends to break apart irreversibly. SentencePiece also normalizes unicode characters using the NFKC rules (e.g., ? ? 1/2). It is useful for Japanese, which sometimes uses doublewidth variants of the ASCII punctuation symbols (e.g., "fullwidth question mark" in unicode table). We tried different settings of SentencePiece, and settled with the BPE algorithm  (Sennrich et al., 2016b) , 9 with a joined model of 32k tokens for FR?EN (with a vocabulary threshold of 100), and two separate models of size 16k for JA?EN. Japanese tokenization SentencePiece's tokenization is based mostly on whitespaces, which are very rare in Japanese. For this reason, a pre-tokenization step may be useful (as a way to enforce some linguistic bias and consistency in the BPE segmentation). We tested several tokenizers for Japanese: MeCab (with IPA and Juman dictionaries), 10 Ju-man++, 11 and Kytea. 12 MeCab and KyTea gave comparable results, slightly better than when using no pre-tokenization (especially when Japanese is the target language), and Juman++ gave worse results. We settled with Kytea, which is the official tokenizer used on the EN?JA task. 13 9 SentencePiece also implements ULM  (Kudo, 2018) . 10 http://taku910.github.io/mecab/ 11 https://github.com/ku-nlp/jumanpp 12 http://www.phontron.com/kytea/  13  We use the default model shipped with KyTea. 

 Model and hyper-parameters We use Transformer Big for FR?EN and JA?EN, and Transformer Base for EN?JA. We work with Fairseq, with essentially the same hyperparameters as . For FR?EN, we fit up to 3500 tokens in each batch, while training on 8 GPUs (with synchronous SGD). We accumulate gradients over 10 batches before updating the weights. This gives a theoretical maximum batch size of 280k tokens. These models are trained for 15 epochs, with a checkpoint every 2500 updates. We set the dropout rate to 0.1. The source and target embedding matrices are shared and tied with the last layer. For JA?EN, we fit 4000 tokens in each batch, and train on 8 GPUs without delayed updates, for 100 epochs with one checkpoint every epoch. We set the dropout rate to 0.3. For both language pairs, we train with Adam  (Kingma and Ba, 2015) , with a max learning rate of 0.0005, and the same learning rate schedule as ;  Vaswani et al. (2017) . We also do label smoothing with a 0.1 weight. We average the 5 best checkpoints of each model according to their perplexity on the validation set. We do half precision training, resulting in a 3? speedup on V100 GPUs . 

 Robustness techniques We now describe the techniques that we applied to our baseline models to make them more robust to the noise found in MTNT. 

 Case handling One of the sources of noise in the MTNT data is capital letters. On the Web, capital letters are often used for emphasis (to stress one particular word, or for "shouting"). However, NMT models treat uppercase words or subwords as completely different entities than their lowercase counterparts. BPE even tends to over-segment capitalized words that were not seen in its training data. One solution, used by  Levin et al. (2017)  is to do factored machine translation  (Sennrich and Haddow, 2016; Garcia-Martinez et al., 2016) , where words (or subwords) are set to lowercase and their case is considered as an additional feature. In this work, we use a simpler technique that we call "inline casing", which consists in using special tokens to denote uppercase (<U>) or title case subwords (<T>), and including these tokens within the sequence right after the corresponding (lowercase) subword. For instance, "They were SO TASTY!!" ? "they <T> _were _so <U> _tas <U> ty <U> !!". SentencePiece is trained and applied on lowercase text and the case tokens are added after the BPE segmentation. We also force SentencePiece to split mixed-case words (e.g., MacDonalds ? _mac <T> donalds <T>) 

 Placeholders MTNT contains emojis, which our baseline MT models cannot handle (unicode defines over 3 000 unique emojis). We simply replace all emojis in the training and test data with a special <emoji> token. Models trained with this data are able to recopy <emoji> placeholders at the correct position.  14  At test time, we replace target-side placeholders with source-side emojis in the same order. We use the same solution to deal with Reddit user names (e.g., /u/frenchperson) and subreddit names (e.g., /r/france). MT models sometimes fail to recopy them (e.g., /u/fran?ais). For this reason, we identify such names with regular expressions (robust to small variations: without leading / or with extra spaces), and replace them with <user> and <reddit> placeholders. 

 Natural noise We extract noisy variants of known words from the MTNT monolingual data, thanks to French and English lexicons and an extended edit distance (allowing letter swaps and letter repetitions). We also manually build a list of noise rules, with the most common spelling errors in English (e.g., your/you're, it/it's) and French (e.g., ?a/sa, ?/a), punctuation substitutions, letter swaps, spaces around punctuation and accent removal. Then we randomly replace words with noisy variants and apply these noise rules on the source side of MTNT-train, CommonCrawl and News Commentary (MTNT-train, TED and KFTT for EN?JA), and concatenate these noised versions to the clean training corpus. 

 Back-translation Back-translation  (Sennrich et al., 2016a;  is a way to take advantage of large amounts of monolingual data. This is particularly useful for domain adaptation (when the parallel data is not in the right domain), or for low-resource MT (when parallel data is scarce). In this task, we hope that back-translation can help on JA?EN, where we have less parallel data, and on FR?EN to expand vocabulary coverage (in particular w.r.t. recent named entities and news topics which are often evoked on Reddit). Table  3  describes the monolingual data which is available for constrained submissions. Newsdiscuss (user comments on the Web about news articles) is probably more useful than news-crawl as it is closer to the domain. We use our baseline models presented in Section 3 to back-translate the monolingual data. Following , we do sampling instead of beam search, with a softmax temperature of 1 0.9 . In all language pairs, we back-translate the target language MTNT monolingual data, with one different sampling for each epoch. We also backtranslate the following data: ? JA?EN: 1 20 th of news-discuss.en per epoch (with rotation at the 21 th epoch). ? FR?EN: 1 5 th of news-discuss.en per epoch (with rotation at the 6 th epoch). ? EN?FR: news-discuss.fr with one different sampling for each epoch and 1 5 th of newscrawl.fr (with rotation at the 6th epoch). 

 Tags We insert a tag at the beginning of each source sentence, specifying its type: <BT> for backtranslations, <noise> for natural noise, <real> for real data, and <rev> for MTNT data in the reverse direction (e.g., for JA?EN MT, we concatenate MTNT JA?EN and "reversed" MTNT EN?JA). Like  Vaibhav et al. (2019) , we found that "isolating" the back-translated data with a different source-side tag gave better BLEU scores. At test time, we always use the <real> tag. Like  Kobus et al. (2017) , we also use tags for domain adaptation. We prepend a tag to all source sentences specifying their corpus. For instance, sentences from MTNT get the <MTNT> tag and those from Europarl get the <europarl> tag. These "corpus" tags are used in conjunction with the "type" tags (e.g., MTNT back-translated sentences begin with <MTNT> <BT>). At test time, we use <MTNT> to translate MTNT-domain text, and no corpus tag at all to translate out-of-domain text. We found that this method is roughly as good for domain adaptation as fine-tuning. We settle with corpus tags (rather than fine-tuning), as it is more flexible, less tricky to configure and has better properties on out-of-domain text. 

 Results Tables 6, 7, 8 and 9 give the BLEU scores of our models on the MTNT-valid, MTNT-test and MTNT-blind sets (i.e., final results of the task). For FR?EN we also give BLEU scores on news-test 2014, to compare with the literature, and to measure general-domain translation quality after domain adaptation. For news-test, we use Moses' normalize-punctuation.perl on the MT outputs before evaluation. "MTNT" and "MTNT fine-tuned" are the baseline models of the task organizers  (Michel and Neubig, 2018) . The models marked * and * * were submitted respectively to the competition as primary and secondary systems.  (with +0.7 up to +3.1 BLEU compared to the next best result). ? means that different SacreBLEU parameters were used (namely "intl" tokenization). The "robustness" techniques like inline casing, emoji/Reddit placeholders and natural noise had little to no impact on BLEU scores. They solve problems that are too rare to be accurately measured by BLEU. For instance, we counted 5 emojis and 36 "exceptionally" capitalized words in MTNT-test. Improvements could be measured with BLEU on test sets where these phenomena have been artificially increased: e.g., an all-uppercase test set, or the natural noise of  Karpukhin et al. (2019) . Most of the BLEU gains were obtained thanks to careful data filtering and pre-processing, and thanks to domain adaptation: back-translation and integration of in-domain data with corpus tags. 

 Punctuation fixes We looked at the translation samples on the submission website, and observed that the French references used apostrophes (') and angle quotes (? and ?). This is inconsistent with the training data (including MTNT), which contains mostly single quotes (') and double quotes ("). A simple post-processing step to replace quotes led to a BLEU increase of 5 points for EN?FR. 15 

 Conclusion We presented our submissions to the WMT Robustness Task. The goal of this task was to build Machine Translation systems that are robust to the types of noise found on social media, in two language pairs (French-English and Japanese-English). Thanks to careful pre-processing and data filtering, and to a combination of several domain adaptation and robustness techniques (special handling of capital letters and emojis, natural noise injection, corpus tags and back-translation), our systems ranked first in the BLEU evaluation in all translation directions. Figure 1 : 1 Figure 1: Attention matrix of a French (left) ? English (top) Transformer when hallucinating. This is the average of the attention heads of the last decoder layer over the last encoder layer. 
