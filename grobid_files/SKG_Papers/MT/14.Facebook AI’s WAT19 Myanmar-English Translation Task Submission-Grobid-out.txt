title
Facebook AI's WAT19 Myanmar-English Translation Task Submission

abstract
This paper describes Facebook AI's submission to the WAT 2019 Myanmar-English translation task  (Nakazawa et al., 2019) . Our baseline systems are BPE-based transformer models. We explore methods to leverage monolingual data to improve generalization, including self-training, back-translation and their combination. We further improve results by using noisy channel re-ranking and ensembling. We demonstrate that these techniques can significantly improve not only a system trained with additional monolingual data, but even the baseline system trained exclusively on the provided small parallel dataset. Our system ranks first in both directions according to human evaluation and BLEU, with a gain of over 8 BLEU points above the second best system.

Introduction While machine translation (MT) has proven very successful for high resource language pairs  Hassan et al., 2018) , it is still an open research question how to make it work well for the vast majority of language pairs which are low resource. In this setting, relatively little parallel data is available to train the system and the translation task is even more difficult because the language pairs are usually more distant and the domains of the source and target language match less well . English-Myanmar is an interesting case study in this respect, because i) the language of Myanmar is morphologically rich and very different from English, ii) Myanmar language does not bear strong similarities with other high-resource languages and therefore does not benefit from multilingual training, iii) there is relatively little parallel data available and iv) even monolingual data in Myanmar language is difficult to gather due to the multiple encodings of the language. * Equal contribution. Motivated by this challenge, we participated in the 2019 edition of the competition on Myanmar-English, organized by the Workshop on Asian Translation. This paper describes our submission, which achieved the highest human evaluation and BLEU score  (Papineni et al., 2002)  in the competition. Following common practice in the field, we used back-translation  (Sennrich et al., 2015)  to leverage target side monolingual data. However, the domain of Myanmar monolingual data is very different from the test domain, which is English originating news . Since this may hamper the performance of back-translation, we also explored methods that leverage monolingual data on the source side, which is in-domain with the test set when translating from English to Myanmar. We investigated the use of selftraining  (Yarowski, 1995; Ueffing, 2006; Zhang and Zong, 2016;  which augments the original parallel data with synthetic data where sources are taken from the original source monolingual dataset and targets are produced by the current machine translation system. We show that self-training and back-translation are often complementary to each other and yield additional improvements when applied in an iterative fashion. In fact, back-translation and self-training can also be applied when learning from the parallel dataset alone, greatly improving performance over the baseline using the original bitext data. We also report further improvements by swapping beam search decoding with noisy channel reranking  and by ensembling. We will start by discussing the data preparation process in ?2, followed by our model details in ?3 and results in ?4. We conclude with some final remarks in ?5. In Appendix A we report training details and describe the methods that have not proved useful for this task in Appendix B. 

 Data In this section, we describe the data we used for training and the pre-processing we applied. 

 Parallel Data The parallel data was provided by the organizers of the competition and consists of two datasets. The first dataset is the Asian Language Treebank (ALT) corpus  (Thu et al., 2016;  which consists of 18,088 training sentences, 1,000 validation sentences and 1,018 test sentences from English originating news articles. In this dataset, there is a space character separating each Myanmar morpheme  (Thu et al., 2016) . The second dataset is the UCSY dataset 1 which contains 204,539 sentences from various domains, including news articles and textbooks. The originating language of these sentences is not specified. Unlike the ALT dataset, Myanmar text in the UCSY dataset is not segmented and contains very little spacing as it is typical in this language. The organizers of the competition evaluate submitted systems on the ALT test set. We denote the parallel dataset by P = {X, Y }. 

 Monolingual Data We gather English monolingual data by taking a subset of the 2018 Newscrawl dataset provided by WMT  (Barrault et al., 2019) , which contains approximately 79 million unique sentences. We choose Newscrawl data to match the domain of the ALT dataset, which primarily contains news originating from English sources. For Myanmar language, we take five snapshots of the Commoncrawl dataset and combine them with the raw data from  Buck et al. (2014) . After de-duplication, this resulted in approximately 28 million unique lines. This data is not restricted to the news domain. We denote by M S the source monolingual dataset and by M T target monolingual dataset. 

 Data Preprocessing The Myanmar monolingual data we collect from Commoncrawl contains text in both Unicode and Zawgyi encodings. We use the myanmar-tools 2 library to classify and con-vert all Zawgyi text to Unicode. Since text classification is performed at the document level, the corpus is left with many embedded English sentences, which we filter by running the fastText classifier  (Joulin et al., 2017)  over individual sentences. We tokenize English text using Moses  (Koehn et al., 2007)  with aggressive hyphen splitting. We explored multiple approaches for tokenizing Myanmar text, including the provided tokenizer and several open source tools. However, initial experiments showed that leaving the text untokenized yielded the best results. When generating Myanmar translations at inference time, we remove separators introduced by BPE, remove all spaces from the generated text, and then apply the provided tokenizer 3 . Finally, we use SentencePiece  (Kudo and Richardson, 2018)  to learn a BPE vocabulary of size 10,000 over the combined English and Myanmar parallel text corpus. 

 System Overview Our architecture is a transformer-based neural machine translation system trained with fairseq 4 . We tuned model hyper-parameters via random search over a range of possible values (see Appendix A for details). We performed early stopping based on perplexity on the ALT validation set, and final model hyperparameter selection based on the BLEU score on the same validation set. We never used the ALT test set during development, and only used it for the final reporting at submission time. Next, we describe several enhancements to this baseline model ( ?3.1) and to the decoding process ( ?3.2). We also describe several methods for leveraging monolingual data, including our final iterative approach ( ?3.3). 

 Improvements to the Baseline Model We improve our baseline neural machine translation system with: tagging  (Sennrich et al., 2016; Kobus et al., 2016; Caswell et al., 2019) , finetuning and ensembling. Tagging: Since our test set comes from the ALT corpus and our training set is composed by sev-eral datasets from different domains, we prepend to the input source sentence a token specifying the domain of the input data. We have a total of four domain tokens, indicating whether the input source sentence comes from the ALT dataset, the UCSY dataset, the source monolingual data or if it is a back-translation of the target monolingual data (see ?3.3 for more details). Fine-tuning: The models submitted for final evaluation have also been fine-tuned to the training set of the ALT dataset, as a way to better adapt to the domain of the test set. Fine-tuning is earlystopped based on BLEU on the validation set. Ensembling: Finally, since we tune our model hyper-parameters via randomized grid search, we are able to cheaply build an ensemble model from the top k best performing hyper-parameter choices. Ensembling yielded consistent gains of about 1 BLEU point. 

 Improvements to Decoding Neural machine translation systems typically employ beam search decoding at inference time to find the most likely hypothesis for a given source sentence. In this work, we improve upon beam search through noisy-channel reranking . This approach was a key component of the winning submission in the WMT 2019 news translation shared task for English-German, German-English, English-Russian and Russian-English . More specifically, given a source sentence x and a candidate translation y, we compute the following score: log P (y|x) + ? 1 log P (x|y) + ? 2 log P (y) (1) where log P (y|x), log P (x|y) and log P (y) are the forward model, backward model and language model scores, respectively. This combined score is used to rerank the n-best target hypotheses produced by beam search. In our experiments we set n to 50 and output the highest-scoring hypothesis from this set as our translation. The weights ? 1 and ? 2 are tuned via random search on the validation set. The ranges of values for ? 1 and ? 2 are reported in Appendix A. Throughout this work we use noisy channel reranking every time we decode, whether it is to generate forward or backward translations or to generate translations from the final model for evaluation purposes. 

 Model My?En En?My P -beam 25.1 35.9 P -reranking 26.3 36.9 P ? MT , beam -beam 32.2 38.8 P ? MT , reranking -beam 32.5 38.9 P ? MT , reranking -reranking 35.2 39.4 Table  1 : Effect of noisy channel reranking when evaluating on the validation set. On the left of the "-" symbol there is the dataset used to train the system and the decoding process used to generate back-translated data (if any). On the right of the "-" symbol there is the decoding process used to generate hypotheses from the forward model. P refers to the parallel dataset and M T refers to the target monolingual dataset. Our language models are also based on the transformer architecture and follow the same setup as  Radford et al. (2018) . The English language model is trained on the CC-News dataset  (Liu et al., 2019)  and consists of 12 transformer layers and a total of 124M parameters. The Myanmar language model is first trained on the Commoncrawl monolingual data and then fine-tuned on the Myanmar portion of the ALT parallel training data; it consists of 6 transformer layers and 70M parameters. For our constrained submission, which does not make use of additional data, we trained smaller transformer language models for each language (5 transformer layers, 8M parameters) using each side of the provided parallel corpus. For both directions, we observed gains when applying noisy channel reranking, as shown in Table 1. 

 Leveraging Monolingual Data In this section we describe basic approaches to leverage monolingual data. Notice however that these methods also improve system performance in the absence of additional monolingual data (i.e., by reusing the available parallel data), see ?4.1. We denote by ? ? f and ? ? g the forward (from source to target) and the backward (from target to source) machine translation systems. Back-translation (BT)  (Sennrich et al., 2015)  is an effective data augmentation method leveraging target side monolingual data. To perform back-translation, we first train ? ? g on {Y, X} and use it to translate M T to produce synthetic source side data, denoted by ? ? g (M T ). We then concatenate the original bitext data {X, Y } with the backtranslated data { ? ? g (M T ), M T } and train the forward translation model from scratch. We typi- 

 Model My?En  (M S , ? ? f (M S )}. The potential advantage of this method is that the source side monolingual data can be more in-domain with the test set, which is the case for the English to Myanmar direction. The shortcoming is that synthetic targets are often incorrect and may deteriorate performance. Combining BT + ST: Self-training and backtranslation are complementary to each other. The former is better when the source monolingual data is in-domain while the latter is better when the target monolingual data is in-domain, relative to the domain of the test set. In Table  2 , we show that these two approaches can be combined and yield better performance than either method individually. Specifically, we combine bitext data together with self-trained and back-translated data, {X, Y }?{ ? ? g (M T ), M T }? {(M S , ? ? f (M S )}. As for BT, we upsample the bitext data, concatenate it with the forward and backward translations and train a new forward model from scratch. The upsample ratios for each dataset are tuned via hyper-parameter search on the validation set. 

 Final Iterative Algorithm The final algorithm proceeds in rounds as described in Alg. 1. At each round, we are provided with a forward model ? ? f and a backward model ? ? g . The forward model translates source side monolingual data (line 6). This is used as forwardtranslated data to improve the forward model, and as back-translated data to improve the backward model. Similarly, the backward model is used This data is then used to improve the forward model via back-translation, but also the backward model via self-training. All these datasets are concatenated and weighted to train new forward and backward models (see lines 8 and 9). At the very last iteration, models are fine-tuned on the ALT training set (line 11 and 12), and either way, the best models from the random search are combined into an ensemble to define the new forward and backward models (line 13 and 14) to be used at the next iteration. This whole process of generation and training then repeats as many times as desired. In our experiments we iterated at most three times. 

 Results In this section we report validation BLEU scores for the intermediate iterations and ablations, and test BLEU scores only for our final submission. Details of the model architecture, data processing and optimization algorithm are reported in Appendix A. Our baseline system is trained on the provided parallel datasets with the modeling extensions described in ?3.1. According to our hyper-parameter search, the optimal upsampling ratio of the smaller in-domain ALT dataset is three and the best for- ward and backward model have 5 encoder and 5 decoder transformer layers, where the number of attention heads, embedding dimension and innerlayer dimension are 4, 512, 2048, respectively. Each single model is trained on 4 Volta GPUs for 1.4 hours. We refer to this model as the "Baseline" in our result tables. 

 System Trained on Parallel Data Only We submitted a machine translation system that only uses the provided ALT and UCSY parallel datasets, without any additional monolingual data, results are reported in Tab. 3. The baseline system achieves 23.3 BLEU points for My?En and 34.9 for En?My . Ensembling 5 models yields +1.8 BLEU points gain for My?En and +1.0 point for En?My . To apply noisy channel reranking, we train language models using data from the ALT and UCSY training set. The language model architectures are the same for both languages, each has 5 transformer layers, 4 attention heads, 256 embedding dimensions and 512 inner-layer dimensions. Noisy channel ranking yields a gain of +1.2 BLEU points for My?En and +1.0 points for En?My on top of the ensemble models. To further improve generalization, we also translated the source and target portion of the parallel dataset using the baseline system in order to collect forward-translations of source sentences and back-translations of target sentences. Based on our grid search, we then train a different model architecture than the baseline system, consisting of 4 layers in encoder and decoder, 8 attention heads, 512 embedding dimensions and 2048 innerlayer dimensions. Each model is trained on 4 Volta GPUs for 2.8 hours. In this case, we train only for one iteration and we ensemble 5 models for each direction followed by reranking. to the parallel data we obtain an additional gain of +0.7 points for My?En and +1.2 points for En?My over the baseline model. We also find that combining back-translation and self-training is beneficial for My?En direction, where we attain an increase of +0.5 BLEU compared to applying each method individually. The final BLEU scores on test set are 26.8 for My?En and 36.8 for En?My . 

 System Using Also Monolingual Data The results using additional monolingual data are reported in Tab. 4. Starting from the ensemble baseline of the previous section, noisy channel reranking now yields a bigger gain for My?En , +2.64 points, since the language model is now trained on much more in-domain target monolingual data. Using the ensemble and the additional monolingual data, we apply back-translation and selftraining for three iterations. For each iteration, we use the best model from the previous iteration to translate monolingual data with noisy channel reranking. As before, we combine the original parallel data with the two synthetic datasets, and train models from random initialization. We search over hyper-parameters controlling the model architecture whenever we add more monolingual data. At the first iteration we back-translate 18M English sentences from Newscrawl and 23M Myanmar sentences from Commoncrawl. The best model architecture has 6 layers in the encoder and decoder, where the number of attention heads, embedding dimension and inner-layer dimension are 1024, 4096, 8, respectively. Each model is trained on 4 Volta GPUs for 17 hours. Ensembling two models for My?En and three models for En?My strikes a good trade-off between translation quality and decoding efficiency to generate data for the next iteration. At the second iteration, we use the same amount of monolingual data of iteration 1 and repeat the same exact process. The model architecture is the same as in the first iteration. We ensemble two models for My?En and use a single model for En?My . We further improve upon the previous iteration by +1.41 points for My?En and +0.27 points for En?My . At the third and last iteration, we use more monolingual data for both languages, 28M Myanmar sentences and 79M English sentences. We found beneficial  at this iteration to increase FFN dimension to 8192 and the number of heads to 16. Each model is trained on 8 Volta GPUs for 30 hours. After training models on the parallel and synthetic datasets, we finetune each of them on the ALT training set, followed by ensembling. We ensemble 5 models for both directions and apply noisy channel re-ranking as our final submission. Compared to iteration 2 models, the final models yield +0.94 points gain for My?En and +0.26 points for En?My . The BLEU scores of this system on the test set are 38.59 for My?En and 39.25 for En?My . 

 Final Evaluation Tables  5 and 6  report the leaderboard results provided by the organizers of the competition. For each direction, they selected the best system of 5 http://lotus.kuee.kyoto-u.ac.jp/WAT/ evaluation/list.php?t=70&o=4 6 http://lotus.kuee.kyoto-u.ac.jp/WAT/ evaluation/list.php?t=71&o=9 Description (En ? My) BLEU Adequacy FBAI 39.3 3.9 FBAI 36.8 -Team A 31.3 2.4 Team B 30.8 2.7 Team C 30.8 -Team D 28.2 -Team F 25.9 -Team G 22.5 -Team H 20.9 1.1 Team I 19.9 -Table  6 : En?My leaderboard 6 . The values are BLEU score (second column) and Adequacy scores (third column). Rows highlighted in yellow identify systems that make use of additional monolingual data. Our system is tagged as FBAI. the four teams that scored the best according to BLEU, and they performed a JPO adequacy human evaluation  (Nakazawa et al., 2018) . These evaluations are conducted by professional translations who assign a score between 1 and 5 to each translation based on its adequacy. A score equal to 5 points means that all the important information is correctly reported while a score equal to 1 point means that almost all the important information is missing or incorrect. First, we observe that our system achieves the best BLEU and adequacy score in both directions, with a gain of more than 8 BLEU points over the second best entry for both directions. The average adequacy score is 0.4 point and 1.2 point higher than the second best entry for My?En and En?My , respectively. Among the rated sentences, more than 30% of sentences translated by our system are rated with 5 points in En?My , compared to 6.3% of the second best system. For My?En , 48% of our translated sentences are rated with 5 points while the second best system has only 24.5%. See Fig  1  for the percentage of each score obtained by the best systems which participated in the competition. Second, our submission which does not use additional monolingual data is even stronger than all the other submissions in En?My in terms of BLEU score, including those that do make use of additional monolingual data (see second row of Tab. 6). If we consider submissions that only use the provided parallel data (see rows that are not highlighted), our submission improves upon the sec- ond best system by 7.2 BLEU in My?En and 10.9 BLEU in En?My . This suggests that our baseline system is very strong and that applying ST and BT to the parallel dataset is a good way to build even stronger baselines, as demonstrated also in Tab. 3. Finally, the gains brought by monolingual datasets is striking only in My?En (+11.8 BLEU points in My?En compared to only +2.5 BLEU points in En?My , for our submissions). The reason is because the ALT test set originates from English news and the target English monolingual data is high quality and in-domain with the test set. Moreover, the source originating Myanmar sentences are translationese of English news sentences, a setting which is particularly favorable to BT. Instead, Myanmar monolingual data is out-ofdomain and noisy which makes BT much less effective. ST helps improving BT performance as shown in Tab. 2 but the gains are still limited. 

 Conclusion We described the approach we used in our submission to the WAT 2019 Myanmar-English machine translation competition. Our approach achieved the best performance both with and without the use of additional monolingual data. It is based on several methods which we combine together. First, we use back-translation to help regularizing and adapting to the test domain, particularly in the Myanmar to English direction. Second, we use self-training as a way to better leverage in-domain source-side monolingual data, particularly in the English to Myanmar direction. Third, given the complementary nature of these two approaches we combined them in an iterative fashion. Fourth, we improve decoding by using noisy-channel reranking and ensembling. We surmise that there is still quite some room for improvement by better leveraging noisy parallel data resources, by better combining together these different sources of additional data, and by designing better approaches to leverage source side monolingual data. 
