title
University of Edinburgh's Submission to the Document-level Generation and Translation Shared Task

abstract
The University of Edinburgh participated in all six tracks: NLG, MT, and MT+NLG with both English and German as targeted languages. For the NLG track, we submitted a multilingual system based on the Content Selection and Planning model of  Puduppully et al. (2019) . For the MT track, we submitted Transformerbased Neural Machine Translation models, where out-of-domain parallel data was augmented with in-domain data extracted from monolingual corpora. Our MT+NLG systems disregard the structured input data and instead rely exclusively on the source summaries. * Ratish worked on Tracks 1/2 and Jonathan on Tracks 3/4/5/6.

1 Track 1/2: Natural Language Generation The Natural Language Generation (NLG) track revolved around systems that take structured data in the form of tabular data from a basketball game as input, and generate a summary of this game in the target language. We entered one multilingual system which outputs summaries in both English and German. A multilingual model allows us to overcome the limited amount of German training data. We adopted the content selection and planning approach of  Puduppully et al. (2019) , made extensions to the model and parameterized the decoder with a language tag, indicating the target language. The training was done using the full ROTOWIRE English dataset and the ROTOWIRE English-German dataset. We first explain the approach of  Puduppully et al. (2019) , describe the extensions to their model and show how language tags can be added to the decoder to indicate the target language. Given input records, probability p(z|r) is modeled using Pointer Networks  (Vinyals et al., 2015) . The probability of output text y conditioned on previously generated content plan z and input table r is modeled as follows: p(y|r, z) = |y| t=1 p(y t |y <t , z, r) where y <t = y 1 . . . y t?1 . They use an encoderdecoder architecture with an attention mechanism to compute p(y|r, z). The architecture is shown in Figure  1 . The content plan z is encoded into {e k } |z| k=1 using a bidirectional LSTM. Because the content plan is a sequence of input records, they directly feed the corresponding content selected record vectors {r cs j } |r| j=1 as input to the LSTM units, which share the record encoder with the first stage. For details of the content selection stage, please refer  Puduppully et al. (2019) . The text decoder is also based on a recurrent neural network with LSTM units. The decoder is initialized with the hidden states of the final step in the encoder. At decoding step t, the input of the LSTM unit is the embedding of the previously  ? t,k ? exp(d t W b e k ) (1) q t = k ? t,k e k d att t = tanh(W d [d t ; q t ]) p gen (y t |y <t , z, r)=softmax yt (W y d att t + b y ) (2) where They further augment the decoder with a copy mechanism, allowing the ability to copy words directly from the value portions of records in the content plan (i.e., {z k } |z| k=1 ). They experimented with joint  (Gu et al., 2016)  and conditional copy methods  (Gulcehre et al., 2016) . Specifically, they introduce a variable u t ? {0, 1} for each time step to indicate whether the predicted token y t is copied (u t = 1) or not (u t = 0). The probability of generating y t is computed by: k ? t,k = 1, W b ? R n?n , W d ? R n?2n , W y ? R n?|Vy| , b y ? R |Vy| p(y t |y <t , z, r) = ut?{0,1} p(y t , u t |y <t , z, r) where u t is marginalized out. 

 Copying from Table and Plan We extended the copy mechanism further such that u t can take three values: y t is generated from the vocabulary (u t = 0), y t is copied from the content plan (u t = 1) and y t is copied from the table (u t = 2). 

 Conditional Copy The variable u t is first computed as a switch gate, and then is used to obtain the output probability: p(u t |y <t , z, r) = softmax(w u ? d att t + b u ) ? t,j ? exp(d t W c r cs j ) (3) p(y t , u t |y <t , z, r) = ? ? ? ? ? ? ? p(u t |y <t , z, r) yt?z k ? t,k u t = 1 p(u t |y <t , z, r) k ? t,k yt?r j ,j? k ? t,j u t = 2 p(u t |y <t , z, r)p gen (y t |y <t , z, r) u t = 0 where j? k ? t,j = 1. y t ? z k indicates that y t can be copied from z k , y t ? r j indicates that y t can be copied from r j . ? k indicates records in table corresponding to the kth record in plan, for example: if k is 'PTS' value of player Jeff Teague, then ? k corresponds to all the records for the entity Jeff Teague in the table including 'PTS', 'REB', 'NAME1', 'NAME2' etc. ? t,k and p gen (y t |y <t , z, r) are computed as in Equations (  1 )-(  2 ), and w u ? R 3?n , b u ? R 3 are parameters. ?  

 Attending to the Table and Content Plan The output text is generated by attending to both the content plan and the input table (See Figure  2 .) ? t,j ? exp(d t W c r CS j ) (4) s t = j ? t,j r CS j d att t = tanh(W d [d t ; q t ; s t ]) p gen (y t |y <t , z, r)=softmax yt (W y d att t + b y ) (5) where Upon inspection of the ROTOWIRE game summaries in the development set, we observed that the summaries often describe the statistics of the winning team followed by the statistics of the losing team. The highest ranked players of either team are also often described in sequence in the summaries. Currently, we rely on the word embeddings of the team and player points to help the model disambiguate the winning from the losing team and to learn the relative performances of the players. We hypothesize that explicitly providing information about the relative performance of players and teams should make the learning easier. We thus experimented with a feature for the winning/losing team and the ranking of player points within a team. Specifically, we added a binary feature for team records: win for each record in the winning team, loss for each record in the losing team. We further rank players in a team on the basis of their points and we add a feature indicating their rank in the team. For instance, Kyle Lowry scored the highest number of points in the home team and we add feature hometeam-0 to each of his records. Player Jahlil Okafor was the second highest scorer in the visiting team and we add the feature visteam-1 to each of his records and so on. j ? t,j = 1, W c ? R n?n , W d ? R n?3n , W y ? R n?|Vy| , b y ? R |Vy| 

 Training a Single Multilingual Model We trained a single model for English and German data-to-text with a common BPE  (Sennrich et al., 2015b)  vocabulary of 2000 symbols for the output summaries. Player names and values of records in summaries were not BPEd. The target text was prefixed with token indicating the language of output 'EN' or 'DE'. During inference, we forced the model to generate output in the desired language. 

 Dataset We made use of the full ROTOWIRE English dataset of  Wiseman et al. (2017)    

 Results Table  2  shows our results for English and German datasets on the Test set as provided by the shared task organizers. 

 Track 3/4 : Machine Translation The Machine Translation (MT) track revolves arround systems that translate source summaries to the target language. Our submission takes advantage of existing state-of-the-art techniques in machine translation, including (1) transformer networks  (Vaswani et al., 2017) . (2) subword units  (Sennrich et al., 2015b)  and (3) the inclusion of in-domain monolingual data used via backtranslation  (Sennrich et al., 2015a) . For our submission, we focus on finding indomain basketball summary data from within general-purpose monolingual datasets. We develop several heuristics allowing us to extract millions of in-domain monolingual sentences, which are then back-translated and included within the training data. This additional monolingual data improves bleu scores between 5 and 7 points. 

 Data The translation models were trained on both the ROTOWIRE English-German and all WMT19 parallel training data. A summary of the training data can be found in table 3. For ease of comparison to the NLG task, tokenization was done using the tokenizer provided by the shared task organizers. BPE was employed with a joint BPE subword vocabulary of 50k. We used back-translation to translate clean monolingual data from the target language to the source language. Finding in-domain data for basketball is not trivial, as there are no explicit basketball WMT19 monolingual training sets. Therefore, we extracted in-domain basketball data from the available general-purpose monolingual datasets. We considered all documents within the News Crawl 2007-2018 dataset and included all sentences which appeared within a document where any of the following conditions were met: (1) Contains a player's name, as taken from the RO-TOWIRE English-German training data; (2) Contains two team names; (3) the title contains the word NBA. For German, 1.1 million monolingual target sentences were collected, and for English, 4.32 million monolingual target sentences. These sentences were then back-translated via sampling  (Edunov et al., 2018)  and used to augment the parallel training data. 

 Model Description For our submissions, we used the Transformer model as implemented within OpenNMT-py  (Klein et al., 2017) . Transformers are state-of-theart NMT approaches which rely on multi-headed attention applied to both the source and target sentences. All experiments are performed with 6 encoder-decoder layers, with an embedding layer of size 512, a feed-forward layer size of 2048, and 8 attentional heads. We set the batch size to 4096 tokens and maximum sentence length to 100 BPE subwords. Dropout and label smoothing were also both set to 0.1. All other settings were set their default values as specified in OpenNMT-py. Decoding was performed with a beam size of ~15, length penalty averaging, and the decoder was constrained to block repeating 4-grams. Model selection was done using the BLEU score on the development set.  4  show that the inclusion of monolingual data leads to a significant increase in bleu (between 5 and 7 points). Table  5  shows test set results for both English and German target languages. The results were provided by the shared task organizers. 

 Results 

 Results on the development set in Table 

 Track 5/6: MT + NLG The MT + NLG track combines the previous tracks, models take in as input both the structured data and the summary in the source language and produce a summary in the target language as output. We chose to disregard the structured data and instead exclusively use the source summary, translating it to the target language. As such this submission to this track is a replication of our MT submission with results shown in Table  5 . 1. 1 1 The Content Selection and Planning Approach of Puduppully et al. (2019) Puduppully et al. (2019) model p(y|r) as the joint probability of text y and content plan z, given input r. They further decompose p(y, z|r) into p(z|r), a content selection and planning phase, and p(y|r, z), a text generation phase: 

 are parameters, and |V y | is the output vocabulary size. 

 are parameters, and |V y | is the output vocabulary size. 1.4 Feature for Team Points and Ranking of Player Points 

 1 ? 2 ? 3 ? 4 ? ? |?| ? Figure 2: Generation model with content selection and planning and attention over table and content plan. The text is generated conditioned on the content plan and the table. At any time step, output token is generated from vocabulary, copied from the content plan or copied from input table. ? ? (? 4 |?, ?, ? <4 ) ? ? (? 4 |?, ?, ? <4 ) Attention ? ? ? Data Attention Plan ? 4 ? 3 ? 3 ? 3 ? 2 ? 2 ? 2 ? 1 ? 1 ? 1 ? 4 ? Text Generation ?(?|?, ?) ? 1 ? 2 ? 3 Content Plan ? ? ? ? |?| ? ? ? ? Encoding ? ? ? ? ? ? ? ? ? ? ? ? ? ? |?| ? ? ? ? 1 ? 2 ? 3 ? 4 ? 4 Content Selection & ?(?|?) ? ? ? ? ? ? |?| ? ? ? ? Planning Encoder Decoder Vector Content Selection Gate 

 Table 1 : 1 and the German dataset provided as part of the shared task. The statistics of the dataset are given in Table 1. Count of examples in Training, Development and Test sections of English and German dataset. Train Dev Test English 3398 727 728 German 242 240 241 Model RG P% P% CS R% CO DLD% BLEU EN 91.41 30.91 64.13 21.72 17.01 DE 70.23 23.40 41.83 16.08 10.95 Table 2: Automatic evaluation for track 1/2 on the ROTOWIRE test set using record generation (RG) precision, content selection (CS) precision and recall, content ordering (CO) in normalized Damerau-Levenshtein distance, and BLEU. 

 Table 4 : 4 Track 3-6: ROTOWIRE dev set results, showing BLEU without monolingual data Parallel and with monolingual data Monolingual. EN-DE DE-EN Monolingual 34.44 40.72 Parallel 28.65 33.48 Model RG P% P% CS R% CO DLD% BLEU EN-DE 81.01 77.32 78.49 62.21 36.85 DE-EN 91.40 78.99 63.04 51.73 41.15 Table 5: Automatic evaluation for track 3-6 on the ROTOWIRE test set using record generation (RG) precision, content selection (CS) precision and recall, content ordering (CO) in normalized Damerau-Levenshtein distance, and BLEU.
