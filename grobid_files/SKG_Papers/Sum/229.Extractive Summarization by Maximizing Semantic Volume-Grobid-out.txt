title
Extractive Summarization by Maximizing Semantic Volume

abstract
The most successful approaches to extractive text summarization seek to maximize bigram coverage subject to a budget constraint. In this work, we propose instead to maximize semantic volume. We embed each sentence in a semantic space and construct a summary by choosing a subset of sentences whose convex hull maximizes volume in that space. We provide a greedy algorithm based on the Gram-Schmidt process to efficiently perform volume maximization. Our method outperforms the state-of-the-art summarization approaches on benchmark datasets.

Introduction In artificial intelligence, changes in representation sometimes suggest new algorithms. For example, increased attention to distributed meaning representations suggests that existing combinatorial algorithms for NLP might be supplanted by alternatives designed specifically for embeddings. In this work, we consider summarization. Classical approaches to extractive summarization represent each sentence as a bag of terms (typically bigrams) and seek a subset of sentences from the input document(s) that either (a) trade off between high relevance and low redundancy  (Carbonell and Goldstein, 1998; McDonald, 2007) , or (b) maximize bigram coverage  (Yih et al., 2007; Gillick et al., 2008) . The sentence representation is fundamentally discrete, and a range of greedy  (Carbonell and Goldstein, 1998) , approximate  (Almeida and Martins, 2013) , and exact optimization algorithms  (McDonald, 2007; Martins and Smith, 2009; Berg-Kirkpatrick et al., 2011)  have been proposed. Recent studies have explored continuous sentence representations, including the paragraph vector  (Le and Mikolov, 2014) , a convolutional neural network architecture  (Kalchbrenner et al., 2014) , and a dictionary learning approach  (Jenatton et al., 2011) . If sentences are represented as low-dimensional embeddings in a distributed semantic space, then we begin to imagine a geometric relationship between a summary and a document. We propose that the volume of a summary (i.e., the semantic subspace spanned by the selected sentences) should ideally be large. We therefore formalize a new objective function for summarization based on semantic volume ( ?2), and we provide a fast greedy algorithm that can be used to maximize it ( ?3). We show that our method outperforms competing extractive baselines under similar experimental conditions on benchmark summarization datasets ( ?4). 

 Extractive Summarization Models Assume we are given a set of N sentences: D = {s 1 , s 2 , . . . , s N } from one or many documents, and the goal is to produce a summary by choosing a subset S of M sentences, where S ? D and M ? N , and the length of the summary is less than or equal to L words. In this work, we assume no summaries are available as training data. Denote a binary indicator vector y ? R N , where sentence i is included if and only if y i = 1 and 0 otherwise. Extractive summarization can be written as an optimization problem: max score(S) = score(D, y) with respect to S equivalently y subject to length(S) ? L with a scoring function score  (D, y) . A good scoring function should assign higher scores to better summaries. In the following, we describe two commonly used scoring functions and our proposed scoring function. 

 Maximal Marginal Relevance The Maximal Marginal Relevance (MMR) method  (Carbonell and Goldstein, 1998)  considers the following scoring function: score(D, y) = N i=1 y i Rel(s i ) ? N i,j=1 y i y j Sim(s i , s j ) where Rel(s i ) measures the relevancy of sentence i and Sim(s i , s j ) measures the (e.g., cosine) similarity between sentence i and sentence j. The intuition is to choose sentences that are highly relevant to the document(s) and avoid redundancy. The above maximization problem has been shown to be NP-hard, solvable exactly using ILP  (Mc-Donald, 2007) . A greedy algorithm that approximates the global solution by adding one sentence at a time to maximize the overall score  (Lin and Bilmes, 2010)  is often used in practice. 

 Coverage-Based Summarization Another popular scoring function aims to give higher scores for covering more diverse concepts in the summary.  Gillick et al. (2008)   b j z j and the two additional constraints are: ?j ? [B], ?i ? [N ] y i m i,j ? z j ?j ? [B] N i=1 y i m i,j ? z j where we use [B] as a shorthand for {1, 2, . . . , B}. The first constraint makes sure that selecting a sentence implies selecting all its bigrams, whereas the Consider the case when the maximum summary length is four sentences. Our scoring function is optimized by chooseing the four sentences in red as the summary, since they maximize the volume (area in two dimensions). second constraint makes sure that selecting a bigram implies selecting at least one of the sentences that contains it. In this formulation, there is no explicit penalty on redundancy. However, insofar as redundant sentences cover fewer bigrams, they are implicitly discouraged. Although the above scoring function also results in an NP-hard problem, an off-the-shelf ILP solver  (Gillick et al., 2008)  or a dual decomposition algorithm  (Almeida and Martins, 2013 ) can be used to solve it in practice. 

 Semantic Volume We introduce a new scoring function for summarization. The main idea is based on the notion of coverage, but in a distributed semantic space: a good summary should have broad semantic coverage with respect to document contents. For every sentence s i , i ? [N ], we denote its continuous semantic representation in a K-dimensional semantic space by ?(s i ) = u i ? R K , where ? is a function that takes a sentence and returns its semantic vector representation. We denote embeddings of all sentences in D with the function ? by ?(D). We will return to the choice of ? later. We propose to use a scoring function that maximizes the volume of selected sentences in this semantic space: score(D, y) = Volume(?(D), y) = Volume(?(S)) In the case when K = 2, this scoring function maximizes the area of a polytope, as illustrated in Figure  1 . In the example, there exists a maximum number of sentences that can be selected such that adding more sentences does not increase the score, i.e., the set of selected sentences forms a convex hull of the set of all sentences. The sentences forming a convex hull may together be longer than L words, so we seek to maximize the volume of the summary under this constraint. There are many choices of ? that we can use to produce sentence embeddings. As an exploratory study, we construct a vector of bigrams for each sentence, that is, s i ? R B , ?i ? [N ]. If bigram b is present in s i , we let s i,b be the number of documents in the corpus that contain bigram b, and zero otherwise. We stack these vectors in columns to produce a matrix S ? R N ?B , where N is the number of sentences in the corpus and B is the number of bigrams. We then perform singular value decomposition (SVD) on S = U?V . We use U K ? R N ?K as the sentence representations, where K is a parameter that specifies the number of latent dimensions. Instead of performing SVD, we can also take s i ? R B as our sentence representation, which makes our method resemble the bigram coverage-based summarization approach. However, this makes s i a very sparse vector. Projecting to a lower dimensional space makes sense to allow the representation to incorporate information from (bigram) cooccurrences and share information across bigrams. 

 Volume Maximization Given the semantic coverage scoring function in ?2.3, our optimization problem is: max score(S) = Volume(?(S)) with respect to S subject to length(S) ? L For computational considerations, we propose to use a greedy algorithm that approximates the solution by iteratively adding a sentence that maximizes the current semantic coverage, given that the length constraint is still satisfied. The main steps in our algorithm are as follows. We first find the sentence that is farthest from the cluster centroid and add it to S. Next, we find the sentence that is farthest from the first sentence and add it to S. Given a set of already selected sentences, we choose the next one by finding the sentence farthest from the subspace spanned by sentences already in the set. We repeat this process until we have gone through all sentences, breaking ties arbitrarily and checking whether adding a sentence to S will result in a violation of the length constraint. This method is summarized in Algorithm 1. We note that related variants of our method for maximizing volume have appeared in Algorithm 1 Greedy algorithm for approximately maximizing the semantic volume given a budget constraint. Input: Budget constraint L, sentence representa- tions R = {u 1 , u 2 , . . . , u N } S = {}, B = {} Compute the cluster centroid c: 1 N N i=1 u i . p ? index of sentence that is farthest from c. S = S ? {s p }. add first sentence q ? index of sentence that is farthest from s p . S = S ? {s q }. add second sentence b 0 = uq uq , B = B ? {u 0 } total length = length(s p ) + length(s q ) for i = 1, . . . , N ? 2 do r ? index of sentence that is farthest from the subspace of Span(B). see text if total length + length(s r ) ? L then S = S ? {s r }. b r = ur ur , B = B ? {b r }. total length = total length + length(s r ) end if end for other applications, such as remote sensing  (Nascimento and Dias, 2005; Gomez et al., 2007)  and topic modeling  (Arora et al., 2012; Arora et al., 2013) . Computing Distance to a Subspace Our algorithm involves finding a point farthest from a subspace (except for the first and second sentences, which can be selected by computing pointwise distances). In order for this algorithm to be efficient, we need this operation to be fast, since it is executed frequently. There are several established methods to compute the distance between a point to a subspace spanned by sentences in S. For completeness, we describe one method based on the Gram-Schmidt process  (Laplace, 1812)  here. We maintain a set of basis vectors, denoted by B. Our first basis vector consists of one element: b 0 = uq uq , where q is the second sentence chosen above. Next, we project each candidate sentence i to this basis vector: Proj b 0 (u i ) = (u i b 0 )b 0 , and find the distance by computing Distance(u i , B) = u i ? Proj b 0 (u i ) . Once we find the farthest sentence r, we add a new basis vector B = B ? {b r }, where b r = ur ur and repeat this process. When there are more than one basis vectors, we find the distance by computing: Distance(u i , B) = u i ? b j ?B Proj b j (u i ) . 

 Experiments 

 Setup We evaluate our proposed method on the nonupdate portion of  TAC-2008 and TAC-2009 . The datasets contain 48 and 44 multi-document summarization problems, respectively. Each problem has 10 news articles as input; each is to be summarized in a maximum of L = 100 words. There are 4 human reference summaries for each problem, against which an automatically generated summary is compared. We compare our method with two baselines: Maximal Marginal Relevance (MMR, ?2.1) and the coverage-based summarization method (CBS, ?2.2). ROUGE  (Lin, 2004 ) is used to evaluate the summarization results. For preprocessing, we tokenize, stem with the Porter (1980) stemmer, and split documents into sentences. We remove bigrams consisting of only stopwords and bigrams which appear in less than 3 sentences. As a result, we have 2,746 and 3,273 bigrams for the TAC-2008 and TAC-2009 datasets respectively. Unlabeled data can help generate better sentence representations. For each summarization problem in each dataset, we use other problems in the same dataset as unlabeled data. We concatenate every problem in each dataset and perform SVD on this matrix ( ?2.3). Note that this also means we only need to do one SVD for each dataset. 

 Results Table  1  shows results on the TAC-2008 and TAC-2009 datasets. We report results for our method with K = 500 (Volume 500), and K = 600 (Volume 600). We also include results for an oracle model that has access to the human reference summaries and extracts sentences that maximize bigram recall as an upper bound. Similar to previous findings, CBS is generally better than MMR. Our method outperforms other competing methods, although the optimal value of K is different in each dataset. The improvements with our proposed approach are small in terms of R-2. This is likely because the R-2 score computes bigram overlaps, and the CBS method that directly maximizes bigram coverage is already a resonable approach to optimizing this metric (although still worse than the best of our methods).   Methods TAC-2008 TAC-2009 R-1 R-2 R-1 R- 

 Discussion Runtime comparisons In terms of inference running time, all methods perform reasonably fast. MMR is the slowest, on average it takes 0.38 seconds per problem, followed by our method at 0.17 seconds per problem, and CBS at 0.15 seconds per problem. However, our implementations of MMR and Algorithm 1 are in Python, whereas we use an optimzed solver from Gurobi for our CBS baseline. For preprocessing, our method is the slowest, since we need to compute sentence embeddings using SVD. There are about 10,000 sentences and 3,000 bigrams for each dataset. SVD takes approximately 2.5 minutes (150 seconds) using Matlab on our 12-core machine with 24GB RAM. Our method introduces another hyperparameter, the number of latent dimensions K for sentence embeddings. We observe that the optimal value depends on the dataset, although a value in the range of 400 to 800 seems best. Figure  2  shows R-SU4 scores on the TAC-2008 dataset as we vary K. Other sentence projection methods We use SVD in this study for computing sentence embeddings. As mentioned previously, our summariza-tion approach can benefit from advances in neuralnetwork-based sentence representations  (Jenatton et al., 2011; Le and Mikolov, 2014; Kalchbrenner et al., 2014) . These models can also produce vector representations of sentences, so Algorithm 1 can be readily applied to the learned representations. Our work opens up a possibility to make summarization a future benchmark task for evaluating the quality of sentence representations. Our method is related to determinantal point processes (DPPs;  Gillenwater et al., 2012;  in that they both seek to maximize the volume spanned by sentence vectors to produce a summary. In DPP-based approaches, quality and selectional diversity correspond to vector magnitude and angle respectively. In this work, the length of a sentence vector is not tailored to encode quality in terms of representativeness directly. In contrast, we rely on sentence embedding methods to produce a semantic space and assume that a good summary should have a large volume in the semantic space. We show that a simple singular value decomposition embedding of sentences-one that is not especially tuned for this task-produces reasonably good results. We leave exploration of other sentence embedding methods to future work. Future work Our method could be extended for compressive summarization, by simply including compressed sentences in the embedded space and running Algorithm 1 without any change. This resembles the summarization methods that jointly extracts and compresses  (Berg-Kirkpatrick et al., 2011; Woodsend and Lapata, 2012; Almeida and Martins, 2013) . Another alternative is a pipeline approach, where extractive summarization is followed or preceded by a sentence compression module, which can be built and tuned independent of our proposed extractive method  (Knight and Marcu, 2000; Lin, 2003; Zajic et al., 2007; Wang et al., 2013; Li et al., 2013) . We are also interested in exploring volume as a relevance function within MMR. MMR avoids redundancy by penalizing redundant sentences, whereas in our method semantic redundancy is inherently discouraged since the method chooses sentences to maximize volume. Depending on the method used to embed sentences, this might not translate directly into avoiding n-gram redundancy. Plugging our scoring function to an MMR objective is a simple way to enforce diversity. Finally, an interesting future direction is finding an exact tractable solution to the volume maximization problem (or demonstrating that one does not exist). 

 Conclusion We introduced a summarization approach based on maximizing volume in a semantic vector space. We showed an algorithm to efficiently perform volume maximization in this semantic space. We demonstrated that our method outperforms existing state-of-the-art extractive methods on benchmark summarization datasets. Figure 1 : 1 Figure1: A toy example of seven sentences projected into a two-dimensional semantic space. Consider the case when the maximum summary length is four sentences. Our scoring function is optimized by chooseing the four sentences in red as the summary, since they maximize the volume (area in two dimensions). 
