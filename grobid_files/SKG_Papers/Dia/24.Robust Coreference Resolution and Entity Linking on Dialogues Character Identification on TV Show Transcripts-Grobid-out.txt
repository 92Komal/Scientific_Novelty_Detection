title
Robust Coreference Resolution and Entity Linking on Dialogues: Character Identification on TV Show Transcripts

abstract
This paper presents a novel approach to character identification, that is an entity linking task that maps mentions to characters in dialogues from TV show transcripts. We first augment and correct several cases of annotation errors in an existing corpus so the corpus is clearer and cleaner for statistical learning. We also introduce the agglomerative convolutional neural network that takes groups of features and learns mention and mention-pair embeddings for coreference resolution. We then propose another neural model that employs the embeddings learned and creates cluster embeddings for entity linking. Our coreference resolution model shows comparable results to other state-of-the-art systems. Our entity linking model significantly outperforms the previous work, showing the F1 score of 86.76% and the accuracy of 95.30% for character identification.

Introduction Character identification  (Chen and Choi, 2016 ) is a task that identifies each mention as a character in a multiparty dialogue. 1 Let a mention be a nominal referring to a human (e.g., she, mom, Judy), and an entity be a character in the dialogue. The objective is to assign each mention to an entity, who may or may not appear as a speaker in the dialogue. For the example in Table  1 , the mention comedian is not one of the speakers in the dialogue; nonetheless, it clearly refers to a real person that may appear in some other dialogues. Identifying such mentions as actual characters requires cross-document entity resolution, which makes this task challenging.  1  The dialogues are extracted from TV show transcripts by the previous work  (Chen and Choi, 2016) . Character identification can be viewed as a task of entity linking. Most of the previous work on entity linking focuses on Wikification  (Mihalcea and Csomai, 2007a; Ratinov et al., 2011a; Guo et al., 2013) . Unlike Wikification, entities in this task have no precompiled information from a knowledge base, which is another challenging aspect. This task is similar to coreference resolution in the sense that it groups mentions into entities, but distinct because it requires the identification of mention groups as real entities. Furthermore, even if it can be tackled as a coreference resolution task, only a few coreference resolution systems are designed to handle dialogues well  (Rocha, 1999; Niraula et al., 2014)  although several state-of-the-art systems have been proposed for the general domain  (Peng et al., 2015; Clark and Manning, 2016; Wiseman et al., 2016) . Due to the nature of multiparty dialogues where speakers take turns to complete a context, character identification becomes a critical step to adapt higher-level NLP tasks (e.g., question answering, summarization) to this domain. This task can also bring another level of sophistication to intelligent personal assistants and intelligent tutoring systems. Perhaps the most challenging aspect comes from colloquial writing that consists of ironies, metaphors, or rhetorical questions. Despite all the challenges, we believe that the output of this task will enhance inference on dialogue contexts by providing finer-grained information about individuals. In this paper, we augment and correct the existing corpus for character identification, and propose an end-to-end deep-learning system that combines neural models for coreference resolution and entity linking to tackle the task of character identification. The updated corpus and the source code of our models are published and publicly available. 2 This combined system utilizes the strengths from both models. We introduce a novel approach, agglomerative convolution neural network, for coreference resolution to learn mention, mention-pair, and cluster embeddings, and the results are taken as input to our entity linking model that assigns mentions to their real entities. Entities, including main characters and recurring support characters, are selected from a TV show to mimic a realistic scenario. To the best of our knowledge, this is the first end-toend model that performs character identification on multiparty dialogues. 

 Related Work The latest coreference systems employ advanced context features in tandem with deep networks to achieve state-of-the-art performance  (Clark and Manning, 2016; Wiseman et al., 2015) . Since our task is similar to coreference resolution, we take a similar approach to feature engineering by building mention and cluster embeddings with word embeddings  (Clark and Manning, 2016)  and include additional mention features described by  Wiseman et al. (2015) . We are motivated to use convolutional networks through the work of  Wu and Ma (2017) , but we distinguish our approach by using deep convolution to build embeddings for character identification. Entity linking has traditionally relied heavily on knowledge databases, most notably, Wikipedia, for entities  (Mihalcea and Csomai, 2007b; Ratinov et al., 2011b; Gattani et al., 2013; Francis-Landau et al., 2016) .  3  Although we do not make use of knowledge bases, our task is closely aligned to entity linking. Recent advances in entity linking are also applicable to our task since we see  Francis-Landau et al. (2016)  use convolutional nets to capture semantic similarity between a mention and an entity by comparing context of the mention with the description of the entity. This work validates our usage of deep learning for character identification. Dialogue tracking has been an expanding task as shown by the Dialogue State Tracking Challenges hosted by Microsoft  (Kim et al., 2015) . That an ongoing conversation can be dynamically tracked  (Henderson et al., 2013)  is exciting and applicable to our task because the state of a conversation may yield significant hints for entity linking and coreference resolution. Speaker identification, a task similar to character identification, has already shown some success with partial dialogue tracking by dynamically identifying speakers at each turn in a dialogue using conditional random field models. 

 Corpus The character identification corpus created by  Chen and Choi (2016)  includes entity annotation of personal mentions specific to the domain of multiparty dialogues. While the corpus covers a large amount of entities that appear in the first two seasons of the TV show, Friends, some of its annotation remains ambiguous, particularly around the label Unknown. An example of Unknown mentions in a snippet of a conversation is provided in Table  1 . Mentions comedian 4,8 and dude 6 are originally labeled Unknown, but they are two different entities such that their labels should be distinguished. Even though their entities are not immediately identifiable, the Unknown label provides no clarity; thus, mentions under this label needs to be subcategorized. We propose to disambiguate these Unknown mentions (Section 3.2), comprising 10% of the annotation. Such disambiguation allows finer-grained categories of entity annotations of mentions. We believe the resultant annotations are more realistic and can be used to train more robust model on character identification. 

 Corpus Correction Before disambiguating the corpus, we find some recurring data malformations and errors in mention detection within the corpus. For example: Rachel: (To guy with a phone) Hello, excuse me. The underlined action note is accidentally included in the utterance as a part of the dialogue due to a missing parentheses, and the mention guy is consequently incorporated into the corpus. These malformations are fixed, and mentions included are removed from the corpus manually before disambiguation. The correction is necessary since the inclusion of action notes is inconsistent throughout the corpus, and they are removed to avoid confusion for our models. 

 Corpus Disambiguation Three labels are introduced to disambiguate Unknown mentions: General, Generic, and Other. Generic provides abstract groupings for unidentifiable entities, and each group is assigned a unique number for differentiation: ? General: Mention used in reference to a general case (e.g., you 2,5 in Table  1 ). ? Generic: Mention referring to a unidentifiable entity (e.g., comedian 4,8 in Table  1 ). ? Other: Mention referred to insignificant singleton entity (e.g., dude 6 in Table  1 ). We perform this disambiguation manually with two main guidelines: only mentions originally labeled Unknown are included, and the labels introduced above are provided to annotators in addition to the known entities. We limit the Generic mention groups to 5 per iteration of disambiguation for simplicity, and the scenes that requires more than 5 groups are recursively annotated until all unknowns are disambiguated. Unlike the previous work, our annotators are familiar with the TV show, and the task takes about 3 weeks to complete.   P S C G N O ? F1 5, 

 Coreference Resolution The task of character identification needs rich features extracted from mention clusters generated by a coreference resolution system. Thus, the end result of this task largely depends on the quality of the coreference resolution model. Several coreference resolution systems have been proposed and shown state-of-the-art performance  (Pradhan et al., 2012) ; however, they are not necessarily designed for the genre of multiparty dialogue, where each document comprises utterances from multiple speakers. This section describes a novel approach to coreference resolution using Convolutional Neural Networks (CNN). Our model takes groups of features incorporating several dialogue aspects, feeds them into deep convolution layers, and dynamically generates mention embeddings and mention-pair embeddings, which are used to create the cluster embeddings that significantly improve the performance of our entity linking model (Section 5). 

 Agglomerative CNN Our coreference resolution model, Agglomerative Convolutional Neural Network (ACNN), takes advantage of deep layers in CNN. The model is called agglomerative since it aggregates multiple feature groups into several convolution layers for the generation of mention and mention-pair embeddings. Each layer aims to consolidate and learn different combinations of the input features, and additional features are included at each layer. The unique nature of our model allows incremental feature aggregations to create more robust embeddings. Figure  1  illustrates the complete architecture of ACNN. The first part of the network learns the mention embedding for each of two mentions compared for a coreferent relation. Given two feature maps ? k e (m) and ? d (m) where m is a mention, ? k e (m) extracts the embedding features based on word embeddings, and ? d (m) extracts the discrete features (Table  3 ). The first convolution layer CONV k 1 with n-gram filters of size d is applied to each embedding group k, and the result from each filter is maxpooled to generate a feature vector ? R 1?d . The second convolution layer CONV 2 is then applied to the 3D feature matrix ? R n?d?k from the previous convolution layer on all embedding groups. The result of CONV 2 is max-pooled and concatenated with discrete features extracted by ? d (m) to form the mention embedding r s (m), defined as follows: The second part of the network utilizes the learned mention embedding r s (m) to create the mentionpair embedding. Another feature map ? p (m i , m j ) is defined to extract pairwise features between mentions m i and m j (Table  3 ). The third convolution layer CONV 3 is applied to the stacked mention embeddings, r s (m i ) and r s (m j ). The result is maxpooled and concatenated with the pairwise features extracted by ? p (m i , m j ) to form the mention-pair embedding r p (m i , m j ), defined as follows: r s (m) = CONV 2 ( ? ? ? CONV 1 1 (? 1 e (m)) . . . CONV k 1 (? k e (m)) ? ? ?) ? d (m) r p (m i , m j ) = CONV 3 ( r s (m i ) r s (m j ) ) ? p (m i , m j ) The learned mention-pair embedding is put through the hidden layer with the linear rectifier activation function (ReLu) before applying the sigmoid function ?(m i , m j ) to determine the coreferent relation between mentions m i and m j , defined as follows: h(x) = ReLU(w h ? x + b h ) ?(m i , m j ) = sigmoid(w s ? h(r p (m i , m j )) + b s ) The purpose of the sigmoid function ?(m i , m j ) is twofold. For each mention m i , it performs binary classifications between m i and m j where j ? [1, i). If max(?(m i , m j )) < 0.5, the model considers no coreferent relation between m i and any mention prior to it, and create a new cluster containing only m i s.t. m i becomes a singleton for the moment. If max(?(m i , m j )) ? 0.5, m i is put to the existing cluster C m k that m k belongs to, where m k is arg j max(?(m i , m j )). This formalism of mention clustering is defined as follows: ? If ? 1?j<i . max(?(m i , m j )) < 0.5, then create a new cluster C m i . ? If ? 1?j<i . max(?(m i , m j )) ? 0.5, then C m k ? C m k ? {m i }, where m k = arg j max(?(m i , m j )). Table  3  shows feature templates used for our ACNN model. Sentence and utterance embeddings are the average vectors of all word embeddings in the sentence and utterance, respectively. Speaker embeddings are randomly generated using the Gaussian distribution. Gender and plurality information are from  Bergsma and Lin (2006) , and word animacy is from  Durrett and Klein (2013) .  

 Map 

 Configuration For our experiments, word embeddings of dimension 50 are trained with FastText  (Bojanowski et al., 2016)  on the aggregation of New York Times, 4 Wikipedia, 5 and Amazon reviews.  6  The tanh activation function and a filter size of 280 is used for all convolution layers. A dropout rate of 0.8 is applied to all max-pooled convoluted results, and 2 regularization is applied to the sigmoid function. The hidden layer has the same dimension as the filter size. Binary labels of 0 and 1 are assigned to each mention-to-mention pair based on the gold cluster information. The model is trained on a mean squared error loss function with the RMSprop optimizer. 

 Entity Linking Coreference resolution groups mentions into clusters; however, it does not assign character labels to the clusters, which is required for character identification. This section describes our entity linking model that takes the mention embeddings and the mention-pair embeddings generated ACNN and classifies each mention to one of the character labels (Figure  3 ). These embeddings are used to create cluster and cluster-mention embeddings through pooling, which give a significant improvement to character identification when included as features in our linker (Section 6). 4 catalog.ldc.upenn.edu/ldc2008t19 5 dumps.wikimedia.org/enwiki/ 6 snap.stanford.edu/data/web-Amazon.html Figure  2  illustrates our entity linking model based on a feed-forward neural network with two hidden layers. For each mention m, the model takes the mention embedding r s (m) and two cluster embeddings derived from mention embeddings and mention-pair embeddings within the cluster C(m) (Section 5.2) and classifies m into one of the entity labels using the Softmax regression. 

 Cluster Embedding Two types of cluster embeddings are derived to capture cluster information. Given a mention m and its cluster C m , cluster embedding R s (C m ) represents the collective mention embedding of all mentions within C m , and mention-cluster embedding R p (C m , m) represents the collective mention-pair embedding between m and all the other mentions in C m that are compared to m during coreference resolution (? i . m i ? C m ): R s (C m ) = [r s (m 1 ), r s (m 2 ), ..., r s (m |Cm| )] R p (C m , m) = [r p (m i , m) | m i = m] CONV s and CONV p are two separate convolution layers with unigram filters using the tanh activation. The results from these layers are max-pooled. The cluster embedding r s (C m ) and the mentioncluster embedding r p (C m , m) are defined as follows: r s (C m ) = CONV s ( avg pool(R s (C m )) max pool(R s (C m )) ) r p (C m , m) = CONV p ( avg pool(R p (C m , m)) max pool(R p (C m , m) ) ) The mention embedding, the cluster embedding, and the mention-cluster embedding are concatenated and fed into the network as input, and the scores of all character labels are activated as output. 

 Configuration A dropout layer of rate 0.8 is applied to all inputs. The model is trained as a multi-class classifier with the categorical cross-entropy loss function and the RMSprop optimizer. All hidden layers use the ReLU activation function and have the same number of hidden units as the dimension of the mention embeddings. The convolution layers use the same filter sizes as the dimensions of input embeddings. 

 Experiments Following  Chen and Choi (2016) , experiments are conducted on two tasks, coreference resolution and entity linking. Our coreference resolution model shows robust performance compared to other stateof-the-art systems (Section 6.2). Our entity linking model significantly outperforms the heuristic-based approach from the previous work (Section 6.3). All models are evaluated on the gold mentions to focus purely on the analysis of these two tasks. 

 Data Split The corpus is split into the training, development, and evaluation sets (Table  5 ). For the episode-level, all mentions referring to the same character in each episode are grouped into one cluster (C Epi ). For the scene-level, this grouping is done by each scene such that there can be multiple mention clusters that refer to the same character within an episode (C Sce ). Ambiguous mention types such as collective, general, and other are excluded from our experiments (Section 3); including those mentions requires developing different resolution models that we shall explore in the future.  For entity linking, entity labels are predetermined by collecting characters that appear in all three sets; characters that do not appear in any of the three sets are put together and labeled as Unknown. This is reasonable because it is not possible for a statistical model to learn about characters that do not appear in the training set. Likewise, characters that appear in the training set but not in the other sets cannot be developed or evaluated. A total of ten labels are used for entity linking that consist of the top-9 most frequently appeared characters across all sets and unknown (Figure  3 ). 

 Coreference Resolution To benchmark the robustness of our ACNN model (Section 4), two state-of-the-art coreference resolution systems are also experimented. Episode and scene-level models are developed separately for all three systems using the same dataset in Table  5 . All system outputs are evaluated with the MUC  (Vilain et al., 1995) , B 3  (Bagga and Baldwin, 1998) , and CEAF e  (Luo, 2005)  metrics suggested by the CoNLL'12 shared task  (Pradhan et al., 2012) . The average score of five trials is reported for each metric to minimize variance because these systems use neural network approaches with random initialization to produce varying results per trial (Table  4 ).  

 1% Figure  3 : Character labels used for entity linking. 

 Comparison between the State-of-the-Art When trained and evaluated on our dataset, both the Stanford  (Clark and Manning, 2016)  and the Harvard  (Wiseman et al., 2016)  systems give comparable results to their performance on the CoNLL'12 dataset. 7 The Stanford system using its pre-trained model gives the ? scores of 47.67% and 64.14% for the episode and scene-level respectively, which signifies the importance of the in-domain training data. Acc: (the number of correctly labeled mentions) / (the total number of mentions). All systems show higher scores for the scene-level than the episode-level consistently, which confirms the difficulty of this task on larger documents. Although both systems take advantage of global cluster features, they reveal different strengths on resolving mentions with respect to the cluster size. The Stanford system excels for the episode-level, which is primarily attributed to the cluster-based nature of this system; it is able to find more accurate coreferent chains when the clusters are larger. The Harvard system performs best for the scene-level, indicating that its neural architecture with Long Short-Term Memory cells captures more meaningful cluster features when the clusters are smaller. 

 Comparison to Agglomerative CNN In comparison to the other state-of-the-art systems, our ACNN model shows competitive performance; it gives the highest B 3 and comparable ? scores for both episode and scene levels. We measure the average cluster size produced by each system for further analysis (|C| in Table  4 ). The Harvard system produces smaller clusters than the other two systems. Such a tendency gives more pure clusters, favored by the CEAF e metric for the scenelevel. However, it is prone to breaking up too many links, which leads to poor performance in the B 3 evaluation on the episode-level. The performance of our model is encouraging although coreference resolution is not the end goal. We design this model to automatically generate mention embeddings and mention-pair embeddings that are used to construct cluster features for entity linking. However, even though this model's success in coreference resolution is not our final objective, its success directly correlates to the success of entity linking because of the similarity between these two tasks. Due to the similar nature of these two tasks, the success of coreference resolution directly correlates to that of entity linking. These embed-dings are the essence of our entity linking model, leading to a huge improvement. 

 Entity Linking The heuristic-based approach proposed by Chen and Choi (  2016 ) is adapted to establish the baseline. Two statistical models are experimented for both the episode and scene levels, one using only mention embeddings and the other using both mention embeddings and cluster embeddings (Section 5). All models are evaluated with the F1 scores of character labels, the macro-average F1 scores between all labels, and the label accuracies. The average scores of five trials are reported in Table  6 . 

 B: Baseline Model The heuristic-based approach is applied to the mention clusters found by our coreference resolution model. Two rules, 1) proper noun and 2) first-person pronoun matches, are used to assign character labels to all mentions. The label of each cluster is then determined by the majority vote between the mention labels within the cluster. Finally, the cluster label is assigned to all mentions in that cluster. This model performs better when it is applied to the episode-level clusters because larger clusters provide more mention labels, which makes the majority vote more reliable. 

 ME: Mention Embedding Model This model takes advantage of the mention embeddings generated by our ACNN model. Compared to the baseline, it gives over a 21% higher average F1 score, and over a 15% higher label accuracy for the episode and the scene levels, respectively. Interestingly, this model shows higher performance for the scene-level, which is not the case for the other two models. This implies that the mention embeddings learned from scene-level documents are more informative than those learned from episode-level ones.  The confusion matrix between gold and system annotation for all character labels (in #). This case is also reflected on its coreference resolution performance where the scene-level scores are higher than the episode-level scores (Table  4 ). 

 CE: Cluster Embedding Model While the mention embeddings give a significant improvement over the baseline, further improvement is made when they are coupled with the cluster and mention-cluster embeddings. The episodelevel cluster embedding model shows an average F1 score of 86.76% and a label accuracy of 95.30%, which is another 15% improvement, suggesting a practical use of this model in real applications. A couple of important observations are made: ? Cluster and mention-cluster embeddings, although learned during coreference resolution, are crucial for entity linking such that a coreference resolution model specifically designed for multiparty dialogues is necessary to build the state-of-the-art entity linking model for this genre. ? Clusters generated from the episode-level documents provide more information than those from the scene-level do, which aligns with the conclusion made by  Chen and Choi (2016) . 

 Error Analysis An error analysis is performed on the episode-level cluster embedding model. From the confusion matrix in Table  7 , two common system errors are detected. First, most of the mispredictions identify Unknown as specific characters. Second, the performance on the secondary characters, Carol, Mindy, and Barry, is subpar with respect to other entities. This subpar performance likely stems from a paucity of appearances by these secondary characters. For example, Mindy constitutes 1% of the dataset (Figure  3 ) and has only nine occurrences in the evaluation set. Our best model is robust in identifying the primary characters, showing an average F1 score of 96.38% and an accuracy of 98.42% on the evaluation set. 

 Conclusion In this paper, we explore a relatively new task, character identification on multiparty dialogues, and introduce a novel perspective on approaching the task with coreference resolution and entity linking. We improve and augment finer-grained annotation over the existing corpus that simulates real conversations. We propose a deep convolutional neural network to agglomerate groups of features into mention, mention-pair, cluster, and mention-cluster embeddings that are optimized for entity prediction. Our coreference resolution result shows an improvement on the updated version of the corpus. Our entity linking result reaches to the accuracy that is sufficient for real-world applications. To the best of our knowledge, our work is the first time that such deep convolution layers have been used for training mention and cluster embeddings. Our results show that the generation of these embeddings is crucial for the success of entity linking on multiparty dialogues. For future work, we will continue to increase the size of the corpus with high-quality and disambiguated annotation. We also wish to improve the embeddings to represent plural and collective mentions, thus we can build upon our entity linking model incorporating manyto-many linkings between entities and mentions. Figure 1 : 1 Figure 1: The overview of our agglomerative convolutional neural network. 
