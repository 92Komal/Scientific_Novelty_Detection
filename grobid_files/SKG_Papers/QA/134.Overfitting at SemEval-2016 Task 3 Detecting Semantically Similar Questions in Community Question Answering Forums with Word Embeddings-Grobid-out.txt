title
Overfitting at SemEval-2016 Task 3: Detecting Semantically Similar Questions in Community Question Answering Forums with Word Embeddings

abstract
This paper presents an approach for estimating the question-question similarity of an English dataset specified in Shared Task 3, subtask B of SemEval-2016. Given a new question and a set of the first 10 related questions retrieved by a search engine, participants are asked to produce a binary relevant/irrelevant judgement and rerank the related questions according to their similarity with respect to the original question. Our submitted system uses a 2-layer feed-forward neural network with the averages of word embedding vectors to predict the semantic similarity score of two questions. We also evaluate the results of Random Forests and Support Vector Machine in comparison to the Neural Network. Results on the test dataset show that the model achieves a Mean Average Precision 69.681.

Introduction Finding semantically related questions is a difficult task due to two main factors: (1) paraphrasing, which can appear at different levels, e.g., lexical, phrasal, sentential  (Madnani and Dorr, 2010) ; and (2) two questions could be asking different things but look for the same solution. Thus, traditional surface similarity measures such as Edit Distance, Jaccard, Dice and Overlap coefficient and their variations are not able to capture many cases of semantic relatedness. To preserve the semantic meaning of a question, we use weighted average word embedding vectors to model questions. We evaluate several algorithms that take the weighted average word embedding vectors of two questions as inputs and predict whether two questions are related or not. To provide a benchmark so as to compare and develop question-question similarity measuring models in Community Question Answering forums, the Question-Question Similarity task in  SemEval-2016 Task 3, Subtask B (Nakov et al., 2016  requires the participants to determine whether two questions are sementically related and given a new question, rerank all similar questions retrieved by a search engine. Table  1  presents an example of a pair of semantically related questions. We perform an extensive number of experiments using data from Shared Task 3 and compare three types of classifiers: Neural Network (NN), Support Vector Machine (SVM) and Random Forests (RF), as well as the impact of different weighting schemes for averaging word embedding vectors and different word embedding dimensions. The results show that 2-layer Feedforward Neural Network with Idf weighting scheme and in-domain word embeddings outperforms the rest of models. 

 Title: Best Bank Body: Which is a good bank as per your experience in Doha Title: Good Bank Body: Hi Guys; I need to open a new bank accoount. Which is the best bank in Qatar ? I assume all of them will roughly be the same; but stll which has a slight edge (Money transfer; benifits etc) Thanks !!! Recently  (Mikolov et al., 2013)  introduced word2vec, a novel word-embedding procedure. Their model is able to learn continuous vector representations of words from a very large dataset by using a feedforward Neural Net Language Model (NNLM). Specifically, The CBOW architecture predicts the current word based on the context, and the Skip-gram architecture predicts surrounding words given the current word. Learning the word embedding is entirely unsupervised and it can be computed on the text corpus of interest. Each word is encoded by a column vector in an embedding matrix W e ? R d?|V | learnt by using word2vec, where V is a fixed-sized vocabulary. Each column of the matrix represents the word embedding of the i-th word in V. Each word w is transformed into its vector representations v w by using a matrix-vector product: v w = W e b w (1) where b w is a one-hot encoding vector of size |V | which has value 1 at the index of the word w and zero in all other positions. Let X t and X b be the set of word tokens of a question's title and body, then the vector representations of the question's title and body are the weighted vector average of the word embeddings associated with tokens in X t and X b : Q t = 1 |X t | w?Xt v w c w (2) Q b = 1 |X b | w?X b v w c w (3) where c w denotes the weight of the word w. We also investigate the impact of different weighting schemes: 1. c w = 1 2. c w = IDF (w) where IDF denotes inverse document frequency  (Sparck Jones, 1972) . Specifically, IDF (w) = log(1 + N n w + 1 ) (4) N is the total number of documents in the corpus and n w is the number of documents where the term w appears. In our case, we define each question's body in the training dataset as a document. Given a pair of questions (Q (1) , Q (2) ), we com- pute Q (1) t , Q (1) b , Q (2) t and Q (2) b by using the above transformations. Given vectors u and v, we denote the similarity features sim (u,v) as the concatenation of u ? v (component-wise product of u and v) and |u ? v|. These two features were also used by  (Tai et al., 2015) . The final vector representations or features for the input pair of questions (Q (1) , Q (2) ) is defined as the concatenation of sim (Q (1) t ,Q (2) t ) and sim (Q (1) b ,Q (2) b ) . Those features are then fed into a classifier to predict a binary True/False label. 

 Experiments and Results 

 Datasets In our experiments we use data from the communitycreated Qatar Living Forums 1 collected for SemEval-2016 task 3, subtask B. There are 317 original questions and 3,169 related questions. The dataset is pre-splitted into 264 original questions and 2669 related question for training, as well as 50 original questions and 500 related question for validation. Each data point is a pair of questions (an original question and a related question) and a similarity label, which is either "PerfectMatch", "Relevant" or "Irrelevant". According to the task description, we need to predict a binary label where "True" covers "PerfectMatch" and "Relevant", and "False" covers "Irrelevant", and rerank a set of related questions according to their similarity with respect to the original question. 

 Preprocessing Several text preprocessing operations are performed before we extract features. We first transform all words into lowercase, filter out stop words, remove all punctuations and replace numbers with the token "NUMBER". Then the Phrase Detection Toolkit implemented in Gensim is used to group tokens together if they form a phrase. After that, all unique words and phrases are selected from the training set as our vocabulary which has a size of 11990. We deal with unseen words in the test set by marking them as "UNK".  

 Model 

 Word Embedding Features We perform pre-training using the skip-gram NN architecture  (Mikolov et al., 2013)  available in the Gensim Word2vec tool 2 . We use in-domain word embeddings vectors trained on the Community Question Answering dataset provided by SemEval-2016 Task 3 with the following parameter settings: (1) 30, 80 and 100 dimensional embedding vectors; (2) the maximum distance between the current and predicted word within a sentence is set to 5; (3) ignoring all words with total frequency lower than 5; (4) for each positive sample, 5 negative samples are drawn for negative sampling; (5) the number of iterations is set to 30. 

 Models Several classification algorithms are explored on development dataset including Feedforward Neural Network (NN), Support Vector Machine (SVM) and Random Forests (RF). Due to the lack of the time, we only submitted the predictions from one of our NN classifiers. Configuration details of each model are presented in Table  2 . 

 Feedforward Neural Network We consider a two-layer Feedforward Neural Network with 64 sigmoid activation hidden units as our classifier. Weights are initialized with random orthogonal conditions  (Saxe et al., 2013) . We apply Dropout  (Srivastava et al., 2014)  with a fixed dropping probability of 0.9 for the input layer and 0.5 for the hidden layer. Our network is trained by minimizing the categorical cross entropy error over the training set using Adam  (Kingma and Ba, 2014) , a first-order gradient-based optimization method. We use the backpropagation algorithm  (Rumelhart et al., 1988)  to compute gradients of the network. In our experiments, we implement the NN and the backpropagation algorithm using Keras 3 . 

 Support Vector Machine We use the (Gaussian) radial basis function kernel K(x, x ) = exp(?|x ? x | 2 ) (5) with ? = 1 4d , where d is the dimension of word embedding vectors. We set the regularization parameter C of soft margin cost function to 1. 

 Random Forests We explored a large set of parameter values by doing randomized search and selecting only the best set of parameters for our RF models. Specifically, we use the following fine-tuned parameters: ? The number of trees: 382 ? Measurement of the quality of a split: entropy ? The maximum depth of the tree: 33 ? The minimum number of samples required to split an internal node: 5 ? The minimum number of samples in newly created leaves: 2 ? The number of features to consider when looking for the best split: 116 

 Results and Discussion Table  3  summarizes the performance of our systems, along with the baseline systems provided by the organizers and the top three systems (UH-PRHLT-primary, ConvKN-primary and Kelpprimary). The results show that models with Idf weighting scheme outperform models using naive word embedding averages. The performance differences between different models using the same weighting scheme and the same word embedding  dimension are not significant, which shows that the type of the classifier is not the bottleneck of overall performance. Also, we find that RF and NN perform slightly better than SVM. We also observe that using a large word embedding dimension (? 80) results in severe overfitting on the development dataset since we have a small dataset. Applying strong regularization such as Dropout with high dropping probability reduces overfitting and helps our NN models achieve high performance. Our best classifier (NN-Idf-100) achieves the highest Mean Average Precision among our classifiers. 

 Conclusion In this paper, we address the Question-Question Similarity task by building three types of supervised classifiers. The results show that classifiers without heavy feature engineering are able to outperform the random baseline by a large margin. It also demonstrates that using the proposed features based on word embeddings is effective and able to capture semantic meanings of a question. Table 1 : 1 An example of semantically related questions 2 Word Embedding Features 
