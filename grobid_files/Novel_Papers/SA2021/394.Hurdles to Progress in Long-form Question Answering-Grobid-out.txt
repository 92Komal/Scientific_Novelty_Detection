title
Hurdles to Progress in Long-form Question Answering

abstract
The task of long-form question answering (LFQA) involves retrieving documents relevant to a given question and using them to generate a paragraph-length answer. While many models have recently been proposed for LFQA, we show in this paper that the task formulation raises fundamental challenges regarding evaluation and dataset creation that currently preclude meaningful modeling progress. To demonstrate these challenges, we first design a new system that relies on sparse attention and contrastive retriever learning to achieve state-of-the-art performance on the ELI5 LFQA dataset. While our system tops the public leaderboard, a detailed analysis reveals several troubling trends: (1) our system's generated answers are not actually grounded in the documents that it retrieves; (2) ELI5 contains significant train / validation overlap, as at least 81% of ELI5 validation questions occur in paraphrased form in the training set; (3) ROUGE-L is not an informative metric of generated answer quality and can be easily gamed; and (4) human evaluations used for other text generation tasks are unreliable for LFQA. We offer suggestions to mitigate each of these issues, which we hope will lead to more rigorous LFQA research and meaningful progress in the future. 1 * Work done during an internship at Google Research. 1 Resources accompanying our paper can be found in https://github.com/martiansideofthemoon/ hurdles-longform-qa Val Q: Can you protect electronics from EMPs/solar flares? If so, how? Generation using random retrievals, 24.8 ROUGE-L Yes, you absolutely can, in fact you can build a Faraday cage around your electronics, and protect them from solar flares... This is what is done with the Faraday cage around your electronics, which is the problem. The reason it is expensive is because it requires a huge amount of power and is expensive to replace... designed to shield your electronics from solar flares, you will have to pay for the protection. This is because you have to buy a piece of equipment that is designed to shield your electronics from solar flares, and that is expensive. ... This is also expensive, but not as expensive as the protection you need to shield your electronics from solar flares... designed to be as cheap as possible... 
 Generation using predicted retrievals, 19.0 ROUGE-L Yes, you can shield them. But it's a slow process... Also, the equipment that's powered by them is a lot more expensive than you'd think, so it's hard to make sure that you're not just shielding them from your remote control. Train Q1: How does an EMP ruin electronics? What does it do? How would they be fixed? Can It be protected against? How? Train Q2: If Earth were hit with a massive EMP, would all of our currently technology be completely unusable permanently? Train Q3: Whenever a electromagnetic pulse (EMP) is released what does it do to electronics to disable them? Train Q4: If earth was hit with an EMP, could we ever restore electricity? If not, why? Train Q5: What are solar flares and why does it impact our electronics? Train Q6. When an EMP goes off, can the electronics affected be replaced? Gold Answer, 18.6 ROUGE-L I'll start with the grounding question, because that's the easiest to answer: Doesn't help a bit. All that matters is that the metal container is conductive and doesn't have gaps...completely seal your Faraday cage. Consider soldering the lid on to that paint can... look at little baggie it comes in. Sealed mylar. That protected that chip from air travel at 35,000 feet, land travel through rural, urban, and suburban areas, and all the electromagnetic radiation that the trip entails... No lead shielding. No safes.... Random Train Ans, 19.4 ROUGE-L The fast lane/slow lane is a bit of a misnomer. It gives the impression that new, faster lanes are being built. In reality, normal speed will be...

Introduction Long-form question answering (LFQA) integrates the retrieval component of open-domain QA, which involves searching a large external knowledge source for documents relevant to a given question, with a text generation component to produce paragraph-length answers. Significant progress has been made on open-domain QA datasets such as Natural Questions  (Kwiatkowski et al., 2019) , whose questions are answerable with short phrases and entities, by leveraging dense retrieval techniques like ORQA , REALM  (Guu et al., 2020) , and DPR  (Karpukhin et al., 2020; Lewis et al., 2020c; Izacard and Grave, 2020) . Methods inspired by these results have recently been combined with pretrained language models  (Lewis et al., 2020b; Petroni et al., 2020)  and applied to the Reddit-derived "Explain Like I'm Five" (ELI5) dataset , which is the only publicly-available large-scale LFQA dataset. The recently proposed KILT benchmark  (Petroni et al., 2020) , which compares retrieval-augmented models across a variety of knowledge-intensive tasks including ELI5, automatically evaluates LFQA models by the quality of both generated answers (ROUGE-L against reference answers) and retrieved documents (R-precision against humanannotated relevant documents). In this paper, we build a state-of-the-art system 2 for ELI5 by using a sparse Transformer variant  (Roy et al., 2020)  to condition over Wikipedia paragraphs returned by a REALM-style retriever  (Guu et al., 2020) . However, despite its success on the KILT leaderboard, our system does not actually use the documents that it retrieves! To measure the effect of retrieval on generation quality, we design a control experiment in which retrieved documents are replaced with randomly-sampled documents at inference time. Results from both human A/B tests and automatic metrics like ROUGE-L demonstrate that conditioning on random documents has almost no effect on generated answer quality (Figure  1c ). We recommend that future LFQA research report the results of such control experiments in addition to reporting generation and retrieval quality. How can a system using random retrieval per- form well on ELI5? Our analysis reveals that this result is partially due to significant train / validation overlap in the ELI5 dataset (Figure  1a ), which eliminates the need for external retrieval. A human study shows that at least 81% of validation questions have a paraphrase in the training set, and almost all validation questions are topically similar to a training set question. While  attempted to identify and remove question overlap using TF-IDF similarity, more complex semantic matching methods & human verification is needed to address this issue in future LFQA datasets. Digging deeper, we identify fundamental issues with using ROUGE-L to evaluate generated answer quality (Figure  1b ). Simple baselines such as just repeatedly copying the question, or choosing a random training set answer, can outperform LFQA systems such as RAG  (Lewis et al., 2020c)  in terms of ROUGE-L. On the other hand, our system achieves higher ROUGE-L than reference human-written answers, which is misleading since human A/B testers strongly prefer reference answers to our system's. We conclude that ROUGE-L is not a reliable metric to evaluate LFQA due to its large and relatively unconstrained output space (e.g., compared to translation or summarization), and we offer suggestions for better automatic & human evaluations to enable meaningful progress on this task. 

 A state-of-the-art LFQA system The ELI5 task  asks models to generate paragraph-length answers to open-ended questions in English that often rely on world knowledge (e.g., how do jellyfish function without brains or nervous systems?). LFQA systems thus benefit from conditioning answer generation on relevant documents from the web (such as the Wikipedia article about jellyfish). While large-scale pretrained language models store surprising amounts of world knowledge within their parameters  (Petroni et al., 2019; , external document retrieval not only augments this intrinsic knowledge but also grounds model outputs in a knowledge source, which provides interpretability. In this section, we describe our proposed LFQA system, which conditions answer generation on Wikipedia articles identified by a pretrained retriever. We use a dense retriever trained by scaling up a distantly supervised algorithm from Jernite (2020). Since retrieved articles can be quite long and often exceed the maximum sequence length of pretrained models like BERT , we use a sparse-attention variant of the Transformer to allow modeling over longer sequences. While our system sets a new state-of-the-art on ELI5, we question the significance of this result in Section 3. 

 Retriever We begin by specifying our dense retriever ("contrastive REALM" or C-REALM), which returns documents related to an input question. Consider a corpus of long-form questions and answers, represented by (q i , a i ) N i=1 . Our retriever uses q i as a query to retrieve K documents (r i,j ) K j=1 from a knowledge corpus (Wikipedia), which is enabled by an encoder network that projects both questions and candidate documents to a 128-d shared embedding space. Like REALM  (Guu et al., 2020) , our encoder is a BERT-base Transformer  with a final projection layer. Since the ELI5 dataset does not include gold retrievals, we train our retriever by scaling up a method recently introduced by Jernite (2020) that uses gold answers for distant supervision. The key idea is to push the encoded vector for a question close to a vector representation of its groundtruth answer(s), but away from all other answer vectors in the mini-batch (negative examples). Intuitively, this method works because both ELI5 answers and external documents are of paragraph length (documents are paragraph-length chunks from Wikipedia). Concretely, we optimize the loss, loss = ? (q i ,a i )?B log exp q i ? a i a j ?B exp q i ? a j where B is the mini-batch and q i , a i are the encoded vector representations for (q i , a i ). This objective is based on contrastive learning, a method that has been used effectively for semi-supervised learning  and dense retriever training  (Karpukhin et al., 2020) . Scaling up from  Jernite (2020) , who used a mini-batch size of 512 and initialized their retriever with BERT, we use much large mini-batches of size 12,288 (and hence, many more negative examples) and initialize our retriever with a strong pretrained retriever, the REALM model  (Guu et al., 2020)  trained on the Common Crawl News (CC-News) corpus. These design decisions greatly improve retriever quality, as we observe in an ablation study (see Appendix A.2). During inference, we perform a maximum inner-product search (MIPS) with the ScaNN library  (Guo et al., 2020)  to efficiently find the top K documents. In all our experiments we use K = 7, following the setup in  Guu et al. (2020) . 

 Generator We next describe our generator model, which conditions its generated answers on retrieved documents returned by C-REALM. We use the Routing Transformer (RT) from  Roy et al. (2020) , which is the current state-of-the-art in long-form language modeling. The RT is a sparse attention model that employs local attention as well as mini-batch k-means clustering to better model long-range dependencies in sequences (attention maps in Appendix A.1). Long-form language models such as RT are wellsuited to ELI5 as the task requires conditioning answer generation not only on a short question but also many lengthy retrieved documents. We pretrain our RT model on PG-19, a longform language modeling benchmark (Rae et al., 2020) created from approximately 28,000 Project Gutenberg books published before 1919. PG-19 has 1.9B tokens and an average context size of 69K words. While this data is out-of-domain for ELI5, we choose it to encourage long & coherent generation. Our RT is a 22-layer model with 1032 hidden units (486M parameters), maximum sequence length of 8192 tokens, and a vocabulary of 98K subwords.  3  We fine-tune our model in a decoderonly fashion  Wolf et al., 2018)  by concatenating the top K retrieved documents to the question [r i,K , r i,K?1 ... r i,1 , q i , a i ] and training the model to predict tokens of the answer a i . We do not backpropagate gradients through the retriever.  4  Retrievals slightly improve perplexity (18.1 vs 17.8) as seen in  Wang and McAllester (2020) , but do not improve generations ( ?3.1). 

 Main Experiments Dataset & Evaluation details: We evaluate our model on the KILT validation & test subsets of ELI5  (Petroni et al., 2020) , since the original ELI5 dataset does not have human annotations to measure retriever performance. We downloaded the ELI5 dataset     4  We tried training the retriever jointly with RT using the attention bias scheme proposed in MARGE  (Lewis et al., 2020a) . This improved perplexity only in autoencoding settings where the gold answer itself is used as a retrieval query (like the setup in  Lewis et al., 2020a)  Table  1 : Results on the KILT test set for ELI5 for (1) retrieval performance, using R-precision and Recall@5 (RPrec, R@5), and (2) generation quality, using ROUGE-L (R-L). These scores are combined to produce the final metric KILT R-L (KRL). We outperform prior work on both generation & combined scores. are hidden, and hosted on a public leaderboard in the EvalAI platform  (Yadav et al., 2019) . Answer quality is measured by the maximum overlap of generations with a set of gold answers in terms of unigram F1 score and ROUGE-L  (Lin, 2004) .  Petroni et al. (2020)  collected human annotations of Wikipedia articles which support ELI5 gold answers, which enables measuring retrieval quality by computing R-precision (if the top-1 retrieval matches the annotation) and Recall@5 using the top-5 retrievals. Finally, the KILT benchmark combines R-prec. and ROUGE-L to measure the overall performance of the system by "KILT ROUGE-L". This metric is similar to ROUGE-L, but assigns a score of 0 whenever the top-1 retrieval does not match the gold annotation. Baselines: We compare our model with the other entries on the ELI5 KILT leaderboard which are either generation-only, like T5-base  and BART  (Lewis et al., 2020b) , or variants of BART using retrieval such as RAG  (Lewis et al., 2020c)  and BART + DPR  (Petroni et al., 2020) . These systems are based on massive pretrained language models, with similar number of parameters as our model (details in Appendix A.3). Results: Table  1  contains our results on the test set of the ELI5 (also on the public KILT leaderboard). We present four variants of our system, using a different retriever during inference (REALM or C-REALM), and different nucleus sampling p values  (Holtzman et al., 2020) . All variants outper-Q: Why are almost all boats white? A: Boats are generally painted white for obvious reasons, as they are inexpensive and easy to clean. Ships are also often painted to provide a visible visual contrast to the sea. Boats also often have high visibility ports to allow for easy international trade. In addition, many boats have an airbreathing function that makes them easier to spot and stay afloat, which is a good thing if you're a pirate or trying to get into some country's waters. Lastly, many ships are built in the last few decades, so they are not as exotic looking as they were thirty years ago. And lastly, many ships are made out of materials that are easy to work with, and so many of them are painted white as a practical matter. There are many, many more reasons for why ships are white, but those are the ones I know of. I'm sure there are many other reasons, but those are the ones I know of. Edit: I forgot to mention that the other answers about visibility and easy to see ports are also true. Ships are painted to appear to be larger, and more expensive. That makes them appear more impressive, and so they are more likely to be bought by people who want to show off their wealth and status. form prior work in generation quality, with lowerentropy models (p = 0.6) performing best. 6 C-REALM performs competitively to RAG and DPR despite being only distantly supervised, and outperforms REALM. Our proposed RT+C-REALM system achieves a new state-of-the-art on combined performance (KILT R-L). Generations from our model are provided in Figure  2  and Appendix A.4. 

 Analysis In this section, we conduct a thorough analysis of our model's usage of retrievals (Section 3.1), the impact of overlap in ELI5's train / validation / test folds (Section 3.2), issues with ROUGE-L and performance bounds (Section 3.3), and the difficulty in human evaluation for this task (Section 3.4). At the end of each section, we provide short takeaways with suggestions for future work. 

 Are generations grounded in retrieval? While our retrieval-augmented system achieves state-of-the-art performance, we find little evidence that it is actually using the retrieved documents. To measure this, we run an ablation study where at inference time we replace retrieved paragraphs with For p = 0.9 pred. random 31% (  52 ) 37% (  63 ) 32% (54) pred. gold ans. 17% (49) 72% (203) 11% (  31 ) Table  3 : Human evaluation results with exact number of ratings shown in (?). Annotators are shown a question along with two answers (A, B) in random order and ask them to choose one (details in Appendix A.5). For both model variants (p = 0.6, 0.9), we see (1) little difference between generations conditioned on predicted (pred.) or random (rand.) retrievals; (2) strong preference for gold answers over generations. randomly sampled paragraphs from Wikipedia. We compare this Random baseline with our original system (Predicted) in terms of generation quality as well as the n-gram overlap between the generation and the retrieved paragraphs. Generations are similar irrespective of type of retrievals: We present our results in Table  2 . Despite not being conditioned on any meaningful retrievals, the Random retrieval model has similar ROUGE-L scores as our Predicted system. Moreover, generations from the Random and Predicted models have similar amounts of 1-gram and 2gram overlap with the paragraphs retrieved by C-REALM, despite the fact that the Random model does not actually see the retrieved paragraphs.  7  The n-gram overlaps are possibly overestimates due to stopwords (e.g., prepositions, punctuation) and entities which are copied from the question.  To tackle this issue, in Table  4  we measure the fractions of lemmatized nouns, proper nouns and numbers in the generated answer which are present in the predicted retrievals but not in the question. We notice similar trends as before, with only small differences between the two systems. Finally, there is almost no correlation (Spearman ? = 0.09) between the Predicted model's generation quality and the amount of unigram overlap between its outputs and the retrieved documents (scatter plots in Appendix A.7), strengthening our hypothesis that generations are not grounded in retrievals. 8 Human evaluation validates our findings: As ROUGE-L and n-gram overlap have major limitations for LFQA (Section 3.3), we perform additional human A/B testing on the output of Random and Predicted. Specifically, we ask human volunteers 9 to choose between answers generated by the two systems (presented in random order). As seen in Table  3 , humans struggle to choose which of the two answers is more relevant to the question. For both model variants (p = 0.6, 0.9), there is a less than 7% preference for a particular answer type, with humans preferring answers (by 6%) from the Random model for p = 0.9! Other systems also have this issue, possibly due to source-reference divergence and trainvalidation overlap: We note that this issue is not unique to our system -other systems on the KILT leaderboard like BART + DPR and RAG actually perform worse than their no-retrieval counterpart (BART) in generation quality, as 4945 shown in Table  1 . Qualitatively, we found no evidence of retrieval usage in a publicly hosted ELI5 model demo by Jernite (2020). 10 A possible explanation for this issue is high source-reference divergence, a common problem in table-to-text generation  (Wiseman et al., 2017; Tian et al., 2019) . In Table  2 and Table 4 , we measure the n-gram overlap of top-ranked gold validation answers (Gold Ans) with predicted retrievals. This overlap is low and similar to that of our generations, which we suspect encourages our model to ignore retrievals. A second explanation is the large amount of train-validation overlap (Section 3.2), which eliminates the need for retrieval.   2020 ) are significantly shorter (59 words avg.) than our generations (187 words avg.). 12 https://eval.ai/web/challenges/ challenge-page/689/leaderboard/1909 bined retrieval + generation performance via KILT RL, it does not check whether the generations actually used the retrievals. In other words, one can submit independent retrieval & generation systems, but still perform well on the combined score. This may not be an issue for short-form QA tasks like Natural Questions, since the gold answer is often exactly contained as a span in the gold retrieval. Also, as retrieval might be less important for large language models with parametric knowledge , the KILT-RL strategy of simply aggregating top-1 retrieval score with ROUGE-L unfairly penalizes systems not relying on retrieval. 13 

 Training / Validation Overlap Our experiments in Section 3.1 show that model performance is mostly unchanged by conditioning generation on randomly sampled retrievals instead of predictions from C-REALM. Despite not using retrievals, we observe qualitatively that our model displays a large amount of parametric knowledge ("Faraday Cage" in Figure  1c ), which is surprising since it was pretrained on novels from Project Gutenberg (not Wikipedia). In this section, we discover that a major reason for ignoring retrievals is the large amount of train / validation overlap in ELI5. While  attempted to fix this issue through TF-IDF overlap, this method is insufficient to identify all question paraphrases, as we find significant overlap between the training set and the KILT validation set of ELI5. 14 ELI5 is not the only dataset with substantial train / test overlap:  Lewis et al. (2020d)  identify similar issues with short-form QA datasets like Natural Questions. 

 Finding similar questions & measuring overlap: We use our retriever C-REALM to retrieve similar questions from the training set, since it has learned to map questions to a feature-rich embedding space. For each validation question, we retrieve the 7 most similar training set questions. We use both human and automatic evaluation to calculate the amount of overlap. For human evaluation, we show annotators on Amazon Mechanical Turk 15 a validation set question and a retrieved training set question, qns with at least one train set paraphrase 81% qns with at least one train set topically similar 100% % of all pairs marked paraphrases 39.5% % of all pairs marked topically similar 47.8% % of all pairs marked as non-paraphrases 12.7% and ask them to annotate the pair as 0: No paraphrase relationship; 1: on similar topics, but different questions; 2: approximately the same question (an adaptation of the paraphrase evaluation of  Kok and Brockett, 2010) . We take 300 validation set questions and ask three crowd-workers to rate them against retrieved training questions on this scale, and consider the label with majority rating. To improve quality, we manually verify their annotations. Table  5  shows that 81% of validation set questions have at least one paraphrase in the training set, while all annotated questions have at least one topically similar question in the training set, which indicates substantial training / validation overlap. The experiment had "fair agreement" with a Fleiss ? of 0.29  (Fleiss, 1971; Landis and Koch, 1977) . As manually annotating question overlap can be expensive and time-consuming, we also experiment with automatic overlap detection methods. In particular, we use a RoBERTa-large binary classifier  (Liu et al., 2019)  fine-tuned on the Quora Question Paraphrase (QQP) dataset  (Iyer et al., 2017)  from the GLUE benchmark  (Wang et al., 2019) . For 43.6% of the ELI5 validation set, this classifier marked at least one retrieved question as a paraphrase (46% for the 300 questions we annotated). Qualitatively, we notice that this classifier often mis-classifies retrieved questions that are valid paraphrases but exhibit significant lexical or syntactic divergence. This observation, along with the smaller fraction of valid paraphrases in the QQP training set (37%), partially explains the gap between automatic & human evaluations. Using retrieved QA for generation: Since ELI5 contains significant amount of overlap between the training and validation sets, a system can simply copy the answers of retrieved training set questions instead of actually doing generation. Table  7  shows that by using the longest answer within the top-K retrieved questions, we outperform two prior systems (RAG, BART + DPR) that use retrieval-augmented generation. As an upper bound, we also consider a system which uses the best possible answer to retrieved training set questions in terms of ROUGE-L (best top-K train answer). This system gets 28.5 ROUGE-L, outperforming all others. ELI5 performance on overlapping QA: Finally, we measure the performance difference between validation questions that overlap with the training set vs. those that do not. Since we only have human annotations for 300 questions (the nooverlap subset has only 53 samples), we present this analysis using the QQP classifier's outputs as well. In Table  6 , we notice large differences of 6.6 RPrec, 8.1 R@5 in retrieval performance favoring the overlap subset, but only a small generation score gain of 0.8 F1, 0.4 R-L (which may be misleading as discussed in Section 3.3). Takeaway (careful held-out curation): Based on our findings, we suggest that more careful dataset curation for LFQA tasks is needed to prevent duplicates. While we acknowledge the efforts of  to fix this issue, we also suggest alternative methods to control overlap and focus on evaluating generalization in held-out sets: (1) automatically retrieving paraphrases and then running human validation to eliminate them; or (2) holding out entire genres or domains to reduce the possibility of overlap -for example, keeping Q/A on Sports only in the held-out sets. Note that simply pruning the existing splits using these criteria will significantly reduce the size of the held-out datasets; so we suggest re-splitting the train/validation/test splits from the entire pool of collected questions. 

 ROUGE-L Bounds on ELI5 Performance We have seen that simply copying the answer of a close question paraphrase from the training set achieves 28.5 ROUGE-L with an optimal selection among retrieved questions and outperforming all computational models. But how "good" is this absolute number? What are some suitable upper & lower bounds to ROUGE-L scores on ELI5? Is ROUGE-L an informative metric for LFQA? Lower bounds are trivial baselines used to test the vulnerability of datasets or metrics to simple heuristic strategies that do not actually perform the task. Recent examples include hypothesis-only baselines for natural language inference (Gururangan et al., 2018) and passage-only baselines for reading comprehension  (Kaushik and Lipton, 2018) . We evaluate two ROUGE-L lower bounds on ELI5: (1) copy the question 5 times and concatenate, as longer outputs boost ROUGE-L (Appendix A.6); (2) retrieve a random training set answer. Our first baseline contains entities often present in the gold answer, but without actually answering the question. Our second baseline follows the "style" of an answer but is completely off-topic. As an upper bound, we estimate the ROUGE-L of gold answers themselves. On an average, there are 12 gold answers per question, so we measure the ROUGE-L of the longest gold answer with respect to the other gold answers. We also measure the maximum pairwise ROUGE-L between two gold answers for the same question.  16  We only calculate upper bounds for the validation set, since the gold answers of the KILT test set are hidden. 

 Lower bounds beat prior work, upper bounds have low ROUGE-L: We compare our bounds with actual retrieval augmented generation systems in Table  7 . Both our lower bounds (random training answer, copy input) are quite competitive, outperforming RAG  (Lewis et al., 2020c)  and performing close to BART + DPR  (Petroni et al., 2020)  without actually answering the question! This shows that ROUGE-L is fairly sensitive to simply copying entities from the question  16  Note that different gold answers were not written independently as Reddit users writing answers can read existing answers and may want to provide a non-overlapping perspective. Due to the high train/valid overlap, the best top-7 retrieved answer could be a better upper bound since it is from another Reddit post (and performs better than best gold answer). as well as stylistic properties of ELI5. On the other hand, upper bounds (longest gold answer) perform worse than our system (21.2 vs 24.4). Suspecting that this result is misleading, we run another human A/B test by showing volunteers a question and asking them to choose between answers generated by our system and the longest gold answer, shuffled at random. 17 As seen in Table  3 , the majority of humans prefer the gold reference answers vs generations (68% vs 14% for p = 0.6). In interviews with human annotators after completing the task, they reported that both answers were often fluent and stylistically similar, but one eventually veered off-topic. 

 Takeaway (better automatic metrics needed): Our experiments demonstrate that computing the ROUGE-L of generations against gold answers is not a meaningful way to evaluate LFQA systems, since it is not selective enough to differentiate between valid/invalid answers. There is a very small margin of improvement between trivial lower bounds and strong upper bounds, with the absolute scores of upper bounds being quite low. We suspect this is due to the long length of answers and fairly unconstrained and large output space. The ELI5 dataset has several open-ended questions with many plausible answers (like What causes traffic?), often involving analogies. A possible fix is a sentence-level evaluation and then aggregating scores across generated sentences, but appropriate penalties are needed for lack of diversity  (Zhu et al., 2018 ) and short lengths. Other possible fixes 4948 include learning task-specific metrics to measure semantic overlap  (Sellam et al., 2020)  or metrics to check factual correctness  (Zhang et al., 2020)  and faithfulness to input  Durmus et al., 2020; . Ultimately, all automatic metrics have their limitations, and human evaluation is necessary  (Celikyilmaz et al., 2020) . 

 Difficulty of Human Evaluation To better understand the inherent difficulty of evaluation in ELI5, we interviewed human annotators (of Table  3 ) and found two challenges: (1) Unfamiliarity with question topics: While most annotators found the Q/A interesting, they were often unfamiliar with the technical topics discussed in the questions. This made it hard for them to assess answer correctness. The ELI5 dataset has questions in a wide variety of topics (History, Politics, Biology etc.), while most annotators were Computer Science graduate students. While we did allow annotators to use Wikipedia, they mentioned domain-experts will be better judges of factual correctness of answers. (2) Length of Answers: Annotators mentioned the paragraph-long length of answers made the task quite challenging. Annotators reported taking an average of 2 minutes per answer pair, many of which required careful thought & concentration. This was especially difficult when only part of the answer was correct and the rest had contradictions or repetitions, a common theme in our generations. Takeaway: Human evaluation is challenging but necessary for evaluating LFQA. Crowd-workers are unlikely to spend time reading & analyzing long text  (Akoury et al., 2020) . Hence, it is imperative to design simpler evaluations. One effort in this direction is  Dugan et al. (2020) , who reveal one generated sentence at a time and estimate system quality based on the number of sentences which fooled humans. Another promising direction is extrinsic evaluation  (Celikyilmaz et al., 2020)  where humans actually interact with systems in real-world scenarios such as the Alexa Prize  (Ram et al., 2018)  or STORIUM  (Akoury et al., 2020) . 

 Ethical Considerations Our system faces a similar set of issues as most modern text generation technology, like fabrication of facts  (Zellers et al., 2019) , potential for misuse  (Brown et al., 2020)  and reflecting biases prevalent on Reddit (the ELI5 dataset has been built using the r/ELI5 subreddit). In our work, we attempted to make text generators more factually grounded by conditioning generations on retrieved Wikipedia articles, hoping to reduce fact fabrication. Unfortunately, a thorough analysis (Section 3.1) has revealed that our system is still not grounding its generations in retrievals, and we have recommended the design of better metrics to measure factual correctness to tackle this issue. Our final models were trained using 64 Google Cloud TPUs for a total of 32 hours. As mentioned in the Google 2019 environment report, 18 "TPUs are highly efficient chips which have been specifically designed for machine learning applications". These accelerators run on Google Cloud, which has "matched 100% of its electricity consumption with renewable energy purchases, and has committed to fully decarbonize its electricity supply by 2030" (https://cloud.google. com/sustainability). More details on training time are provided in Appendix A.1. A Appendices for "Hurdles to Progress in Long-form Question Answering" 

 A.1 Training & Model Details All our models are developed and trained using TensorFlow 1.15  (Abadi et al., 2016)  and Tensor2Tensor  (Vaswani et al., 2018) . Our implementations are based on the open-source codebases of REALM  19  and the Routing Transformer.  20  Similar to the REALM implementation, we use separate processes to run the retriever and generate training data (using a MIPS search). Since our retriever is frozen, we do not use the document index refresher available in their codebase. Retriever: Our retriever is trained on 64 Google Cloud TPUs for a total of 4k steps and a batch size of 12288. We do early stopping on the validation data (with a smaller batch size of 512 due to smaller P100 GPU memory). Our model converges quite fast, reaching its best performance in 1.5k steps (in 43 minutes) and needing 103 minutes for the full set of 4k steps. Generator: Our generator is trained on 64 Google Cloud TPUs, for a total of 100k steps on the ELI5 training set. We use the pg19_local_cluster8k configuration available in the Routing Transformer implementation. Besides the default hyperparameters, setting 15% input, attention and ReLU dropout was critical to prevent overfitting on the training set. We use a learning rate of 5e-5. Our retrievals, questions and answers are truncated / padded to 288 subword tokens (using the PG19 subword tokenizer). We use a minibatch size of 128 QA pairs, which corresponds to 332k tokens per mini-batch (of which, the loss is computed over the last 288 answer tokens, or 37k total tokens). We do not compute loss over padded tokens, and use special symbols to separate different parts of the input context. We reverse the retrieved paragraphs in context since the model uses local attention layers, and we wanted higher ranked retrievals to appear closer to the answer tokens. Our models take about 30 hours to finish 100k steps (0.92 steps / second). Attention Maps: We show the 2D plots of our generator's attention maps in Figure  3 .   One of our contributions is scaling up a distantly supervised objective for training retrievers on ELI5, originally described in  Jernite (2020) . This method uses in-batch negative sampling, making minibatch size a critical hyperparameter for better constrastive learning. We perform controlled experiments initializing our retrievers with REALM-CCNews  (Guu et al., 2020)  and varying batch size and keeping all other hyperparameters consistent. In Table  8  As a baseline, we also add the retrieval performance of the REALM pretrained model which is used as an initialization. Next, we investigate the effect of initialization on the training of C-REALM. Unlike Jernite (2020) who initialize their model with BERT, before training we initialize our retriever with a pretrained self-supervised retriever. As a baseline, we initialize our model with ICT, a weaker self-supervised retriever introduced in . Both models are trained with minibatch sizes of 12228. In Table  9 , we notice a large improvement in performance when using a better initialization, confirming our design decisions. 

 A.3 Number of trainable parameters In Table  10  we present the number of trainable parameters in our model compared to baselines on the leaderboard. Our generator is slightly larger than the models used in prior work, but we utilize a smaller retriever due to the shared query and candidate encoders in REALM. Overall, our system has a similar total number of parameters as baseline models like RAG and BART + DPR. Initialization R-Prec. R@5 REALM (pretrained) 6.6 14.9 ICT  9.3 16.5 REALM  (Guu et al., 2020)  13.3 21.2   

 A.4 Generations from our System More generations have been provided (along with retrievals, highlighted to show n-gram overlap) in the supplementary material (data) as HTML files. We also present a few samples in Table  16 . 

 A.5 Human Evaluation Setup We conducted several A/B tests between variants of our model using human annotators. We asked a total of 20 participants for help who voluntarily agreed to help with the annotation process. Most participants were English-speaking graduate students in computer science. In every test, participants were shown a question along with two answers (generated by different systems) presented in a random order. They were then asked to choose which generation (1) answered the question better / which answer was more relevant to the question; (2) was more coherent / had less repetition; (3) was more factually correct. Since some annotators had a limited time, we asked them to prioritize question (1) over (2) / (3). Annotators were allowed to select "Tie" if they could not choose between the systems. We also permitted them to use search engines, but suggested restricting search to Wikipedia. We present all our results in Table  15 . We also interviewed some participants after the annotation process and discuss our findings in Section 3.4. Note that while these A/B tests help us understand which system is relatively better, they do not provide an absolute measure of performance  (Celikyilmaz et al., 2020)  -annotators reported that there were cases where both answers were very good and other cases where both were very poor. This is a limitation of A/B testing. A.6 Effect of length on ROUGE-L In this section we measure the effect of outputs lengths on ROUGE-L scores. To conduct this experiment, we truncate generations by our system to a fixed fraction of tokens across all instances. As we see in   Table  13 : Comparison of generations (with p = 0.9) conditioned on retrievals from C-REALM (Predicted) and randomly chosen retrievals (Random). Notice very small differences in: (1) ROUGE-L vs gold answers (R-L); (2) n-gram overlap (n-g) with retrievals predicted by C-REALM (vs predicted retr.). Gold answers also have a similar overlap with predicted retrievals. To control for overlap due to stopwords, we also add n-gram overlaps with the randomly sampled retrievals. higher nucleus sampling values. As we saw in Section 2.3, these generations tend to be more fluent and coherent, but less relevant to the question. In Table  13  and Table  14      ( a ) a Figure 1: A summary of the major hurdles (a-d) to progress in long-form question answering with ELI5. 

 Figure 2 : 2 Figure 2: Example generation from our LFQA system with p = 0.9. Generations are long & coherent, but suffer from repetition towards the end. (more in Appendix A.4 and attached data supplementary material). 

 Figure 3 : 3 Figure 3: Figures (from Roy et al., 2020) showing 2-D attention schemes for the sparse attention mechanism used in Routing Transformer. Lower layers pool in local information via sliding window local attention (Subfigure3a) while upper layers gather global information for every token via clustering (Sub-figure3b). 

 Figure 4 :Figure 5 : 45 Figure4: Scatter plot for generations from the p = 0.6 model between generative quality (ROUGE-L vs reference on X-axis) and grounding with retrieval (unigram overlap with retrieved documents on Y-axis). The plot shows no correlation between the two quantities. 

 , which is not valid in LFQA. Retrieval Generation Model RPr. R@5 F1 R-L KRL T5-base 0.0 0.0 16.1 19.1 0.0 BART 0.0 0.0 19.2 20.6 0.0 RAG 11.0 22.9 14.5 14.1 1.7 BART + DPR 10.7 26.9 17.9 17.4 1.9 p = 0.9 RT + REALM 6.7 15.5 25.1 21.5 1.4 RT + C-REALM 10.2 24.4 25.4 21.5 2.1 p = 0.6 RT + REALM 6.7 15.7 23.1 23.4 1.5 RT + C-REALM 10.7 24.6 22.9 23.2 2.4 5 github.com/facebookresearch/KILT 

 Table 4 : 4 A fine-grained version of Table2measuring the unigram overlap of nouns/numbers in the generations with the input question (vs qn.), retrievals predicted by C-REALM (vs predicted retr.) and randomly sampled retrievals (vs random retr.). Similar to Table2, notice very little difference with and without retrieval. 

 Table 5 : 5 A human evaluation measuring the amount of overlap between validation set questions (qns) and retrieved questions from the training set. 

 Table 7 : 7 Upper (?) and lower (?) bounds to performance on ELI5. Lower bounds have been submitted to the public KILT leaderboard, as "Metrics Test". Validation Test Scheme F1 R-L F1 R-L random train answer (?) 17.8 16.2 17.1 15.5 copy input (?) 16.6 20.0 14.8 16.9 RAG (2020c) 17.2 16.1 14.5 14.1 BART + DPR (2020) 18.8 18.5 17.9 17.4 longest top-1 train answer 25.2 20.7 21.6 18.7 longest top-7 train answer 26.9 21.1 22.0 18.5 RT + C-REALM (ours) 25.6 24.4 22.9 23.2 best top-1 train answer (?) 25.9 22.4 - - best top-7 train answer (?) 31.5 28.5 - - longest gold answer (?) 26.7 21.2 - - best gold answer (?) 29.5 26.2 - - 

 Table 8 : 8 The effect of minibatch size on the validation performance of C-REALM. , we notice a steady increase in perfor- mance as minibatch size is increased, with the largest gains coming by doubling the batch size in Jernite (2020) from 512 to 1024. Finally, in pre- liminary experiments we saw no benefit of more intelligent negative sampling schemes. Batch size R-Prec Recall@5 REALM (pretrained) 6.6 14.9 256 6.2 11.0 512 (Jernite, 2020) 6.8 12.6 1024 11.5 21.0 12288 (Ours) 13.3 21.2 

 Table 9 : 9 The effect of initialization on C-REALM. As a baseline, we also add the retrieval performance of the REALM-CCNews pretrained model without any finetuning on ELI5. Model Generator Retriever Index T5-base 220M - - BART 406M - - RAG 406M 220M 15B BART + DPR 406M 220M 15B RT + C-REALM 486M 110M 15B 

 Table 10 : 10 The number of parameters used by our model and baselines. Our generator is slightly bigger than other submissions on the leaderboard, but we use a smaller retriever with a similar sized index. 

 Table11in the Truncate column, shorter generations tend have lower ROUGE-L. To disentangle the effects of length and content, we also measure the generation quality by repeating the truncated generations several times until it matches the original generation length. In the Repeat 1/f times column, we notice a gap between our model's original generation (24.4 ROUGE-L) and the equallength truncated generations with repetition. These results indicate that while length helps improve ROUGE-L scores, simple repetition is insufficient. 1-gram overlap vs retrieval 0.2 0.4 0.6 0.8 0.1 0.2 ROUGE-L vs references 0.3 0.4 Fraction f # Tokens Truncate Repeat 1/f times 0.1 18.2 17.4 18.2 0.2 37.0 20.8 21.1 0.3 55.7 22.2 22.4 0.4 74.4 22.9 23.1 0.5 93.4 23.4 23.6 0.6 112.0 23.9 23.9 0.8 149.4 24.2 24.3 1.0 187.3 24.4 24.4 Table 11: Effect of truncating generations (Truncate) from the p = 0.6 model to keep the first f fraction of tokens, and then repeating the truncated generations 1/f times to match the original length (Repeat ...). No- tice a consistent increase in ROUGE-L with longer out- puts, but a gap between the original generations (24.4) and equal-length generations formed by repeating trun- cations (Repeat 1/f times column). A.7 More experiments on measuring retrieval grounding of generations In this section we provide some more experiments testing the grounding of generations in retrieved documents. Overall, trends are consistent with our observations in Section 3.1. Scatter plots between generation quality and unigram overlap with retrievals: We present this scatter plot in Figure 4. There is virtually 

 we find consistent trends as Section 3.1, with very little difference between models conditioned on retrievals from C-REALM and random retrievals. vs qn. vs predicted retr. vs random retr.but not in qn. but not in qn.(lemmatized nouns, proper nouns, numbers only) Predicted 9.1% 32.4% 12.0% Random 9.4% 30.2% 12.3% Gold Ans 8.3% 28.8% 15.1% 

 Table 14 : 14 A fine-grained version of Table13measuring the unigram overlap of nouns/numbers in the generations with the input question (vs qn.), retrievals predicted by C-REALM (vs predicted retr.) and randomly sampled retrievals (vs random retr.). Similar to Table 13, notice very little difference with and without retrieval. A comparison between nucleus sampling p values (0.6, 0.9), conditioning on predicted retrievals (pred.). Result: Lower entropy more relevant to question, but higher entropy more coherent and lesser repetition. p = 0.6, pred. p = 0.9, pred. Which generation answers the question better?Experiment 2: A comparison between generations conditioned on predicted (pred.) and random retrievals (rand.). Result: Little difference in generation quality / coherence / relevance to question, high amounts of tie. p = 0.6, pred. p = 0.6, rand. Which generation answers the question better? Experiment 3: A comparison between generations conditioned on predicted retrievals (pred.) and the longest gold answer. Result: Strong preference for gold answers over generations. 4956 

 Table 15 : 15 Human evaluations experiments with exact number of ratings shown in (?). Differences greater than 10% with more than 50 total samples have been bold marked. The experiments marked with ** have less than 50 samples, so it is difficult to draw meaningful conclusions. 

			 State-of-the-art as of April 3, 2021 -the "Google Research & UMass Amherst" team entry on https: //evalai.cloudcv.org/web/challenges/ challenge-page/689/leaderboard/1908 

			 As in Holtzman et al. (2020) , a human study reveals that higher entropy (p = 0.9) answers are slightly more coherent and sensible, but lower entropy answers (p = 0.6) are more relevant to the question (details in Appendix A.5). 

			 Corresponding experiments with the p = 0.9 variant of our model are presented in Appendix A.7. 

			 All these trends persist even on questions for which our retriever predicts the ground-truth document (Appendix A.7)9 Details of our experimental setup in Appendix A.5. 

			 Another issue of KILT-RL is ignoring non top-1 retrievals, penalizing models using multiple retrievals together in context.14  The ELI5 demo from Jernite (2020) also retrieves the top-1 similar training set question. Qualitatively, we found many validation examples had near-identical train paraphrases.15  We pay workers 4 cents per question pair ($8-12 / hr). We only hire workers from USA, UK and Australia with a 95% or higher approval rating and at least 1000 approved HITs. 

			 Human A/B testing details in Appendix A.5. 

			 ConclusionWe present a "retrieval augmented" generation system that achieves state-of-the-art performance on the ELI5 long-form question answering dataset. However, an in-depth analysis reveals several issues not only with our model, but also with the ELI5 dataset & evaluation metrics. We hope that the community works towards solving these issues so that we can climb the right hills and make meaningful progress on this important task. 

			 https://www.gstatic.com/ gumdrop/sustainability/ google-2019-environmental-report.pdf 

			 https://github.com/google-research/ language/tree/master/language/realm 20 https://github.com/google-research/ google-research/tree/master/routing_ transformer
