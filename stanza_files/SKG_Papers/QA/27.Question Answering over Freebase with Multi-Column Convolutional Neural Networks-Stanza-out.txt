title
Question Answering over Freebase with Multi-Column Convolutional Neural Networks
abstract
Answering natural language questions over a knowledge base is an important and challenging task .
Most of existing systems typically rely on hand -crafted features and rules to conduct question understanding and / or answer ranking .
In this paper , we introduce multi-column convolutional neural networks ( MCCNNs ) to understand questions from three different aspects ( namely , answer path , answer context , and answer type ) and learn their distributed representations .
Meanwhile , we jointly learn low-dimensional embeddings of entities and relations in the knowledge base .
Question - answer pairs are used to train the model to rank candidate answers .
We also leverage question paraphrases to train the column networks in a multi-task learning manner .
We use FREEBASE as the knowledge base and conduct extensive experiments on the WEBQUESTIONS dataset .
Experimental results show that our method achieves better or comparable performance compared with baseline systems .
In addition , we develop a method to compute the salience scores of question words in different column networks .
The results help us intuitively understand what MCCNNs learn .
Introduction Automatic question answering systems return the direct and exact answers to natural language questions .
In recent years , the development of largescale knowledge bases , such as FREEBASE ( Bollacker et al. , 2008 ) , provides a rich resource to answer open-domain questions .
However , how * Contribution during internship at Microsoft Research .
to understand questions and bridge the gap between natural languages and structured semantics of knowledge bases is still very challenging .
Up to now , there are two mainstream methods for this task .
The first one is based on semantic parsing ( Berant et al. , 2013 ; Berant and Liang , 2014 ) and the other relies on information extraction over the structured knowledge base Bordes et al. , 2014a ; Bordes et al. , 2014 b ) .
The semantic parsers learn to understand natural language questions by converting them into logical forms .
Then , the parse results are used to generate structured queries to search knowledge bases and obtain the answers .
Recent works mainly focus on using question - answer pairs , instead of annotated logical forms of questions , as weak training signals ( Liang et al. , 2011 ; Krishnamurthy and Mitchell , 2012 ) to reduce annotation costs .
However , some of them still assume a fixed and pre-defined set of lexical triggers which limit their domains and scalability capability .
In addition , they need to manually design features for semantic parsers .
The second approach uses information extraction techniques for open question answering .
These methods retrieve a set of candidate answers from the knowledge base , and the extract features for the question and these candidates to rank them .
However , the method proposed by relies on rules and dependency parse results to extract hand -crafted features for questions .
Moreover , some methods ( Bordes et al. , 2014a ; Bordes et al. , 2014 b ) use the summation of question word embeddings to represent questions , which ignores word order information and cannot process complicated questions .
In this paper , we introduce the multi-column convolutional neural networks ( MCCNNs ) to automatically analyze questions from multiple aspects .
Specifically , the model shares the same word embeddings to represent question words .
MCCNNs use different column networks to extract answer types , relations , and context information from the input questions .
The entities and relations in the knowledge base ( namely FREE - BASE in our experiments ) are also represented as low-dimensional vectors .
Then , a score layer is employed to rank candidate answers according to the representations of questions and candidate answers .
The proposed information extraction based method utilizes question - answer pairs to automatically learn the model without relying on manually annotated logical forms and hand -crafted features .
We also do not use any pre-defined lexical triggers and rules .
In addition , the question paraphrases are also used to train networks and generalize for the unseen words in a multi-task learning manner .
We have conducted extensive experiments on WE - BQUESTIONS .
Experimental results illustrate that our method outperforms several baseline systems .
The contributions of this paper are three - fold : ?
We introduce multi-column convolutional neural networks for question understanding without relying on hand-crafted features and rules , and use question paraphrases to train the column networks and word vectors in a multi-task learning manner ; ?
We jointly learn low-dimensional embeddings for the entities and relations in FREE - BASE with question - answer pairs as supervision signals ; ?
We conduct extensive experiments on the WEBQUESTIONS dataset , and provide some intuitive interpretations for MCCNNs by developing a method to detect salient question words in the different column networks .
Related Work
The state - of - the - art methods for question answering over a knowledge base can be classified into two classes , i.e. , semantic parsing based and information retrieval based .
Semantic parsing based approaches aim at learning semantic parsers which parse natural language questions into logical forms and then query knowledge base to lookup answers .
The most important step is mapping questions into predefined logical forms , such as combinatory categorial grammar ( Cai and Yates , 2013 ) and dependencybased compositional semantics ( Liang et al. , 2011 ) .
Some semantic parsing based systems required manually annotated logical forms to train the parsers ( Zettlemoyer and Collins , 2005 ; Kwiatkowski et al. , 2010 ) .
These annotations are relatively expensive .
So recent works ( Liang et al. , 2011 ; Kwiatkowski et al. , 2013 ; Berant et al. , 2013 ; Berant and Liang , 2014 ; Bao et al. , 2014 ; Reddy et al. , 2014 ) mainly aimed at using weak supervision ( question - answer pairs ) to effectively train semantic parsers .
These methods achieved comparable results without using logical forms annotated by experts .
However , some methods relied on lexical triggers or manually defined features .
On the other hand , information retrieval based systems retrieve a set of candidate answers and then conduct further analysis to obtain answers .
Their main difference is how to select correct answers from the candidate set .
used rules to extract question features from dependency parse of questions , and used relations and properties in the retrieved topic graph as knowledge base features .
Then , the production of these two kinds of features was fed into a logistic regression model to classify the question 's candidate answers into correct / wrong .
In contrast , we do not use rules , dependency parse results , or hand -crafted features for question understanding .
Some other works ( Bordes et al. , 2014a ; Bordes et al. , 2014 b ) learned low-dimensional vectors for question words and knowledge base constitutes , and used the sum of vectors to represent questions and candidate answers .
However , simple vector addition ignores word order information and highorder n-grams .
For example , the question representations of who killed A and who A killed are same in the vector addition model .
We instead use multi-column convolutional neural networks which are more powerful to process complicated question patterns .
Moreover , our multi-column network architecture distinguishes between information of answer type , answer path and answer context by learning multiple column networks , while the addition model mixes them together .
Another line of related work is applying deep learning techniques for the question answering task .
Grefenstette et al. ( 2014 ) proposed a deep architecture to learn a semantic parser from annotated logic forms of questions .
Iyyer et al. ( 2014 ) introduced dependency - tree recursive neural networks for the quiz bowl game which asked players to answer an entity for a given paragraph .
Yu et al. ( 2014 ) proposed a bigram model based on convolutional neural networks to select answer sentences from text data .
The model learned a similarity function between questions and answer sentences .
Yih et al . ( 2014 ) used convolutional neural networks to answer single-relation questions on REVERB ( Fader et al. , 2011 ) .
However , the system worked on relation-entity triples instead of more structured knowledge bases .
For instance , the question shown in Figure 1 is answered by using several triples in FREEBASE .
Also , we can utilize richer information ( such as entity types ) in structured knowledge bases .
Setup Given a natural language question q = w 1 . . . w n , we retrieve related entities and properties from FREEBASE and use them as the candidate answers C q .
Our goal is to score these candidates and predict answers .
For instance , the correct output of the question when did Avatar release in UK is 2009 - 12 - 17 .
It should be noted that there may be several correct answers for a question .
In order to train the model , we use question - answer pairs without annotated logic forms .
We further describe the datasets used in our work as follows : WebQuestions
This dataset ( Berant et al. , 2013 ) contains 3,778 training instances and 2,032 test instances .
We further split the training instances into the training set and the development set by 80 % / 20 % .
The questions were collected by querying the Google Suggest API .
A breadth - first search beginning with wh- was conducted .
Then , answers were annotated in Amazon Mechanical Turk .
All the answers can be found in FREEBASE .
Freebase
It is a large-scale knowledge base that consists of general facts ( Bollacker et al. , 2008 ) .
These facts are organized as subject - propertyobject triples .
For example , the fact Avatar is directed by James Cameron is represented by ( /m/0 bth54 , film.film.directed by , /m/03 gd ) in RDF format .
The preprocess method presented in ( Bordes et al. , 2014a ) was used to make FREE - BASE fit in memory .
Specifically , we kept the triples where one of the entities appeared in the training / development set of WEBQUESTIONS or CLUEWEB extractions provided in ( Lin et al. , 2012 ) , and removed the entities appearing less than five times .
Then , we obtained 18 M triples that contained 2.9M entities and 7 k relation types .
As described in ( Bordes et al. , 2014a ) , this prepro-cess method does not ease the task because WE - BQUESTIONS only contains about 2 k entities .
WikiAnswers Fader et al. ( 2013 ) extracted the similar questions on WIKIANSWERS and used them as question paraphrases .
There are 350,000 paraphrase clusters which contain about two million questions .
They are used to generalize for unseen words and question patterns .
Methods
The overview of our framework is shown in Figure 1 .
For instance , for the question when did Avatar release in UK , the related nodes of the entity Avatar are queried from FREEBASE .
These related nodes are regarded as candidate answers ( C q ) .
Then , for every candidate answer a , the model predicts a score S ( q , a ) to determine whether it is a correct answer or not .
We use multi-column convolutional neural networks ( MCCNNs ) to learn representations of questions .
The models share the same word embeddings , and have multiple columns of convolutional neural networks .
The number of columns is set to three in our QA task .
These columns are used to analyze different aspects of a question , i.e. , answer path , answer context , and answer type .
The vector representations learned by these columns are denoted as f 1 ( q ) , f 2 ( q ) , f 3 ( q ) .
We also learn embeddings for the candidate answers appeared in FREEBASE .
For every candidate answer a , we compute its vector representations and denote them as g 1 ( a ) , g 2 ( a ) , g 3 ( a ) .
These three vectors correspond to the three aspects used in question understanding .
Using these vector representations defined for questions and answers , we can compute the score for the question - answer pair ( q , a ) .
Specifically , the scoring function S ( q , a ) is defined as : S ( q , a ) = f 1 ( q ) T g 1 ( a ) answer path + f 2 ( q ) T g 2 ( a ) answer context + f 3 ( q ) T g 3 ( a ) answer type ( 1 ) where f i ( q ) and g i ( a ) have the same dimension .
As shown in Figure 1 , the score layer computes scores and adds them together .
Candidate Generation
The first step is to retrieve candidate answers from FREEBASE for a question .
Questions should contain an identified entity that can be linked to the knowledge base .
We use the Freebase Search API ( Bollacker et al. , 2008 ) to query named entities in a question .
If there is not any named entity , noun phrases are queried .
We use the top one entity in the ranked list returned by the API .
This entity resolution method was also used in .
Better methods can be developed , while it is not the focus of this paper .
Then , all the 2- hops nodes of the linked entity are regarded as the candidate answers .
We denote the candidate set for the question q as C q .
MCCNNs for Question Understanding MCCNNs use multiple convolutional neural networks to learn different aspects of questions from shared input word embeddings .
For every single column , the network structure presented in ( Collobert et al. , 2011 ) is used to tackle the variablelength questions .
We present the model in the left part of Figure 1 . Specifically , for the question q = w 1 . . . w n , the lookup layer transforms every word into a vector w j = W v u(w j ) , where W v ?
R dv ?|V | is the word embedding matrix , u( w j ) ? { 0 , 1 } | V | is the one- hot representation of w j , and | V | is the vocabulary size .
The word embeddings are parameters , and are updated in the training process .
Then , the convolutional layer computes representations of the words in sliding windows .
For the i-th column of MCCNNs , the convolutional layer computes n vectors for question q.
The j-th vector is : x ( i ) j = h W ( i ) w T j?s . . . w T j . . . w T j+s T + b ( i ) ( 2 ) where ( 2s + 1 ) is the window size , W ( i ) ? R dq ? ( 2s + 1 ) dv is the weight matrix of convolutional layer , b ( i ) ?
R dq?1 is the bias vector , and h ( ? ) is the nonlinearity function ( such as softsign , tanh , and sigmoid ) .
Paddings are used for left and right absent words .
Finally , a max-pooling layer is followed to obtain the fixed - size vector representations of questions .
The max-pooling layer in the i-th column of MCCNNs computes the representation of the question q via : f i ( q ) = max j=1 , ... , n {x ( i ) j } ( 3 ) where max { ? } is an element - wise operator over vectors .
Embedding Candidate Answers Vector representations g 1 ( a ) , g 2 ( a ) , g 3 ( a ) are learned for the candidate answer a .
The vectors are employed to represent different aspects of a .
The embedding methods are described as follows : Answer Path
The answer path is the set of relations between the answer node and the entity asked in question .
As shown in Figure 1 , the 2- hops path between the entity Avatar and the correct answer is ( film.film .release date s , film .
film regional release date .release date ) .
The vector representation g 1 ( a ) is computed via g 1 ( a ) = 1 up ( a ) 1 W p u p ( a ) , where ?
1 is 1 - norm , u p ( a ) ? R | R|?1 is a binary vector which represents the presence or absence of every relation in the answer path , W p ?
R dq ?|R | is the parameter matrix , and | R | is the number of relations .
In other words , the embeddings of relations that appear on the answer path are averaged .
Answer Context
The 1 - hop entities and relations connected to the answer path are regarded as the answer context .
It is used to deal with constraints in questions .
For instance , as shown in Figure 1 , the release date of Avatar in UK is asked , so it is not enough that only the triples on answer path are considered .
With the help of context information , the release date in UK has a higher score than in USA .
The context representation is g 2 ( a ) = 1 uc ( a ) 1 W c u c ( a ) , where W c ?
R dq ?|C| is the parameter matrix , u c ( a ) ? R | C|?1 is a binary vector expressing the presence or absence of context nodes , and | C | is the number of entities and relations which appear in answer context .
Answer Type Type information in FREEBASE is an important clue to score candidate answers .
As illustrated in Figure 1 , the type of 2009 - 12 - 17 is datetime , and the type of James Cameron is people .
person and film . producer .
For the example question when did Avatar release in UK , the candidate answers whose types are datetime should be assigned with higher scores than others .
The vector representation is defined as g 3 ( a ) = 1 ut ( a ) 1 W t u t ( a ) , where W t ?
R dq ?|T | is the matrix of type embeddings , u t ( a ) ? R |T |?1 is a binary vector which indicates the presence or absence of answer types , and | T | is the number of types .
In our implementation , we use the relation common.topic.notable types to query types .
If a candidate answer is a property value , we instead use its value type ( e.g. , float , string , datetime ) .
Model Training
For every correct answer a ?
A q of the question q , we randomly sample k wrong answers a from the set of candidate answers C q , and use them as negative instances to estimate parameters .
To be more specific , the hinge loss is considered for pairs ( q , a ) and ( q , a ) : l q , a , a = m ?
S( q , a ) + S( q , a ) + ( 4 ) where S ( ? , ? ) is the scoring function defined in Equation ( 1 ) , m is the margin parameter employed to regularize the gap between two scores , and ( z ) + = max {0 , z} .
The objective function is : min q 1 | A q | a?
Aq a ? Rq l q , a , a ( 5 ) where | A q | is the number of correct answers , and R q ?
C q \ A q is the set of k wrong answers .
The back - propagation algorithm ( Rumelhart et al. , 1986 ) is used to train the model .
It backpropagates errors from top to the other layers .
Derivatives are calculated and gathered to update parameters .
The AdaGrad algorithm ( Duchi et al. , 2011 ) is then employed to solve this non-convex optimization problem .
Moreover , the max-norm regularization ( Srebro and Shraibman , 2005 ; Srivastava et al. , 2014 ) is used for the column vectors of parameter matrices .
Inference During the test , we retrieve all the candidate answers C q for the question q.
For every candidate ? , we compute its score S( q , ? ) .
Then , the candidate answers with the highest scores are regarded as predicted results .
Because there may be more than one correct answers for some questions , we need a criterion to determine the score threshold .
Specifically , the following equation is used to determine outputs : ?q = {? | ? ?
C q and max a ? Cq { S ( q , a ) } ? S( q , ? ) < m} ( 6 ) where m is the margin defined in Equation ( 4 ) .
The candidates whose scores are not far from the best answer are regarded as predicted results .
Some questions may have a large set of candidate answers .
So we use a heuristic method to prune their candidate sets .
To be more specific , if the number of candidates on the same answer path is greater than 200 , we randomly keep 200 candidates for this path .
Then , we score and rank all these generated candidate answers together .
If one of the candidates on the pruned path is regarded as a predicted answer , we further score the other candidates that are pruned on this path and determine the final results .
Question Paraphrases for Multi-Task Learning
We use the question paraphrases dataset WIKIAN - SWERS to generalize for words and question patterns which are unseen in the training set of question - answer pairs .
The question understanding results of paraphrases should be same .
Consequently , the representations of two paraphrases computed by the same column of MCCNNs should be similar .
We use dot similarity to define the hinge loss l p ( q 1 , q 2 , q 3 ) as : l p ( q 1 , q 2 , q 3 ) = 3 i=1 m p ? f i ( q 1 ) T f i ( q 2 ) + f i ( q 1 ) T f i ( q 3 ) + ( 7 ) where q 1 , q 2 are questions in the same paraphrase cluster P , q 3 is randomly sampled from another cluster , and m p is the margin .
The objective function is defined as : min P q 1 , q 2 ?P q 3 ?R
P l p ( q 1 , q 2 , q 3 ) ( 8 ) where R P contains k p questions which are randomly sampled from other clusters .
The same optimization algorithm described in Section 4.4 is used to update parameters .
Experiments
In order to evaluate the model , we use the dataset WEBQUESTIONS ( Section 3 ) to conduct experiments .
Settings
The development set is used to select hyper-parameters in the experiments .
The nonlinearity function f = tanh is employed .
The dimension of word vectors is set to 25 .
They are initialized by the pre-trained word embeddings provided in ( Turian et al. , 2010 ) .
The window size of MCCNNs is 5 .
The dimension of the pooling layers and the dimension of answer embeddings are set to 64 .
The parameters are initialized by the techniques described in ( Bengio , 2012 ) .
The max value used for max-norm regularization is 3 .
The initial learning rate used in AdaGrad is set to 0.01 .
A mini-batch consists of 10 question - answer pairs , and every question - answer pair has k negative samples that are randomly sampled from its candidate set .
The margin values in Equation ( 4 ) and Equation ( 7 ) is set to m = 0.5 and m p = 0.1 .
Method F1 P@1 ( Berant et al. , 2013 ) 31.4 - ( Berant and Liang , 2014 ) 39.9 - ( Bao et al. , 2014 ) 37.5 - 33.0 - ( Bordes et al. , 2014a ) 39.2 40.4 ( Bordes et al. , 2014 b ) 29.7 31.3 MCCNN ( our ) 40.8 45.1 Table 1 : Evaluation results on the test split of WE - BQUESTIONS .
Experimental Results
The evaluation metrics macro F1 score ( Berant et al. , 2013 ) and precision @ 1 ( Bordes et al. , 2014a ) are reported .
We use the official evaluation script provided by Berant et al . ( 2013 ) to compute the F1 score .
Notably , the F1 score defined in is slightly different from others ( how to compute scores for the questions without predicted results ) .
We instead use the original definition in experiments .
As shown in Table 1 , our method achieves better or comparable results than baseline methods on WEBQUESTIONS .
To be more specific , the first three rows are semantic parsing based methods , and the other baselines are information extraction based methods .
These approaches except ( Bordes et al. , 2014a ; Bordes et al. , 2014 b ) rely on handcrafted features and predefined rules .
The results show that automatically question understanding can be as good as the models using manually designed features .
Besides , our multi-column convolutional neural networks based model outperforms the methods that use the sum of word embeddings as question representations ( Bordes et al. , 2014a ; Bordes et al. , 2014 b ) .
Model Analysis
We also conduct ablation experiments to compare the results using different experiment settings .
As shown in Table 2 , the abbreviation w/o means removing a particular part from the model .
We find that answer path information is most important among these three columns , and answer type information is more important than answer context information .
The reason is that answer path and answer type are more direct clues for questions , but answer context is used to handle additional constraints in questions which are less common in the dataset .
Moreover , we compare to the The results indicate that using multiple columns to understand questions from different aspects improves the performance .
Besides , we find that using question paraphrases in a multi-task learning manner contributes to the performance .
In addition , we evaluate the results only using 1hop paths to generate candidate answers .
Compared to using 2 - hops paths , we find that the performance drops significantly .
This indicates only using the nodes directly connected to the queried entity in FREEBASE cannot handle many questions .
Salient Words Detection
In order to analyze the model , we detect salient words in questions .
The salience score of a question word depends on how much the word affects the computation of question representation .
In other words , if a word plays more important role in the model , its salience score should be larger .
We compute several salience scores for a same word to illustrate its importance in different columns of networks .
For the i-th column , the salience score of word w j in the question q = w n 1 is defined as : e i ( w j ) = f i ( w n 1 ) ? f i w j?1 1 w j w n j +1 2 ( 9 ) where the word w j is replaced with w j , and As shown in Figure 2 , we compute salience scores for several questions , and normalize them by the max values in different columns .
We clearly see that these words play different roles in a question .
The overall conclusion is that the wh-words ( such as what , who and where ) tend to be important for question understanding .
Moreover , nouns dependent of the wh-words and verbs are important clues to obtain question representations .
For instance , the figure demonstrates that the nouns type / country / leader and the verbs speak / located are salient in the columns of networks .
These observations agree with previous works ( Li and Roth , 2002 ) .
Some manually defined rules used in the question answering task are also based on them .
Examples Question representations computed by different columns of MCCNNs are used to query their most similar neighbors .
We use cosine similarity in experiments .
This experiment demonstrates whether the model learns different aspects of questions .
For example , if a column of networks is employed to analyze answer types , the answer types of nearest questions should be same as the query .
As shown in Table 3 , these three columns of table correspond to different columns of networks .
To be more specific , the first column is used to process answer path .
We find that the model learns different question patterns for the same where be george washington originally from where be george washington carver from where be george bush from where be the thame river source where be the main headquarters of google in what town do ned kelly and he family grow up where do charle draw go to college where do kevin love go to college where do pauley perrette go to college where do kevin jame go to college where do charle draw go to high school where do draw bree go to college wikianswer who found collegehumor who found the roanoke settlement who own skywest who start mary kay who be the owner of kfc who own wikimedium foundation who be the leader of north korea today who be the leader of syrium now who be the leader of cuba 2012 who be the leader of france 2012 who be the current leader of cuba today who be the minority leader of the house of representative now who be judy garland father who be clint eastwood date who be emma stone father who be robin robert father who miley cyrus engage to who be chri path .
For instance , the vector representations of " who found / own / start * " and " who be the owner of * " obtained by the first column are similar .
The second column is employed to extract answer type information from questions .
The answer types of example questions in Table 3 are same , while they may ask different relations .
The third column learns to embed question information into answer context .
We find that the similar questions are clustered together by this column .
Error Analysis
We investigate the predicted results on the development set , and show several error causes as follows .
Candidate Generation
Some entity mentions in questions are linked incorrectly , hence we cannot obtain the desired candidate answers .
As described in , the Freebase Search API returned correct entities for 86.4 % of questions in top one results .
Because some questions use the abbreviation or a part of its mention to express an entity .
For example , it is not trivial to link jfk to John F. Kennedy in the question " where did jfk and his wife live " .
A better entity retrieval step should be developed for the open question answering scenario .
Time - Aware Questions
We need to compare date values for some time - aware questions .
For instance , to answer the question " who is johnny cash 's first wife " , we have to know the order of several marriages by comparing the marriage date .
Its correct response should contain only one entity ( vivian liberto ) .
However , our system addi-tionally outputs june carter cash who is his second wife , because both the candidate answers are connected to johnny cash by the relation people.person.spouse s.
In order to solve this issue , we need to define some ad-hoc operators used for comparisons or develop more advanced semantic representations .
Ambiguous Questions
Some questions are ambiguous to obtain their correct representations .
For example , the question what has anna kendrick been in is used to ask what movies she has played in .
This question does not have explicit clue words to indicate the meanings , so it is difficult to rank the candidates .
Moreover , the question who is aidan quinn is employed to ask what his occupation is .
It also lacks sufficient clues for question understanding , and using who is to ask occupation is rare in the training data .
Conclusion and Future Work
This paper presents a method for question answering over FREEBASE using multi-column convolutional neural networks ( MCCNNs ) .
MCCNNs share the same word embeddings , and use multiple columns of convolutional neural networks to learn the representations of different aspects of questions .
Accordingly , we use low-dimensional embeddings to represent multiple aspects of candidate answers , i.e. , answer path , answer type , and answer context .
We estimate the parameters from question - answer pairs , and use question paraphrases to train the columns of MCCNNs in a multi-task learning manner .
Experimental results on WEBQUESTIONS show that our approach achieves better or comparable performance comparing with baselines .
There are several interesting directions that are worth exploring in the future .
For instance , we are integrating more external knowledge source , such as CLUEWEB ( Lin et al. , 2012 ) , to train MCCNNs in a multi-task learning manner .
Furthermore , as our model is capable of detecting the most important words in a question , it would be interesting to use the results to mine effective question patterns .
Figure 2 : 2 Figure 2 : Salient words detection results for questions .
From left to right , the three bars of every word correspond to salience scores in answer path column , answer type column , and answer context column , respectively .
The salience scores are normalized by the max values of different columns .
