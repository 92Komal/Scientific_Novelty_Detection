title
Combining Translation Memory with Neural Machine Translation
abstract
In this paper , we report our submission systems ( geoduck ) to the Timely Disclosure task on the 6 th Workshop on Asian Translation ( WAT ) ( Nakazawa et al. , 2019 ) .
Our system employs a combined approach of translation memory and Neural Machine Translation ( NMT ) models , where we can select final translation outputs from either a translation memory or an NMT system , when the similarity score of a test source sentence exceeds the predefined threshold .
We observed that this combination approach significantly improves the translation performance on the Timely Disclosure corpus , as compared to a standalone NMT system .
We also conducted sourcebased direct assessment on the final output , and we discuss the comparison between human references and each system 's output .
Introduction
One of the desired features in automatic translation systems is the ability to flexibly make use of a translation memory to translate known sentences and phrase , while still allowing a more flexible Machine Translation ( MT ) model to translate lessfamiliar phrases and sentences without sacrificing quality .
Koehn and Senellart ( 2010 ) explored methods of combining translation memories with statistical machine translation , and proposed a method to apply phrase fixing on the translation candidate retrieved from the translation memory .
As for statistical machine translation models , Neural Machine Translation ( NMT ) models have been nowadays employed in large-scale production MT systems ( Johnson et al. , 2017 ; Hassan et al. , 2018 ) due to its state - of - the - art performance in many languages .
There are several studies that combine translation memories with NMT models .
Cao and Xiong ( 2018 ) introduced the idea of using a trans - lation memory gating network with NMT models in a multi-encoder fashion so that the model can make full use of both training data and the retrieved data .
Zhao et al. ( 2018 ) created phrase tables as recommendation memory and let the NMT models select the better translation .
In Gu et al. ( 2018 ) , the authors proposed a search- engineguided NMT model , where a search engine first collects a small subset of relevant training translation pairs from the translation memory and NMT models are trained on the subset as well .
In this paper , we combine a translation memory with an NMT model , simply choosing either the translation memory output or NMT output at inference time , depending on a similarity score of a given source sentence , and then investigate the effectiveness of this strategy .
Figure 1 illustrates an overview of our proposed architecture .
In Section 2 , we first conduct an analysis of the Timely Disclosure task data set and report interesting characteristics .
In Section 3 , we explain our approach of combining a translation memory with an NMT model .
We describe our experimental design in Section 4 , and we report experimental results , human evaluation analyses , and discussion in Section 5 .
In Section 6 , we conclude by summarizing our findings on the task and contributions of the paper .
Analysis of Timely Disclosure Documents Corpus
We first analyzed the data set for the Timely Disclosure Task 1 to better understand trends in the data set .
The corpus consists of past years ' timely disclosure documents , and contains about 1.4 million Japanese - English sentence pairs .
there is no translation candidates in the translation memory whose similarity score exceeds the threshold , we let the NMT models generate a translation and use it as a final output .
We would like to mention that this kind of translation scenario is not specific to this task data set but also is common in other domain text translations like a software manual .
We aim at investigating when to and when not to translate from scratch in such scenarios .
Retrieval Approaches on Translation Memory
The retrieval approach on the translation memory is useful , since it is well known that NMT models are data-hungry and it is difficult to control the translation outputs generated by NMT models .
At inference time , we calculate a sentence - level similarity score between a query , i.e. a given source sentence , and all the source sentences stored in the translation memory .
If there exists a source sentence in the translation memory whose similarity score is above the threshold , we employ its target sentence as a final output .
In our systems , we provide two types of retrieval approaches : 1 ) Editdistance - based retrieval and 2 ) Inverse document frequency ( IDF ) - based retrieval .
Edit-distance -based retrieval
The editdistance - based retrieval is a widely - used method in work that investigates using translation memories to enhance NMT models ( Gu et al. , 2018 ; Cao and Xiong , 2018 ) .
We calculate the similarity score between two source sentences ( S 1 and S 2 ) using the character - based Levenshtein distance as follows :
Sim edit ( S 1 , S 2 ) = 1 ? ? dist ( S 1 , S 2 ) max ( | S 1 | , | S 2 | ) , ( 1 ) where ? dist indicates the Levenshtein distance of sentences S 1 and S 2 . | S | denotes the length of a sentence S. IDF - based retrieval An IDF - based retrieval approach was investigated by Bapna and Firat ( 2019 ) .
Following the previous work , we calculate a sentence - level similarity score by using an IDF score f t of a token t as follows :
Sim idf ( S 1 , S 2 ) = 2 ? t?( S 1 S 2 ) f t ?
t?( S 1 S 2 ) f t , ( 2 ) f t = log | C T M | n t , ( 3 ) where | C T M | is the number of sentence pairs in the translation memory .
n t denotes the number of occurrences of a token t in the corpus .
In our preliminary experiments , we found that using sub-words for a token unit t is better than characters .
We also tried IDF - based n-gram retrieval proposed in ( Bapna and Firat , 2019 ) ; however , the two above-mentioned retrieval methods always worked better .
Neural Machine Translation
We employ a Transformer ( base ) model ( Vaswani et al. , 2017 ) as a default NMT system in our proposed approach .
Transformer is modeled as an encoder-decoder network architecture , where an input sentence x = ( x 1 , x 2 , . . . , x n ) is encoded into a fixed vector space and decoded from the fixed vector to the output sequence y = ( y 1 , y 2 , . . . , y m ) .
Following Vaswani et al. ( 2017 ) , the inputs are mapped into the 512dimensional embedding space with positional embedding .
Both the encoder and decoder networks map the vectors through 6 - layer 2048 - dimensional feed -forward networks with 8 - head self-attention and layer - normalization ( Ba et al. , 2016 ) , and the decoder has an 8 - head attention layer before the feed -forward network layer between the target hidden state and the source hidden states .
We shared the parameters across the target embeddings and a softmax layer in the decoder ( Inan et al. , 2017 ; Hashimoto and Tsuruoka , 2017 ) .
To avoid overfitting , we use dropout with the rate of 0.1 and introduce the label - smoothed cross entropy loss with the coefficient of 0.1 ( Pereyra et al. , 2017 ) .
We use Adam ( Kingma and Ba , 2015 ) to optimize all model parameters .
We apply warm - up learning rate scheduling , increasing the learning rate linearly during predefined warm - up updates and applying learning rate decay based on the inverse square root of the update number ( Vaswani et al. , 2017 ) .
Experimental Design Data Preparation
All of the training corpora provided for ITEM and TEXT data are concatenated into a single training corpus .
We also use the 1M Japanese -English Wikipedia parallel corpus provided by Asai et al . ( 2018 ) as an additional training resource .
The corpus is automatically created by crawling multilingual Wikipedia pages and applying a sentence aligner .
Because the parallel data in that corpus are pre-tokenized , we applied a detokenization script on both sides .
In preliminary experiments , we confirmed that using the additional Wikipedia training data improved translation accuracy on the task .
All of the data sets are tokenized using SentencePiece ( Kudo and Richardson , 2018 ) , and we set the vocabulary size to 32k .
To determine the optimal sentence -similarity threshold in the retrieval approaches , we evaluated the systems based on sacreBLEU score ( Post , 2018 ) with thresholds varying within { 80 , 100 } and { 10 , 25 } for THRESHOLD edit and THRESHOLD IDF , respectively .
The best thresholds for each NMT system are determined based on the development results .
When tuning our submission systems , we perform the threshold optimization on the devtest data , and the development data is added into the translation memory .
System Description A ( Marian )
We use a codebase of Marian ( Junczys - Dowmunt et al. , 2018 ) to train the Transformer model described in Subsection 3.2 .
In System A , we set the minibatch size to 1,000 .
The initial learning rate and warm - up steps are set to 0.0002 and 8,000 .
The maximum length of the training examples is set to 100 , and 0.4 % training data are discarded during the training .
We trained the system for 200k updates with 8 GPUs .
Regarding data preprocessing , we create a joint vocabulary with the size of 32k .
We refer System A as " Marian " after this .
System Description B ( Fairseq )
We use a vocabulary set separately created in the source and target languages , and each vocabulary size is set to 32k .
We fill a mini-batch with up to 6,000 tokens , and we use the initial learning rate of 1e - 07 and warm - up updates of 2,000 .
We trained the model for 80k updates with 4 GPUs .
We use a codebase of Fairseq ( Ott et al. , 2019 ) .
We refer System B as " Fairseq " in the following sections .
At inference time , we use the beam-search decoding with the size of { 4 , 8 , 12 } and select the best beam size based on the development results for both systems .
Large-scale Black - box MT systems
To verify the effectiveness of using translation memory on the task , we experiment by using three types of production - level black - box MT systems , i.e .
Dev
Results and Discussion
Experimental Results
First of all , we evaluate the overall translation accuracy of each NMT system and production system on the concatenated data ( ITEM + TEXT ) .
Table 3 shows the experimental results of our proposed approach using the translation memory , reporting the sacreBLEU scores on the ITEM and TEXT evaluation data sets .
The best retrieval approach is different for those two data sets .
We found that in general , edit-distance - based retrieval produces better results for ITEM data , while the IDF - based retrieval works better for TEXT data .
TEXT .
Higher sentence -similarity thresholds were selected for Marian and Fairseq with the ITEM data , indicating that the outputs generated by these systems show better quality than those by the online systems .
Introducing the translation memory to the systems outputs , however , we can largely fill the gaps between our systems and the online systems by around 1 - 2 BLEU scores on both evaluation data sets .
Table 4 shows the results of our submission systems on the devtest and test data sets , where Fairseq provides the result of an ensemble with 4 replicas .
We include the development translation pairs in the translation memory , and selected the threshold to use on the test data based on scores on the devtest data set .
Human Evaluation
We used source - based direct assessment for human evaluation , as described in Cettolo et al . ( 2017 ) .
For the annotation process , we used an updated version of Appraise ( Federmann , 2012 ) , the human evaluation tool used for the Conference on Machine Translation ( WMT ) 5 , and we followed the evaluation campaign setup as specified in Hassan et al . ( 2018 ) .
In source - based direct assessment , annotators are shown source text and a candidate translation and are asked the question " How accurately does the above candidate text convey the semantics of the source text ? " , answering this using a slider ranging from 0 ( Not at all ) to 100 ( Perfectly ) .
In this campaign we examined five systems : Marian , Fairseq , Online A , Online B and Online C .
We also added human reference ( HREF ) to the campaign for comparison .
Table 5 shows the evaluation campaign parameters .
We hired 25 bilingual crowd-sourced annotators and assigned two tasks to each .
We collected a single score for each of the randomly selected translations on each system .
There were no overlapping annotation items among annotators .
For the ITEM testset , we obtained at least 873 assessments for each system 6 . Likewise we obtained 511 assessments for the TEXT testset .
We collected a total of 8,308 annotation data points .
Table 6 shows the mean scores for ITEM , TEXT and ALL ( ITEM + TEXT ) for each system .
A boldfaced number indicates that the mean score is indistinguishable from HREF in the same category ( ITEM , TEXT or ALL ) using the Mann-Whitney U Test at p-level p < 0.05 .
Figures 2a and 2 b show the evaluation score distributions for ITEM and TEXT , respectively .
Discussion
The human evaluation results indicate that the translation quality of each system is comparable with human reference for the ITEM testset while the differences were statistically significant for the TEXT testset .
One possible reason for this is that the retrieval approach using the translation memory works better for shorter sentence translation in the ITEM dataset but not for longer sentence translation in the TEXT dataset .
while the TEXT datasets does 28,507 .
These different trends between the ITEM and TEXT data suggest that the systems are required to translate relatively fixed phrases or sentences more in the ITEM data set , which is a suitable scenario for translation memories .
On the other hand , it also suggests that MT is more desirable in the cases where long sentences with a variety of expressions need to be translated .
However , this is not always the case for the TEXT translations with our systems because longer sentences which may contain major semantic errors can be chosen due to their high similarity scores .
Tables 7 and 8 show each system 's translation outputs and its human evaluation score on the devtest data set ( ITEM and TEXT ) .
Our approach of combining a translation memory with MT systems is evaluated lower than the human reference by human annotators on the TEXT data , whereas the online systems are more highly evaluated among all the systems .
It is because those production systems are better at translating longer sentences due to much larger training corpora .
For instance , Google Translate is trained on three or four orders of magnitudes larger train-ing data ( Johnson et al. , 2017 ) , and such a system should cover a variety of expressions and domains .
Thus , it is still important to improve the translation quality of NMT models on longer sentences , which has been actively studied in the context of document- level translation ( Jean et al. , 2017 ; Tiedemann and Scherrer , 2017 ; Junczys -Dowmunt , 2019 ) .
Conclusion
This paper describes our submission systems to WAT '19 Timely Disclosure task .
The system is a combination approach of translation memory and NMT model .
First , we observed that 26 - 28 % of data are duplicated between training data and test sets .
The system enables us to directly retrieve a translation candidate from the translation memory .
Any MT model can be applied to our approach , and we confirmed its effectiveness even when using black - box MT production systems .
Results from the human evaluation campaign demonstrate that translation on a fixed form or short expressions can be covered well with translation memory , while NMT is much more robust especially when flexible translation on longer sentences is required .
Figure 1 : 1 Figure 1 : Overview of our proposed approach combining translation memory and NMT models .
