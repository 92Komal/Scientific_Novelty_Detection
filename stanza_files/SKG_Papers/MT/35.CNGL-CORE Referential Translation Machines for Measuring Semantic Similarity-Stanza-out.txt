title
CNGL - CORE : Referential Translation Machines for Measuring Semantic Similarity
abstract
We invent referential translation machines ( RTMs ) , a computational model for identifying the translation acts between any two data sets with respect to a reference corpus selected in the same domain , which can be used for judging the semantic similarity between text .
RTMs make quality and semantic similarity judgments possible by using retrieved relevant training data as interpretants for reaching shared semantics .
An MTPP ( machine translation performance predictor ) model derives features measuring the closeness of the test sentences to the training data , the difficulty of translating them , and the presence of acts of translation involved .
We view semantic similarity as paraphrasing between any two given texts .
Each view is modeled by an RTM model , giving us a new perspective on the binary relationship between the two .
Our prediction model is the 15th on some tasks and 30th overall out of 89 submissions in total according to the official results of the Semantic Textual Similarity ( STS 2013 ) challenge .
Semantic Textual Similarity Judgments
We introduce a fully automated judge for semantic similarity that performs well in the semantic textual similarity ( STS ) task ( Agirre et al. , 2013 ) .
STS is a degree of semantic equivalence between two texts based on the observations that " vehicle " and " car " are more similar than " wave " and " car " .
Accurate prediction of STS has a wide application area including : identifying whether two tweets are talking about the same thing , whether an answer is correct by comparing it with a reference answer , and whether a given shorter text is a valid summary of another text .
The translation quality estimation task ( Callison - Burch et al. , 2012 ) aims to develop quality indicators for translations at the sentence - level and predictors without access to a reference translation .
Bicici et al. ( 2013 ) develop a top performing machine translation performance predictor ( MTPP ) , which uses machine learning models over features measuring how well the test set matches the training set relying on extrinsic and language independent features .
The semantic textual similarity ( STS ) task ( Agirre et al. , 2013 ) addresses the following problem .
Given two sentences S 1 and S 2 in the same language , quantify the degree of similarity with a similarity score , which is a number in the range [ 0 , 5 ] .
The semantic textual similarity prediction problem involves finding a function f approximating the semantic textual similarity score given two sentences , S 1 and S 2 : f ( S 1 , S 2 ) ? q( S 1 , S 2 ) . ( 1 )
We approach f as a supervised learning problem with ( S 1 , S 2 , q( S 1 , S 2 ) ) tuples being the training data and q( S 1 , S 2 ) being the target similarity score .
We model the problem as a translation task where one possible interpretation is obtained by translating S 1 ( the source to translate , S ) to S 2 ( the target translation , T ) .
Since linguistic processing can reveal deeper similarity relationships , we also look at the translation task at different granularities of information : plain text ( R for regular ) , after lemmatization ( L ) , after part- of-speech ( POS ) tagging ( P ) , and after removing 128 English stop-words ( S ) 1 .
Thus , we obtain 4 different perspectives on the binary relationship between S 1 and S 2 .
Referential Translation Machine ( RTM ) Referential translation machines ( RTMs ) we develop provide a computational model for quality and semantic similarity judgments using retrieval of relevant training data ( Bic ?ici and Yuret , 2011a ; Bic ?ici , 2011 ) as interpretants for reaching shared semantics ( Bic ?ici , 2008 ) .
We show that RTM achieves very good performance in judging the semantic similarity of sentences and we can also use RTM to automatically assess the correctness of student answers to obtain better results than the state - of- the - art ( Dzikovska et al. , 2012 ) . RTM is a computational model for identifying the acts of translation for translating between any given two data sets with respect to a reference corpus selected in the same domain .
RTM can be used for automatically judging the semantic similarity between texts .
An RTM model is based on the selection of common training data relevant and close to both the training set and the test set where the selected relevant set of instances are called the interpretants .
Interpretants allow shared semantics to be possible by behaving as a reference point for similarity judgments and providing the context .
In semiotics , an interpretant I interprets the signs used to refer to the real objects ( Bic ?ici , 2008 ) . RTMs provide a model for computational semantics using interpretants as a reference according to which semantic judgments with translation acts are made .
Each RTM model is a data translation model between the instances in the training set and the test set .
We use the FDA ( Feature Decay Algorithms ) instance selection model for selecting the interpretants ( Bic ?ici and Yuret , 2011a ) from a given corpus , which can be monolingual when modeling paraphrasing acts , in which case the MTPP model ( Section 2.1 ) is built using the interpretants themselves as both the source and the target side of the parallel corpus .
RTMs map the training and test data to a space where translation acts can be identified .
We view that acts of translation are ubiquitously used during communication :
Every act of communication is an act of translation ( Bliss , 2012 ) . src/backend/ snowball / stopwords /
Translation need not be between different languages and paraphrasing or communication also contain acts of translation .
When creating sentences , we use our background knowledge and translate information content according to the current context .
Given a training set train , a test set test , and some monolingual corpus C , preferably in the same domain as the training and test sets , the RTM steps are : 1 . T = train ? test .
2 . select ( T , C ) ? I 3 . MTPP ( I , train ) ?
F train 4 . MTPP ( I , test ) ?
F test 5 . learn ( M , F train ) ? M 6 . predict ( M , F test ) ?
q Step 2 selects the interpretants , I , relevant to the instances in the combined training and test data .
Steps 3 , 4 use I to map train and test to a new space where similarities between translation acts can be derived more easily .
Step 5 trains a learning model M over the training features , F train , and Step 6 obtains the predictions .
RTM relies on the representativeness of I as a medium for building translation models for translating between train and test .
Our encouraging results in the STS task provides a greater understanding of the acts of translation we ubiquitously use when communicating and how they can be used to predict the performance of translation , judging the semantic similarity between text , and evaluating the quality of student answers .
RTM and MTPP models are not data or language specific and their modeling power and good performance are applicable across different domains and tasks .
RTM expands the applicability of MTPP by making it feasible when making monolingual quality and similarity judgments and it enhances the computational scalability by building models over smaller but more relevant training data as interpretants .
The Machine Translation Performance Predictor ( MTPP )
In machine translation ( MT ) , pairs of source and target sentences are used for training statistical MT ( SMT ) models .
SMT system performance is affected by the amount of training data used as well as the closeness of the test set to the training set .
MTPP is a top performing machine translation performance predictor , which uses machine learning models over features measuring how well the test set matches the training set to predict the quality of a translation without using a reference translation .
MTPP measures the coverage of individual test sentence features and syntactic structures found in the training set and derives feature functions measuring the closeness of test sentences to the available training data , the difficulty of translating the sentence , and the presence of acts of translation for data transformation .
MTPP Features for Translation Acts MTPP uses n-gram features defined over text or common cover link ( CCL ) ( Seginer , 2007 ) structures as the basic units of information over which similarity calculations are made .
Unsupervised parsing with CCL extracts links from base words to head words , which allow us to obtain structures representing the grammatical information instantiated in the training and test data .
Feature functions use statistics involving the training set and the test sentences to determine their closeness .
Since they are language independent , MTPP allows quality estimation to be performed extrinsically .
Categories for the 289 features used are listed below and their detailed descriptions are presented in where the number of features are given in {# }. ? Coverage { 110 } : Measures the degree to which the test features are found in the training set for both S ( { 56 } ) and T ( { 54 } ) .
lates translation scores obtained according to q(T , R ) using BLEU ( Papineni et al. , 2002 ) , NIST ( Doddington , 2002 ) , or F 1 ( Bic ?ici and Yuret , 2011 b ) for q. ?
Character n-grams { 4 } : Calculates the cosine between the character n-grams ( for n=2,3,4,5 ) obtained for S and T ( B?r et al. , 2012 ) ( Miller , 1995 ) and FNWN is from FrameNet ( Baker et al. , 1998 ) and WordNet ) , and statistical machine translation ( SMT ) ( Agirre et al. , 2013 ) .
STS challenge results are evaluated with the Pearson 's correlation score ( r ) .
The test set contains 2250 ( S 1 , S 2 ) sentence pairs with 750 , 561 , 189 , and 750 sentences from each type respectively .
The training set contains 5342 sentence pairs with 1500 each from MSRpar and MSRvid ( Microsoft Research paraphrase and video description corpus ( Agirre et al. , 2012 ) ) , 1592 from SMT , and 750 from OnWN .
RTM Models
We obtain CNGL results for the STS task as follows .
For each perspective described in Section 1 , we build an RTM model .
Each RTM model views the STS task from a different perspective using the 289 features extracted dependent on the interpretants using MTPP .
We extract the features both on 2 LIX = A B + C 100 A , where A is the number of words , C is words longer than 6 characters , B is words that start or end with any of " . " , " : " , " ! " , " ? " similar to ( Hagstr ?m , 2012 ) .7904 .7502 .8200 .7788 .8074 .8232 .8101 .8247 .8218 .8509 .8266 .8172 .8304 .8530 .8323 .8499 SVR .8311 .8060 .8443 .8330 .8404 .8517 .8498 .8501 .8593 .8556 .8496 .8422 .8586 .8579 .8527 . 8564 .7922 .7651 .8169 .7891 .8064 .8196 .8136 .8219 .8257 .8257 .8226 .8164 .8284 .8284 .8313 .8324 SVR .8308 .8165 .8407 .8302 .8361 .8506 .8467 .8510 .8567 .8567 .8525 .8460 .8588 .8588 .8575 .8574 .8079 .787 .8279 .8101 .8216 .8333 .8275 .8346 .8375 .8409 .8361 .8312 .8412 .8434 .8432 .844 SVR .8397 .8237 .8554 .841 .8432 .857 .851 .8557 .8605 .8626 .8505 .8505 .8591 .8622 .8602 .8588
Table 1 : CV performance on the training set with tuning .
Underlined are the settings we use in our submissions .
RTM models in directions S 1 ? S 2 , S 2 ? S 1 , and the bi-directional models S 1 S 2 are displayed .
S 2 ? S 1 RR S 1 S 2 RR the training set and the test set .
The training corpus used is the English side of an out-of-domain corpus on European parliamentary discussions , Europarl ( Callison - Burch et al. , 2012 ) 3 . In-domain corpora are likely to improve the performance .
We use the Stanford POS tagger ( Toutanova et al. , 2003 ) to obtain the perspectives P and L .
We use the training corpus to build a 5 - gram target LM .
We use ridge regression ( RR ) and support vector regression ( SVR ) with RBF kernel ( Smola and Sch?lkopf , 2004 ) .
Both of these models learn a regression function using the features to estimate a numerical target value .
The parameters that govern the behavior of RR and SVR are the regularization ? for RR and the C , , and ? parameters for SVR .
At testing time , the predictions are bounded to obtain scores in the range [ 0 , 5 ] .
We perform tuning on a subset of the training set separately for each RTM model and optimize against the performance evaluated with R 2 , the coefficient of determination .
We do not build a separate model for different types of sentences and instead use all of the training set for building a large prediction model .
We also use transductive learning since using only the relevant training data for training can improve the performance ( Bic ?ici , 2011 ) .
Transductive learning is performed at the sentence level where for each test instance , we select 1250 relevant training instances using the cosine similarity metric over the feature vectors and build an individual model for the test instance and predict the similarity score .
3 We use WMT '13 corpora from www.statmt.org/wmt13/.
Training Results
Table 1 lists the 10 - fold cross-validation ( CV ) results on the training set for RR and SVR for different RTM systems using optimized parameters .
As we combine different perspectives , the performance improves and we use the L+S with SVR for run 1 ( LSSVR ) , L+P+S with SVR for run 2 ( LPSSVR ) , and L+P+S with SVR using transductive learning for run 3 ( LPSSVRTL ) all in the translation direction S 1 ? S 2 . Lemmatized RTM , L , performs the best among the individual perspectives .
We also build RTM models in the direction S 2 ? S 1 , which gives similar results .
The last main row combines them to obtain the bi-directional results , S 1 S 2 , which improves the performance .
Each additional perspective adds another 289 features to the representation and the bi-directional results double the number of features .
Thus , S 1 S 2 L+P+S is using 1734 features .
STS Challenge Results
Table 2 presents the STS challenge r and ranking results containing our CNGL submissions , the best system result , and the mean results over all submissions .
There were 89 submissions from 35 competing systems ( Agirre et al. , 2013 ) .
The results are ranked according to the mean r obtained .
We also include the mean result over all of the submissions and its corresponding rank .
According to the official results , CNGL - LSSVR is the 30th system from the top based on the mean r obtained and CNGL - LPSSVR is 15th according to the results on OnWN out of 89 submissions in total .
System head OnWN FNWN SMT mean rank CNGL -LSSVR .6552 .6943 .2016 .3005 .5086 30 CNGL -LPSSVRTL .6385 .6756 .1823 .3098 .4998 33 CNGL -LPSSVR .6510 .6971 .1180 .2861 CNGL submissions perform unexpectedly low in the FNWN task and only slightly better than the average in the SMT task .
The lower performance is likely to be due to using an out-of- domain corpus for building the RTM models and it may also be due to using and optimizing a single model for all types of tasks .
Bi-directional RTM Models
The STS task similarity score is directional invariant : q( S 1 , S 2 ) = q( S 2 , S 1 ) .
We develop RTM models in the reverse direction and obtain bi-directional RTM models by combining both .
Table 3 lists the bi-directional results on the STS challenge test set after tuning , which shows that slight improvement in the scores are possible when compared with Table 2 .
Transductive learning improves the performance in general .
We also compare with the performance obtained when combining uni-directional models with mean , min , or max functions .
Taking the minimum performs better than other combination approaches and can achieve r = 0.5129 with TL .
One can also take the individual confidence scores obtained for each score when combining scores .
Conclusion Referential translation machines provide a clean and intuitive computational model for automatically measuring semantic similarity by measuring the acts of translation involved and achieve to be the 15th on some tasks and 30th overall in the STS challenge out of 89 submissions in total .
RTMs make quality and semantic similarity judgments possible based on the retrieval of relevant training data as interpretants for reaching shared semantics .
? Synthetic Translation Performance { 6 } : Calculates translation scores achievable according to the n-gram coverage .?
Length { 4 } : Calculates the number of words and characters for S and T and their ratios .
? Feature Vector Similarity { 16 } : Calculates the similarities between vector representations .
? Perplexity { 90 } : Measures the fluency of the sentences according to language models ( LM ) .
We use both forward ( { 30 } ) and backward ( { 15 } ) LM based features for S and T.? Entropy { 4 } : Calculates the distributional similarity of test sentences to the training set .
? Retrieval Closeness { 24 } : Measures the degree to which sentences close to the test set are found in the training set .
? Diversity { 6 } : Measures the diversity of cooccurring features in the training set .
? IBM1 Translation Probability { 16 } : Calculates the translation probability of test sentences using the training set ( Brown et al. , 1993 ) .
? Minimum Bayes Retrieval Risk { 4 } : Calculates the translation probability for the translation having the minimum Bayes risk among the retrieved training instances .
? Sentence Translation Performance { 3 } : Calcu -
