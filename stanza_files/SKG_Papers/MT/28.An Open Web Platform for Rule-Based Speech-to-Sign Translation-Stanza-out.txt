title
An Open Web Platform for Rule-Based Speech-to-Sign Translation
abstract
We present an open web platform for developing , compiling , and running rulebased speech to sign language translation applications .
Speech recognition is performed using the Nuance Recognizer 10.2 toolkit , and signed output , including both manual and non-manual components , is rendered using the JASigning avatar system .
The platform is designed to make the component technologies readily accessible to sign language experts who are not necessarily computer scientists .
Translation grammars are written in a version of Synchronous Context - Free Grammar adapted to the peculiarities of sign language .
All processing is carried out on a remote server , with content uploaded and accessed through a web interface .
Initial experiences show that simple translation grammars can be implemented on a time -scale of a few hours to a few days and produce signed output readily comprehensible to Deaf informants .
Overall , the platform drastically lowers the barrier to entry for researchers interested in building applications that generate high-quality signed language .
Introduction
While a considerable amount of linguistic research has been carried out on sign languages to date , work in automatic sign language processing is still in its infancy .
Automatic sign language processing comprises applications such as sign language recognition , sign language synthesis , and sign language translation ( S?f?r and Glauert , 2012 ) .
For all of these applications , drawing on the expertise of native signers , sign language linguists and sign language interpreters is crucial .
These different types of sign language experts may exhibit varying degrees of computer literacy .
In the past , their contribution to the development of systems that automatically translate into sign language has been restricted mostly to the provision of transcribed and / or annotated sign language data .
In this paper , we report on the development and evaluation of a platform that allows sign language experts with modest computational skills to play a more active role in sign language machine translation .
The platform enables these users to independently develop and run applications translating speech into synthesized sign language through a web interface .
Synthesized sign language is presented by means of a signing avatar .
To the best of our knowledge , our platform is the first to facilitate low-threshold speech - to-sign translation , opening up various possible use cases , e.g. that of communicating with a Deaf customer in a public service setting like a hospital , train station or bank .
1
By pursuing a rule-based translation approach , the platform also offers new possibilities for empirical investigation of sign language linguistics : the linguist can concretely implement a fragment of a hypothesized sign language grammar , sign a range of generated utterances through the avatar , and obtain judgements from Deaf informants .
The remainder of this paper is structured as follows .
Section 2 presents background and related work .
Section 3 describes the architecture of the speech-to-sign platform .
Section 4 reports on a preliminary evaluation of the usability of the platform and of translations produced by the platform .
Section 5 offers a conclusion and an outlook on future research questions .
Background and related work
There has been surprisingly little work to date on speech to sign language translation .
The bestperforming system reported in the literature still appears to be TESSA ( Cox et al. , 2002 ) , which translated English speech into British Sign Language ( BSL ) in a tightly constrained post office counter service domain , using coverage captured in 370 English phrasal patterns with associated BSL translations .
The system was evaluated in a realistic setting in a British post office , with three post office clerks on the hearing side of the dialogues and six Deaf subjects playing the role of customers , and performed creditably .
Another substantial project is the one described by San-Segundo et al. ( 2008 ) , which translated Spanish speech into Spanish Sign Language ; this , however , does not appear to have reached the stage of being able to achieve reasonable coverage even of a small domain , and the evaluation described in the paper is restricted to comprehensibility of signs from the manual alphabet .
2
It is reasonable to ask why so little attention has been devoted to what many people would agree is an important and interesting problem , especially given the early success of TESSA .
Our own experiences , and those of other researchers we have talked to , suggest that the critical problem is the high barrier to entry : in order to build a speechto-sign system , it is necessary to be able to combine components for speech recognition , translation and sign language animation .
The first two technologies are now well -understood , and good platforms are readily available .
Sign language animation is still , however , a niche subject , and the practical problems involved in obtaining usable sign language animation components are nontrivial .
The fact that San-Segundo et al . ( 2008 ) chose to develop their own animation component speaks eloquently about the difficulties involved .
There are three approaches to sign language animation : hand - crafted animation , motion capturing and synthesis from form notation ( Glauert , 2013 ) .
Hand-crafted animation consists of manually modeling and posing an avatar character .
This procedure typically yields high-quality results but is very labor-intensive .
A signing avatar may also be animated based on information obtained from motion capturing , which involves recording a human 's signing .
Although sign language animations obtained through motion capturing also tend to be of good quality , the major drawback of this approach is the long calibration time and extensive postprocessing required .
Synthesis from form notation permits construction of a fully -fledged animation system that allows synthesis of any signed form that can be described through the associated notation .
Avatar signing synthesized from form notation is the most flexible in that it is able to render dynamic content , e.g. display the sign language output of a machine translation system , present the contents of a sign language wiki or an e-learning application , visualize lexicon entries or present public transportation information ( Efthimiou et al. , 2012 ; Kipp et al. , 2011 ) .
At the same time , this approach to sign language animation typically results in the lowest quality : controlling the appearance of all possible sign forms that may be produced from a given notation is virtually impossible .
The most comprehensive existing sign language animation system based on synthesis from form notation is undoubtedly JASigning ( Elliott et al. , 2008 ; Jennings et al. , 2010 ) , a distant descendant of the avatar system used in TESSA which was further developed over the course of the eS- IGN and DictaSign European Framework projects .
JASigning performs synthesis from SiGML ( Elliott et al. , 2000 ) , an XML - based representation of the physical form of signs based on the wellunderstood Hamburg Notation System for Sign Languages ( HamNoSys ) ( Prillwitz et al. , 1989 ) . HamNoSys can be converted into SiGML in a straightforward fashion .
Unfortunately , despite its many good and indeed unique properties , JASigning is a piece of research software that in practice has posed an insurmountable challenge to most linguists without a computer science background .
The basic purpose of the Lite Speech2Sign project can now be summarised in a sentence : we wished to package JASigning together with a state - of - the - art commercial speech recognition platform and a basic machine translation framework in a way that makes the combination easily usable by sign language linguists who are not software engineers .
In the rest of the paper , we describe the result .
The Lite Speech2Sign platform
The fact that the Lite Speech2Sign platform is intended primarily for use by sign language experts who may only have modest skills in computer science has dictated several key design decisions .
In particular , 1 ) the formalism used is simple and minimal and 2 ) no software need be installed on the local machine : all processing ( compilation , deployment , testing ) is performed on a remote server accessed through the web interface .
Runtime functionality and formalism
At runtime , the basic processing flow is speech ? source language text ?
" sign table " ?
SiGML ? signed animation .
Input speech , source language text and signed animation have their obvious meanings , and we have already introduced SiGML in the preceding section .
At the input end of the pipeline , speech recognition is carried out using the Nuance Recognizer 10.2 platform , equipped with domain-specific language models compiled from the grammar .
At the output end , SiGML is converted signed animation form using the JASigning avatar system .
The " sign table " , the level which joins all these pieces together , is an intermediate representation modelled on the diagrams typically used in theoretical sign language linguistics to represent signed utterances .
A sign table is , concretely , a matrix whose rows represent the different parallel channels of signed language output ( manual activities , gaze , head movements , mouth movements , etc ) .
The only obligatory row is the one for manual activities , which consists of a sequence of " glosses " , each gloss referring to one manual activity .
There is one column for each gloss / manual activity in the signed utterance .
The usefulness of this representation is dependent on the appropriateness of the assumption that sign language is timed so that each non-manual activity can be assumed synchronous with some manual activity .
This has been shown to be true for non-manual activities that serve linguistic functions .
Non-manual activities that serve purely affective purposes , e.g. , expressing anger or disgust , are known to start slightly earlier than the surrounding manual activities ( Reilly and Anderson , 2002 ; Wilbur , 2000 ) .
A restriction imposed by the low-level SiGML representation is that nonmanual activities cannot be extended across several manual activities in a straightforward way ; however , workarounds have been introduced for this ( Ebling and Glauert , 2015 ) .
Experience with SiGML has shown that it is capable of supporting signed animation of satisfactory quality ( Smith and Nolan , 2015 ) .
The core translation formalism is a version of Synchronous Context Free Grammar ( SCFG ; ( Aho and Ullman , 1969 ; Chiang , 2005 ) ) adapted to the peculiarities of sign language translation .
A complete toy application definition is shown in Figure 1 .
The top-level Utterance rule translates French expressions of the form Je m'appelle NAME ( " I am called NAME " ) to Swiss French Sign Language ( LSF - CH ) expressions of a form that can be glossed as MOI S_APPELER NAME together with accompanying non-manual components ; for example , the manual activity MOI ( signed by pointing at one 's chest ) is here performed together with a head nod , raised eyebrows , widened eyes , and a series of mouth movements approximating the shapes used to say " mwe " .
The two TrPhrase rules translate the names " Claude " and " Marie " into fingerspelled forms with accompanying mouthings .
The mapping between the sign table and SiGML levels is specified using three other types of declarations , defined in the resource lexica listed in the initial include lines .
1 ) Glosses are associated with strings of HamNoSys symbols ; in this case , the resource lexicon used is lsf_ch.csv , a CSV spreadsheet whose columns are glosses and HNS strings for LSF - CH signs .
2 ) Symbols in the non-manual rows ( Head , Gaze , etc ) are mapped into the set of SiGML tags supported by the avatar , according to the declarations in the sign- language - independent resource file visicast .
txt . 3 ) The Mouthing line is treated specially .
Two types of mouthings are supported : " mouth pictures " , approximate mouthings of phonemes , are written as SAMPA ( Wells , 1997 ) strings ( e.g. mwe is a SAMPA string ) .
It is also possible to use the repertoire of " mouth gestures " ( mouth movements not related to spoken language words , produced with teeth , jaw , lips , cheeks , or tongue ) supported by the avatar , again using definitions taken from the visicast .
txt resource file .
For example , L23 denotes pursed lips ( Hanke , 2001 ) .
The Domain unit at the top defines the name of the translation app , the source language 3 and sign language channels , and the type of web client used to display it .
Compile - and deploy-time functionality
The compilation process takes application descriptions like the one above as input and transforms them first into SCFG grammars , then into GrXML grammars 4 , and finally into runnable Nuance recognition grammars .
The compiler also produces tables of metadata listing associations between symbols and HamNoSys , SAMPA , and SiGML constants .
Two main challenges needed to be addressed when designing the compile-time functionality .
The first was to make the process of developing , uploading , compiling , and deploying web- based speech applications simple to invoke , so that these operations could be performed without detailed understanding of the underlying technology .
The second was to support development on a shared server ; here , it is critical to ensure that a developer who uploads bad content is not able to break the system for other users .
At an abstract level , the architecture is as follows .
Content is divided into separate " namespaces " , with each developer controlling one or more namespaces ; a namespace in turn contains one or more translation apps .
At the source level , each namespace is a self-contained directory , and each app a self-contained subdirectory .
From the developer 's point of view , the whole upload / compile / deploy cycle reduces to a simple progression across a dashboard with four tabs labeled " Select " , " Compile " , " Test " , and " Release " .
The developer starts the upload / compile / deploy cycle by uploading one or more namespace directories over an FTP client and choosing one of them from the " Select " tab .
The platform contains three separate servers , respectively called compilation , staging , and deployment .
After selecting the app on the first tab , the developer moves to the second one and presses the " Compile " button to invoke the compilation server .
Successful compilation results in a Nuance grammar recognition module and a set of namespace -specific table entries ; a separate Nuance recognition grammar is created for each namespace .
As part of the compilation process , a set of files is also created which list undefined constants .
These can be downloaded over the FTP connection and are structured so as to make it easy for the developer to fill in missing entries and add the new content to the resource files .
When the app has compiled , the developer proceeds to the third , " Staging " tab , and presses the " Test " button .
This initiates a process which copies the compiled recognition grammar , table entries and metadata to appropriate places on the staging server and registers the grammar as available for use by the recognition engine , after which the developer can interactively test the application through the web interface .
It is important that only copying actions are performed by the " Staging " server ; experience shows that recompiling applications can often lead to problems if the compiler changes after an application is uploaded .
When the developer is satisfied with the application , they move to the fourth tab and press the " Release " button .
This carries out a second set of copying operations which transfer the application to the deployment server .
Initial experiences with the platform
The Lite Speech2Sign platform is undergoing initial testing ; during this process , we have constructed half a dozen toy apps for the translation directions French ? LSF - CH and German ? Swiss German Sign Language , and one moderately substantial app for French ? LSF - CH .
Grammars written so far all have a flat structure .
Our central claims regarding the platform are that it greatly simplifies the process of building a speech-to-sign application and allows rapid construction of apps which produce signed language of adequate quality .
To give some substance to these statements , we tracked the construction of a small French ? LSF - CH medical questionnaire app and performed a short evaluation .
The app was built by a sign language expert whose main qualifications are in sign language interpretation .
The expert began by discussing the corpus with Deaf native signers , to obtain video-recorded material on which to base development .
They then implemented rules and HNS entries , uploaded , debugged , and deployed the content , and used the deployed system to perform the evaluation .
Rule-writing typically required on the order of ten to fifteen minutes per rule , using a method of repeatedly playing the recorded video and entering first the gloss line and then the accompanying non-manual lines .
Uploading , debugging , and deployment of the app was completely straightforward and took approximately one hour .
The most time - consuming part of the process was implementing HNS entries for signs missing from the current LSF - CH HNS lexicon .
The time required per entry varied a great deal depending on the sign 's complexity , but was typically on the order of half an hour to two hours .
This part of the task will of course become less important as the HNS lexicon resource becomes more complete .
The evaluation was carried out with five Deaf subjects and based on recommendations for sign language animation evaluation studies by Kacorri et al . ( 2015 ) .
Each subject was first given a short demographic questionnaire .
Subjects were then asked to watch seven outputs from the app and echo them back , either in signed or mouthed form , to check the comprensibility of the app 's signed output .
They then answered a second short questionnaire which asked for their overall impressions .
The result was encouraging : although none of the subjects felt the signing was truly fluent and human-like ( a frequent comment was " artificial " ) , they all considered it grammatically correct and perfectly comprehensible .
Conclusions and further directions
Although the Lite Speech2Sign platform is designed to appear very simple and most of its runtime processing is carried out by the third - party JASigning and Nuance components , it represents a non-trivial engineering effort .
The value it adds is that it allows sign language linguists who may have only modest computational skills to build translation applications that produce synthesized signed language , using a tool whose basic functioning can be mastered in two or three weeks .
By including speech recognition , these applications can potentially be useful in real situations .
In a research context , the platform opens up new possibilities for investigation of the grammar of signed languages .
If the linguist wishes to investigate the productivity of a hypothesized syntactic rule , they can quickly implement a grammar fragment and produce a set of related signed utterances , all signed uniformly using the avatar .
Our initial experiences , as described in Section 4 , suggest that rendering quality is sufficient to obtain useful signer judgements .
Full documentation for Lite Speech2Sign is available ( Rayner , 2016 ) .
The platform is currently in alpha testing ; we plan to open it up for general use during Q3 2016 .
People interested in obtaining an account may do so by mailing one of the authors of this paper .
Figure 1 : 1 Figure 1 : Toy speech2sign application definition .
We follow the widely recognized convention of using the upper-cased word Deaf to describe members of the linguistic community of sign language users and , in contrast , the lower - cased word deaf to describe the audiological state of a hearing loss ( Morgan and Woll , 2002 ) .
Sign languages make use of a communication form known as the manual alphabet ( or , finger alphabet ) , in which the letters of a spoken language word are fingerspelled , i.e. , dedicated signs are used for each letter of the word .
Any recognition language supported by Nuance Recognizer 10.2 can potentially be used as a source language ; the current version of the platform is loaded with language packs for English , French , German , Italian , Japanese and Slovenian .
4 GrXML is an open standard for writing speech recognition grammars .
