title
Referential Translation Machines for Predicting Translation Quality
abstract
We use referential translation machines ( RTM ) for quality estimation of translation outputs .
RTMs are a computational model for identifying the translation acts between any two data sets with respect to interpretants selected in the same domain , which are effective when making monolingual and bilingual similarity judgments .
RTMs achieve top performance in automatic , accurate , and language independent prediction of sentence - level and word - level statistical machine translation ( SMT ) quality .
RTMs remove the need to access any SMT system specific information or prior knowledge of the training data or models used when generating the translations and achieve the top performance in WMT13 quality estimation task ( QET13 ) .
We improve our RTM models with the Parallel FDA5 instance selection model , with additional features for predicting the translation performance , and with improved learning models .
We develop RTM models for each WMT14 QET ( QET14 ) subtask , obtain improvements over QET13 results , and rank 1st in all of the tasks and subtasks of QET14 .
Introduction
We use referential translation machines ( RTM ) for quality estimation of translation outputs , which is a computational model for identifying the acts of translation for translating between any given two data sets with respect to a reference corpus selected in the same domain .
RTMs reduce our dependence on any task dependent resource .
Prediction of translation quality is important because the expected translation performance can help in estimating the effort required for correcting the translations during post-editing by human translators .
Bicici et al. ( 2013 ) develop the Machine Translation Performance Predictor ( MTPP ) , a state- ofthe- art , language independent , and SMT system extrinsic machine translation performance predictor , which can predict translation quality by looking at the test source sentences and becomes the 2nd overall after also looking at the translation outputs as well in QET12 ( Callison - Burch et al. , 2012 ) . RTMs achieve the top performance in QET13 ( Bojar et al. , 2013 ) , ranking 1st or 2nd in all of the subtasks .
RTMs rank 1st in all of the tasks and subtasks of QET14 ( Bojar et al. , 2014 ) .
Referential translation models ( Section 2 ) present an accurate and language independent solution for predicting the performance of natural language tasks such as the quality estimation of translation .
We improve our RTM models ( Bic ?ici , 2013 ) by : ? using a parameterized , fast implementation of FDA , FDA5 , and our Parallel FDA5 instance selection model , ? better modeling of the language in which similarity judgments are made with improved optimization and selection of the LM data , ? increased feature set for also modeling the structural properties of sentences , ? extended learning models .
Referential Translation Machine ( RTM ) Referential translation machines provide a computational model for quality and semantic similarity judgments in monolingual and bilingual settings using retrieval of relevant training data ( Bic ?ici , 2011 ; Bic ?ici and Yuret , 2014 ) as interpretants for reaching shared semantics ( Bic ?ici , 2008 ) . RTMs achieve top performance when predicting the quality of translations in QET14 and QET13 ( Bic ?ici , 2013 ) , top performance when predicting monolingual cross-level semantic similarity ( Jurgens et al. , 2014 ) , good performance when evaluating the semantic relatedness of sentences and their entailment ( Marelli et al. , 2014 ) , and a language independent solution and good performance when judging the semantic similarity of sentences ( Agirre et al. , 2014 ; . RTM is a computational model for identifying the acts of translation for translating between any given two data sets with respect to a reference corpus selected in the same domain .
An RTM model is based on the selection of interpretants , data close to both the training set and the test set , which allow shared semantics by providing context for similarity judgments .
In semiotics , an interpretant I interprets the signs used to refer to the real objects ( Bic ?ici , 2008 ) .
Each RTM model is a data translation model between the instances in the training set and the test set .
We use the Parallel FDA5 ( Feature Decay Algorithms ) instance selection model for selecting the interpretants Bic ?ici and Yuret , 2014 ) this year , which allows efficient parameterization , optimization , and implementation of FDA , and build an MTPP model ( Section 2.1 ) .
We view that acts of translation are ubiquitously used during communication :
Every act of communication is an act of translation ( Bliss , 2012 ) .
( Seginer , 2007 ) structures as the basic units of information over which similarity calculations are made .
Unsupervised parsing with CCL extracts links from base words to head words , representing the grammatical information instantiated in the training and test data .
We extend the MTPP model we used last year ( Bic ?ici , 2013 ) in its learning module and the features included .
Categories for the features ( S for source , T for target ) used are listed below where the number of features are given in brackets for S and T , {# S , # T} , and the detailed descriptions for some of the features are presented in ( Bic ?ici et al. , 2013 ) .
The number of features for each task differs since we perform an initial feature selection step on the tree structural features ( Section 2.3 ) .
The number of features are in the range 337?437 .
?
Coverage { 56 , 54 } : Measures the degree to which the test features are found in the training set for both S ( { 56 } ) and T ( { 54 } ) .
?
Perplexity { 45 , 45 } : Measures the fluency of the sentences according to language models ( LM ) .
We use both forward ( { 30 } ) and backward ( { 15 } ) LM features for S and T. ? TreeF { 0 , 10 - 110 } : 10 base features and up to 100 selected features of T among parse tree structures ( Section 2.3 ) .
?
Retrieval Closeness { 16 , 12 } : Measures the degree to which sentences close to the test set are found in the selected training set , I , using FDA ( Bic ?ici and Yuret , 2011a ) and BLEU , F 1 ( Bic ?ici , 2011 ) , dice , and tf- idf cosine similarity metrics .
? IBM2 Alignment Features { 0 , 22 } : Calculates the sum of the entropy of the distribution of alignment probabilities for S ( s?S ?p log p for p = p( t | s ) where s and t are tokens ) and T , their average for S and T , the number of entries with p ? 0.2 and p ? 0.01 , the entropy of the word alignment between S and T and its average , and word alignment log probability and its value in terms of bits per word .
We also compute word alignment percentage as in ( Camargo de Souza et al. , 2013 ) and potential BLEU , F 1 , WER , PER scores for S and T. Calculates translation scores obtained according to q(T , R ) using BLEU ( Papineni et al. , 2002 ) , NIST ( Doddington , 2002 ) , or F 1 ( Bic ?ici and Yuret , 2011 b ) for q. ? LIX { 1 , 1 } : Calculates the LIX readability score ( Wikipedia , 2013 ; Bj?rnsson , 1968 ) for S and T. 1 For Task 1.1 , we have additionally used comparative BLEU , NIST , and F 1 scores as additional features , which are obtained by comparing the translations with each other and averaging the result ( Bic ?ici , 2011 ) .
Bracketing Tree Structural Features
We use the parse tree outputs obtained by CCL to derive features based on the bracketing structure .
We derive 5 statistics based on the geometric properties of the parse trees : number of brackets used ( numB ) , depth ( depthB ) , average depth ( avg depthB ) , number of brackets on the right branches over the number of brackets on the left ( R/L ) 2 , average right to left branching over all internal tree nodes ( avg R /L ) .
The ratio of the number of right to left branches shows the degree to which the sentence is right branching or not .
Additionally , we capture the different types of branching present in a given parse tree identified by the number of nodes in each of its children .
Table 1 depicts the parsing output obtained by CCL for the following sentence from WSJ23 3 : Many fund managers argue that now 's the time to buy .
We use Tregex ( Levy and Andrew , 2006 ) for visualizing the output parse trees presented on the left .
The bracketing structure statistics and features are given on the right hand side .
The root node of each tree structural feature represents the number of times that feature is present in the parsing output of a document .
RTM in the Quality Estimation Task
We participate in all of the four challenges of the quality estimation task ( QET ) ( Bojar et al. , 2014 ) , which include English to Spanish ( en-es ) , Spanish to English ( es-en ) , English to German ( ende ) , and German to English ( de-en ) translation directions .
There are two main categories of challenges : sentence - level prediction ( Task 1 . * ) and 1 LIX = A B + C 100 A , where A is the number of words , C is words longer than 6 characters , B is words that start or end with any of " . " , " : " , " ! " , " ? " similar to ( Hagstr ? m , 2012 ) . 2
For nodes with uneven number of children , the nodes in the odd child contribute to the right branches .
3 Wall Street Journal ( WSJ ) corpus section 23 , distributed with Penn Treebank version 3 ( Marcus et al. , 1993 ) . word- level prediction ( Task 2 ) .
Task 1.1 is about predicting post-editing effort ( PEE ) , Task 1.2 is about predicting HTER ( human- targeted translation edit rate ) ( Snover et al. , 2006 ) scores of translations , Task 1.3 is about predicting post-editing time ( PET ) , and Task 2 is about binary , ternary , or multi-class classification of word-level quality .
For each task , we develop individual RTM models using the parallel corpora and the LM corpora distributed by the translation task ( WMT14 ) ( Bojar et al. , 2014 ) and the LM corpora provided by LDC for English ( Parker et al. , 2011 ) and Spanish ( ?ngelo Mendonc ?a , 2011 ) 4 .
The parallel corpora contain 4.5 M sentences for de-en with 110M words for de and 116 M words for en and 15.1 M sentences for en-es with 412 M words for en and 462 M words for es .
We do not use any resources provided by QET including data , software , or baseline features .
Instance selection for the training set and the language model ( LM ) corpus is handled by parallel FDA5 , whose parameters are optimized for each translation task .
LM are trained using SRILM ( Stolcke , 2002 ) .
We tokenize and true-case all of the corpora .
The true-caser is trained on all of the available training corpus using Moses ( Koehn et al. , 2007 ) .
Table 2 lists the number of sentences in the training and test sets for each task .
For each task or subtask , we select 375 thousand ( K ) training instances from the available parallel training corpora as interpretants for the individual RTM models using parallel FDA5 .
We add the selected training set to the 3 million ( M ) sentences selected from the available monolingual corpora for each LM corpus .
The statistics of the training data selected by and used as interpretants in the 4 English Gigaword 5th , Spanish Gigaword 3rd edition .
RTM models is given in Table 3 .
The details of instance selection with parallel FDA5 are provided in .
Task S T Task 1.1 ( en-es ) 6.2 6.9 Task 1.1 ( es-en ) 7.9 7.4 Task 1.1 ( en-de ) 6.1 6 Task 1.1 ( de-en ) 6.9 6.4 Task 1.2 ( en-es ) 6.1 6.7 Task 1.3 ( en-es ) 6.2 6.8 Task 2 ( en-es ) 6.2 6.8 Task 2 ( es-en ) 7.5 7 Task 2 ( en-de ) 5.9 5.9 Task 2 ( de-en ) 6.3 6.8 Table 3 : Number of words in I ( in millions ) selected for each task ( S for source , T for target ) .
Learning Models and Optimization :
We use ridge regression ( RR ) , support vector regression ( SVR ) with RBF ( radial basis functions ) kernel ( Smola and Sch?lkopf , 2004 ) , and ex- tremely randomized trees ( TREE ) ( Geurts et al. , 2006 ) as the learning models .
TREE is an ensemble learning method over randomized decision trees .
These models learn a regression function using the features to estimate a numerical target value .
We also use these learning models after a feature subset selection with recursive feature elimination ( RFE ) ( Guyon et al. , 2002 ) or a dimensionality reduction and mapping step using partial least squares ( PLS ) ( Specia et al. , 2009 ) , both of which are described in .
We optimize the learning parameters , the number of features to select , the number of dimensions used for PLS , and the parameters for parallel FDA5 .
More detailed descriptions of the optimization processes are given in .
We optimize the learning parameters by selecting ?
close to the standard deviation of the noise in the training set ( Bic ?ici , 2013 ) since the optimal value for ? is shown to have linear dependence to the noise level for different noise models ( Smola et al. , 1998 ) .
We select the top 2 systems according to their performance on the training set .
For Task 2 , we use both Global Linear Models ( GLM ) ( Collins , 2002 ) and GLM with dynamic learning ( GLMd ) we developed last year ( Bic ?ici , 2013 ) .
GLM relies on Viterbi decoding , perceptron learning , and flexible feature definitions .
GLMd extends the GLM framework by parallel perceptron training ( McDonald et al. , 2010 ) and dynamic learning with adaptive weight updates in the perceptron learning algorithm : w = w + ? (?( x i , y i ) ? ?( x i , ? ) ) , ( 1 ) where ?
returns a global representation for instance i and the weights are updated by ? , which dynamically decays the amount of the change during weight updates at later stages and prevents large fluctuations with updates .
Training Results
We use mean absolute error ( MAE ) , relative absolute error ( RAE ) , root mean squared error ( RMSE ) , and correlation ( r ) to evaluate ( Bic ?ici , 2013 ) . DeltaAvg ( Callison - Burch et al. , 2012 ) calculates the average quality difference between the top n ?
1 quartiles and the overall quality for the test set .
Table 4 provides the training results .
Test Results Task 1.1 : Predicting the Post-Editing Effort for Sentence Translations :
Task 1.1 is about predicting post-editing effort ( PEE ) and their ranking .
The results on the test set are given in Table 5 where QuEst ( Shah et al. , 2013 ) SVR lists the baseline system results .
Rank lists the overall ranking in the task out of about 10 submissions .
We obtain the rankings by sorting according to the predicted scores and randomly assigning ranks in case of ties .
RTMs with SVR PLS learning is able to achieve the top rank in this task .
Task 1.2 : Predicting HTER of Sentence Translations
Task 1.2 is about predicting HTER ( human- targeted translation edit rate ) ( Snover et al. , 2006 ) , where case insensitive translation edit rate ( TER ) scores obtained by TERp ( Snover et al. , 2009 ) and their ranking .
We derive features over sentences that are true-cased .
The results on the test set are given in Table 6 where the ranks are out of about 11 submissions .
We are also able to achieve the top ranking in this task .
RTMs Across Tasks and Years
We compare the difficulty of tasks according to the RAE levels achieved .
RAE measures the error relative to the error when predicting the actual mean .
A high RAE is an indicator that the task is hard .
In Table 9 , we list the test results including the RAE obtained for different tasks and subtasks including RTM results at QET13 ( Bic ?ici , 2013 ) .
The best results are obtained for Task 1.3 , which shows that we can only reduce the error with respect to knowing and predicting the mean by about 28 % .
Conclusion Referential translation machines achieve top performance in automatic , accurate , and language independent prediction of sentence - level and wordlevel statistical machine translation ( SMT ) quality .
RTMs remove the need to access any SMT system specific information or prior knowledge of the training data or models used when generating the translations .
en-es ) 3816 600 Task 1.1 ( es-en ) 1050 450 Task 1.1 ( en-de ) 1400 600 Task 1.1 ( de-en ) 1050 450 Task 1.2 ( en-es )
Number of sentences in different tasks .
