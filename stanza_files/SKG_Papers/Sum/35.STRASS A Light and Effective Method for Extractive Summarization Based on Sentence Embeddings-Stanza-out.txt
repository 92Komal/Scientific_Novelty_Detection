title
STRASS : A Light and Effective Method for Extractive Summarization Based on Sentence Embeddings
abstract
This paper introduces STRASS : Summarization by TRAnsformation Selection and Scoring .
It is an extractive text summarization method which leverages the semantic information in existing sentence embedding spaces .
Our method creates an extractive summary by selecting the sentences with the closest embeddings to the document embedding .
The model learns a transformation of the document embedding to minimize the similarity between the extractive summary and the ground truth summary .
As the transformation is only composed of a dense layer , the training can be done on CPU , therefore , inexpensive .
Moreover , inference time is short and linear according to the number of sentences .
As a second contribution , we introduce the French CASS dataset , composed of judgments from the French Court of cassation and their corresponding summaries .
On this dataset , our results show that our method performs similarly to the state of the art extractive methods with effective training and inferring time .
Introduction Summarization remains a field of interest as numerous industries are faced with a growing amount of textual data that they need to process .
Creating summary by hand is a costly and timedemanding task , thus automatic methods to generate them are necessary .
There are two ways of summarizing a document : abstractive and extractive summarization .
In abstractive summarization , the goal is to create new textual elements to summarize the text .
Summarization can be modeled as a sequenceto-sequence problem .
For instance , Rush et al . ( 2015 ) tried to generate a headline from an article .
However , when the system generates longer summaries , redundancy can be a problem .
See et al. ( 2017 ) introduce a pointer - generator model ( PGN ) that generates summaries by copying words from the text or generating new words .
Moreover , they added a coverage loss as they noticed that other models made repetitions on long summaries .
Even if it provides state of the art results , the PGN is slow to learn and generate .
Paulus et al. ( 2017 ) added a layer of reinforcement learning on an encoder-decoder architecture but their results can present fluency issues .
In extractive summarization , the goal is to extract part of the text to create a summary .
There are two standard ways to do that : a sequence labeling task , where the goal is to select the sentences labeled as being part of the summary , and a ranking task , where the most salient sentences are ranked first .
It is hard to find datasets for these tasks as most summaries written by humans are abstractive .
Nallapati et al. ( 2016a ) introduce a way to train an extractive summarization model without labels by applying a Recurrent Neural Network ( RNN ) and using a greedy matching approach based on ROUGE .
Recently , Narayan et al. ( 2018 b ) combined reinforcement learning ( to extract sentences ) and an encoder-decoder architecture ( to select the sentences ) .
Some models combine extractive and abstractive summarization , using an extractor to select sentences and then an abstractor to rewrite them ( Chen and Bansal , 2018 ; Cao et al. , 2018 ; Hsu et al. , 2018 ) .
They are generally faster than models using only abstractors as they filter the input while maintaining or even improving the quality of the summaries .
This paper presents two main contributions .
First , we propose an inexpensive , scalable , CPUtrainable and efficient method of extractive text summarization based on the use of sentence embeddings .
Our idea is that similar embeddings are semantically similar , and so by looking at the proximity of the embeddings it is possible to rank the sentences .
Secondly , we introduce the French CASS dataset ( section 4.1 ) , composed of 129,445 judgments with their corresponding summaries .
Related Work
In our model , STRASS , it is possible to use an embedding function 1 trained with state of the art methods .
Word2vec is a classical method used to transform a word into a vector ( Mikolov et al. , 2013a ) .
Methods like word2vec keep information about semantics ( Mikolov et al. , 2013 b ) . Sent2vec ( Pagliardini et al. , 2017 ) create embedding of sentences .
It has state - of - the - art results on datasets for unsupervised sentence similarity evaluation .
EmbedRank ( Bennani - Smires et al. , 2018 ) applies sent2vec to extract keyphrases from a document in an unsupervised fashion .
It hypothesizes that keyphrases that have an embedding close to the embedding of the entire document should represent this document well .
We adapt this idea to select sentences for summaries ( section 4.2 ) .
We suppose that sentences close to the document share some meaning with the document and are sentences that summarize well the text .
We go further by proposing a supervised method where we learn a transformation of the document embedding to an embedding of the same dimension , but closer to sentences that summarize the text .
Model
The aim is to construct an extractive summary .
Our approach , STRASS , uses embeddings to select a subset of sentences from a document .
We apply sent2vec to the document , to the sentences of the document , and to the summary .
We suppose that , if we have a document with an embedding 2 d and a set S with all the embeddings of the sentences of the document , and a reference summary with an embedding ref sum , there is a subset of sentences E S ?
S forming the reference summary .
Our target is to find an affine function f ( ? ) : IR n ?
IR n , such that : sim(s , f ( d ) ) ?
t if s ?
E S sim(s , f ( d ) ) < t , otherwise
Where t is a threshold , and sim is a similarity function between two embeddings .
The training of the model is based on four main steps ( shown in Figure 1 ) : ? ( 1 ) Transform the document embedding by applying an affine function learned by a neural network ( section 3.1 ) ; ?
( 2 ) Extract a subset of sentences to form a summary ( section 3.2 ) ; ?
( 3 ) Approximate the embedding of the extractive summary formed by the selected sentences ( section 3.3 ) ; ?
( 4 ) Score the embedding of the resulting summary approximation with respect to the embedding of the real summary ( section 3.4 ) .
To generate the summary , only the first two steps are used .
The selected sentences are the output .
Approximation and scoring are only necessary during the training phase when computing loss function .
Transformation
To learn an affine function in the embedding space , the model uses a simple neural network .
A single fully - connected feed -forward layer .
f ( ? ) : IR n ? IR n : f ( d ) = W ? d + b with W the weight matrix of the hidden layer and b the bias vector .
Optimization is only conducted on these two elements .
Sentence Extraction Inspired by EmbedRank ( Bennani - Smires et al. , 2018 ) our proposed approach is based on embeddings similarities .
Instead of selecting the top n elements , our approach uses a threshold .
All the sentences with a score above this threshold are selected .
As in Pagliardini et al. ( 2017 ) , our similarity score is the cosine similarity .
Selection of sentences is the first element : sel(s , d , S , t ) = sigmoid ( ncos + ( s , f ( d ) , S ) ? t ) with sigmoid the sigmoid function and ncos + a normalized cosine similarity explained in section 3.5 .
A sigmoid function is used instead of a hard threshold as all the functions need to be differentiable to make the back - propagation .
Sel outputs a number between 0 and 1 .
1 indicates that a sentence should be selected and 0 that it should not .
With this function , we select a subset of sentences from the text that forms our generated summary .
Approximation
As we want to compare the embedding of our generated extractive summary and the embedding of the reference summary , the model approximates the embedding of the proposed summary .
As the system uses sent2vec , the approximation is the average of the sentences weighted by the number of words in each sentence .
We have to apply this approximation to the sentences extracted with sel , which compose our generated summary .
The approximation is : app ( d , S , t ) = s?S s ? nb w ( s ) ? sel(s , d , S , t ) where , nb w ( s ) is the number of words in the sentence corresponding to the embedding s.
Scoring
The quality of our generated summary is scored by comparing its embedding with the reference summary embedding .
Here , the compression ratio is added to the score in order to force the model to output shorter summaries .
The compression ratio is the number of words in the summary divided by the number of words in the document .
loss = ? ? nb w( gen sum ) nb w ( d ) + ( 1 ? ? ) ? cos sim( gen sum , ref sum ) with ?
a trade- off between the similarity and the compression ratio , cos sim ( x , y ) , x , y ?
IR n the cosine similarity and gen sum = app ( d , S , t ) .
The user should note that ? is also useful to change the trade - off between the proximity of the summaries and the length of the generated one .
A higher ? results in a shorter summary .
Normalization
To use a single selection threshold on all our documents , a normalization is applied on the similarities to have the same distribution for the similarities on all the documents .
First , we transform the cosine similarity from ( IR n , IR n ) ? [ ? 1 , 1 ] to ( IR n , IR n ) ? [ 0 , 1 ] : cos + ( x , y ) = cos sim ( x , y ) + 1 2 Then as in Mori and Sasaki ( 2002 ) the function is reduced and centered in 0.5 : rcos + ( x , y , X ) = 0.5 + cos + ( x , y ) ? ? x k ?X ( cos + ( x k , y ) ) ?
x k ?X ( cos + ( x k , y ) ) where y is an embedding , X is a set of embeddings , x ? X , ? and ? are the mean and standard deviation .
A threshold is applied to select the closest sentences on this normalized cosine similarity .
In order to always select at least one sentence , we restricted our similarity measure in ( ? , 1 ] , where , for each document , the closest sentence has a similarity of 1 : ncos + ( x , y , X ) = rcos + ( x , y , X ) max x k ?X ( rcos + ( x k , y , X ) )
Experiments 4.1 Datasets
To evaluate our approach , two datasets were used with different intrinsic document and summary structures which are presented in this section .
More detailed information is available in the appendices ( table 3 , figure 3 and figure 4 ) .
We introduce a new dataset for text summarization , the CASS dataset 3 .
This dataset is composed of 129,445 judgments given by the French Court of cassation between 1842 and 2016 and their summaries ( one summary by original document ) .
Those summaries are written by lawyers and explain in a short way the main points of the judgments .
As multiple lawyers have written summaries , there are different types of summary ranging from purely extractive to purely abstractive .
This dataset is maintained up - to- date by the French Government and new data are regularly added .
Our version of the dataset is composed of 129,445 judgements .
The CNN / DailyMail dataset ( Hermann et al. , 2015 ; Nallapati et al. , 2016 b ) is composed of 312,084 couples containing a news article and its highlights .
The highlights show the key points of an article .
We use the split created by Nallapati et al . ( 2016 b ) and refined by See et al . ( 2017 ) .
Baseline
An unsupervised version of our approach is to use the document embedding as an approximation for the position in the embedding space used to select the sentences of the summary .
It is the application of EmbedRank ( Bennani - Smires et al. , 2018 ) on the extractive summarization task .
This approach is used as a baseline for our model
Oracles
We introduce two oracles .
Even if these models do not output the best possible results for extractive summarization , they show good results .
The first model , called Oracle , is the same as the baseline , but instead of taking the document embedding , the model takes the embedding of the summary and then extracts the closest sentences .
The second model , called Oraclesent , extracts the closest sentence to each sentence of the summary .
This is an adaptation of the idea that Nallapati et al . ( 2016 a ) and Chen and Bansal ( 2018 ) used to create their reference extractive summaries .
Evaluation details ROUGE ( Lin , 2004 ) is a widely used set of metrics to evaluate summaries .
The three main metrics in this set are ROUGE - 1 and ROUGE - 2 , which compare the 1 - grams and 2 - grams of the generated and reference summaries , and ROUGE -L , which measures the longest sub-sequence between the two summaries .
ROUGE is the standard measure for summarization , especially because more sophisticated ones like METEOR ( Denkowski and Lavie , 2014 ) require resources not available for many languages .
Our results are compared with the unsupervised system TextRank ( Mihalcea and Tarau , 2004 ; Barrios et al. , 2016 ) and with the supervised systems Pointer-Generator Network ( See et al. , 2017 ) and rnn ? ext ( Chen and Bansal , 2018 ) .
The Pointer-Generator Network is an abstractive model and rnn ? ext is extractive .
For all datasets , a sent2vec embedding of dimension 700 was trained on the training split .
To choose the hyperparameters , a grid search was computed on the validation set .
Then the set of hyperparameters with the highest ROUGE -L were used on the test set .
The selected hyperparameters are available in appendix A.3 .
Results Tables 1 and 2 present the results for the CASS and the CNN / DailyMail datasets .
As expected , the supervised model performs better than the unsupervised one .
On the three datasets , the supervision has improved the score in terms of ROUGE - 2 and ROUGE -L .
In the same way , our oracles are always better than the learned models , proving that there is still room for improvements .
Information concerning the length of the generated summaries Results of different models on the CNN / DailyMail .
The Lead3 - PGN is the lead 3 score as reported in ( See et al. , 2017 ) .
The scores with * are taken from the corresponding publications .
F1 is the F-measure .
R1 , R2 and RL stand for ROUGE1 , ROUGE2 , and ROUGE -L .
On the French CASS dataset , our method performs similarly to the rnn ? ext .
The PGN performs a bit better ( + 0.13 ROUGE -1 , +0.38 ROUGE - 2 , + 0.81 ROUGE -L compared to the other models ) , which could be linked to the fact that it can select elements smaller than sentences .
On the CNN / DailyMail dataset , our supervised model performs poorly .
We observe a significant difference ( + 2.66 ROUGE - 1 , +3.38 ROUGE - 2 , and + 4.00 ROUGE -L ) between the two oracles .
It could be explained by the fact that the summaries are multi-topic and our models do not handle such case .
Therefore , as our loss does n't look at the diversity , STRASS may miss some topics in the generated summary .
A second limitation of our approach is that our model does n't consider the position of the sentences in the summary , information which presents a high relevance in the CNN - Dailymail dataset .
STRASS has some advantages .
First , it is trainable on CPU and thus light to train and run .
Indeed , the neural network in our model is only composed of one dense layer .
The most recent advances in text summarization with neural networks are all based on deep neural networks requiring GPU to be learned efficiently .
Second , the method is scalable .
The processing time is linear with the number of lines of the documents ( Figure 2 ) .
The model is fast at inference time as sent2vec embeddings are fast to generate .
Our model generated the 13,095 summaries of the CASS dataset in less than 3 minutes on an i7- 8550U CPU .
Conclusion and Perspectives
To conclude , we proposed here a simple , costeffective and scalable extractive summarization method .
STRASS creates an extractive summary by selecting the sentences with the closest embeddings to the projected document embedding .
The model learns a transformation of the document embedding to maximize the similarity between the extractive summary and the ground truth summary .
We showed that our approach obtains similar results than other extractive methods in an effective way .
There are several perspectives to our work .
First , we would like to use the sentence embeddings as an input of our model , as this should increase the accuracy .
Additionally , we want to investigate the effect of using other sent2vec embedding spaces ( especially more generalist ones ) or other embedding functions like doc2vec ( Le and Mikolov , 2014 ) or BERT ( Devlin et al. , 2019 ) .
For now , we have only worked on sentences but this model can use any embeddings , so we could try to build summaries with smaller textual elements than sentences such as key - phrases , noun phrases ...
Likewise , to apply our model on multitopic texts , we could try to create clusters of sentences , where each cluster is a topic , and then extract one sentence by cluster .
Moreover , currently , the loss of the system is only composed of the proximity and the compression ratio .
Other meaningful metrics for document summarization such as diversity and representativity could be added into the loss .
Especially , submodular functions could ( 1 ) allow to obtain near-optimal results and ( 2 ) allow to include elements like diversity ( Lin and Bilmes , 2011 ) .
Another information we could add is the position of the sentences in the documents like Narayan et al . ( 2018a ) .
Finally , the approach could be extended to query - based summarization ( V.V. MuraliKrishna et al. , 2013 ) .
One could use the embedding function on the query and take the sentences that are the closest to the embedding of the query .
