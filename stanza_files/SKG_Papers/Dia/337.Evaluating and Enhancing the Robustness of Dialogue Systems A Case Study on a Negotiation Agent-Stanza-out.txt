title
Evaluating and Enhancing the Robustness of Dialogue Systems : A Case Study on a Negotiation Agent
abstract
Recent research has demonstrated that goaloriented dialogue agents trained on large datasets can achieve striking performance when interacting with human users .
In real world applications , however , it is important to ensure that the agent performs smoothly interacting with not only regular users but also those malicious ones who would attack the system through interactions in order to achieve goals for their own advantage .
In this paper , we develop algorithms to evaluate the robustness of a dialogue agent by carefully designed attacks using adversarial agents .
Those attacks are performed in both black - box and whitebox settings .
Furthermore , we demonstrate that adversarial training using our attacks can significantly improve the robustness of a goaloriented dialogue system .
On a case-study of the negotiation agent developed by ( Lewis et al. , 2017 ) , our attacks reduced the average advantage of rewards between the attacker and the trained RL - based agent from 2.68 to ?5.76 on a scale from ?10 to 10 for randomized goals .
Moreover , with the proposed adversarial training , we are able to improve the robustness of negotiation agents by 1.5 points on average against all our attacks .
Introduction Crafting an intelligent agent to communicate in the dialogue system using natural languages has been a long-standing problem in AI .
It requires designing an agent to understand , plan and generate natural language to achieve different goals such as question - answering , cooperation , negotiation etc ( Vinyals and Le , 2015 ; Serban et al. , 2016 ; Dhingra et al. , 2016 ; Serban et al. , 2016 ) .
Inspired by recent successes in deep neural networks , ( Lewis et al. , 2017 ) has recently developed an end-to - end learning framework to train a recurrent neural network ( RNN ) - based negotiation agent in goal-oriented dialogue systems .
This NNbased technique has been identified as one of the state - of - the -arts and has been applied to several other tasks ( Bahdanau et al. , 2014 ; Luong et al. , 2015 ; Rush et al. , 2015 ; Chan et al. , 2016 ) .
Although NN - based dialogue agents have shown convincing performance on several tasks , it is not clear whether they also work well when facing malicious users or agents .
To answer this question , we study how to evaluate the robustness of a goal-oriented dialogue system .
For simplicity , we consider a goal-oriented agent A that aims to maximize some score , and define the " robustness " of A as the worst - case performance under any feasible agent A .
We also call A an adversarial agent that tries to " attack " A since it aims to minimize A's score .
The problem of evaluating the robustness of A can then be solved by designing an adversarial agent to attack A .
For instance , considering a negotiation agent that can decide when to make a deal , we say the agent is not robust if an adversarial agent can fool the target agent to make a deal with significant lower scores .
Ideally , before deploying an agent into real systems , we need to ensure it performs smoothly under strong adversarial attacks .
The concept of adversarial agent is related to recent studies on adversarial examples for image classifiers - it has been shown that a carefully designed small perturbation can easily make neural networks mis-classify ( Goodfellow et al. , 2014 ; Szegedy et al. , 2013 ; Moosavi Dezfooli et al. , 2016 ; Carlini and Wagner , 2017 ; Cheng et al. , 2019 ) , and several recent works has extended these attacks to natural language processing models such as sentiment analysis ( Gao et al. , 2018 ; Yang et al. , 2018 ) and machine translation ( Ebrahimi et al. , 2018 ; .
However , all of the previous work consider attacking a static model , where except input im-age / sentence there is no interaction between the attacker and the target model .
Instead , we investigate a much more challenging problem , where there can be many turns of interactions between adversarial and target agents .
This leads to several difficulties including 1 ) How to lead the target agent to a bad state and 2 ) how to force the target agent to make a wrong decision .
Therefore , previous methods for attacking static models cannot be directly applied .
In this paper , we tackle the aforementioned challenges by proposing several novel ways to design an adversarial agent to evaluate the robustness of goal-oriented dialogue systems .
We highlight our major contributions as follows : ?
We propose a framework to generate adversarial agents in both black - box and white - box settings .
To the best of our knowledge , this is the first work on crafting adversarial agents instead of adversarial examples in an interactive dialogue system .
?
We conduct a series of studies on the negotiation agent proposed in ( Lewis et al. , 2017 ) .
We demonstrate that the proposed strategies can successfully attack existing negotiation agents to significantly reduce their average score .
For instance , our attacks can reduce the average advantage of the RL - based negotiation agent from 2.68 to ?5.76 on random problems with the total value of 10 . ?
We also show that through the proposed iterative adversarial training procedure , we could significantly improve the robustness of a goal-oriented agent against various attacks .
2 Related work
Goal-oriented dialogue agent Goal-oriented dialogue systems aim at building a conversation model that is capable of accomplishing tasks through the interactions with human using natural language Eric and Manning , 2017 ; Wen et al. , 2016 ; Wei et al. , 2018 ; Bordes et al. , 2016 ) .
Traditional approaches to learn a goal-oriented intelligent agent relies heavily on dialogue states annotated in the training data ( Wen et al. , 2016 ; Henderson et al. , 2014 ) .
The use of state annotations allows a cleaner separation of the reasoning and natural language aspects of dialogues .
However , it is very expensive to annotate every state in a large amount of training data .
( Bordes et al. , 2016 ) explores end-to - end goal orientated dialogue with a supervised model .
And ( He et al. , 2017 ) uses task -specific rules to combine the task input and dialogue history into a more structured state representation .
Recently , reinforcement learning has been widely used in dialogue systems to increase the agent versatility ( Mordatch and Abbeel , 2017 ) and improve the agent 's performance in goal-oriented tasks such as cooperative bot-bot dialogues ( Das et al. , 2017 ) and negotiation tasks ( Lewis et al. , 2017 ) .
Adversarial examples in NLP applications Algorithms have been proposed to craft adversarial sentences in NLP applications .
( Papernot et al. , 2016 ) uses Fast Gradient Sign method to generate adversarial example on RNN / LSTM based model .
learns the importance of words by deleting them in sentiment analysis task and then use reinforcement learning to locate such words .
( Samanta and Mehta , 2017 ) and generate adversarial sequences by inserting or replacing existing words with typos and synonyms .
( Gao et al. , 2018 ) aims to attack sentiment classification models in a blackbox setting .
It develops some scoring functions to find the most important words to modify .
( Jia and Liang , 2017 ) aims to fool the SQuAD reading comprehension system by adding crafted sentences .
( Yang et al. , 2018 ) proposes a greedy algorithm to swap the word / character and uses a Gumbel softmax function to reduce the computation .
( Ebrahimi et al. , 2018 ) aims to generate adversarial examples on character CNN model in machine translation problem by using Jacobian matrix to determine which word / character should be replaced or deleted .
( Zhao et al. , 2017 ) generated natural adversarial example using Generative Adversarial Networks ( GANs ) .
proposed a framework to conduct non-overlapping and targeted keyword attack on seq2seq model .
All the above-mentioned work focus on the static setting , i.e. , the input does not depend on the model 's output .
However , in our work , one agent 's input depends on the other agent 's output , which makes the input undecidable in the beginning .
Therefore , an adversarial sentence or example is not enough to conduct attack in dialogue sys-tems .
Instead , for the first time , we propose novel ways to construct a adversarial agent , which can bait the target agent to step to a wrong state and make a bad decision .
Defense against adversarial examples
Many defense algorithms have been proposed recently to enhance the robustness of classification models .
Among them , adversarial training ( Madry et al. , 2018 ; Goodfellow et al. , 2014 ) has become one of the most successful methods , which uses both clean and adversarial examples to train a robust model .
( Wong and Kolter , 2018 ) proposed another kind of adversarial training to improve the verification lower bound of neural networks ; combines the idea of generative adversarial network ( GAN ) and adversarial training to further boost the robustness on test images .
Another promising way to enhance robustness is by adding randomness to the model .
( Liu et al. , 2018 ) shows adding randomness to both input and intermediate layers of neural networks can improve robustness ;
Ye and Zhu , 2018 ) show that combining Bayesian neural network ( with randomized weights ) and adversarial training can achieve state - of - the - art adversarial error under attacks .
However , all the existing defense methods only work for static models ( usually for classification tasks ) .
In this paper , we propose an adversarial training algorithm for an agent using RL with an " adversarial agent " .
This is to our knowledge the first algorithm for improving the robustness of an agent .
Competitive Negotiation Dialogues
We use the negotiation agent developed in ( Lewis et al. , 2017 ) as the running example in this paper .
Note that our algorithm can be generalized to other goal-oriented dialogue systems by designing a different scoring function according to the task .
In a competitive negotiation dialogue setting , two agents are negotiating with each other over a set of items .
We adopt the same setting as ( Lewis et al. , 2017 ) , in which case items can be categorized into either a ball , a hat or a book .
Each agent is given the goal of the conversation ( denoted by g ) , which contains the initial values and the quantities of each of the three items .
Agents then negotiate to maximize the total value of their possessed items .
Agents are allowed to negotiate up to a maximum of 10 turns .
Scores will be granted to agents based on the total value of the items if they reach an agreement .
If they choose not to agree , 0 score will be granted to both agents .
A competitive negotiation dialogue example played by human and agent could be found in Table 1 .
We assess the robustness of a trained end-toend negotiation agent used in ( Lewis et al. , 2017 ) .
In the negotiation chatbot setting , agents first chat using natural language and then make a selection based on what they have chatted with .
We refer to the first phase as negotiation phase and the second phase as decision phase .
In the negotiation phase , conversation response at time t , x t is generated word by word based on chat history x 0..t? 1 and the goal of the conversation g.
The conversation model is controlled by a speaking module ? and tokens are randomly sampled from probability distribution p ? .
This process continues recursively until an end-of-sentence token EOS or selection token selection token is generated .
When EOS is encountered , the turn terminates and the conversation is handled to another agent .
When selection is encountered , the negotiation phase terminates and the negotiation will reach the decision phase .
x t ? p ? ( x t |x 0...t? 1 , g ) ( 1 )
In the decision phase , both agents will output a decision o based on a decision module probability distribution p ? . Agents ' decisions will be based on conversation history x 0 ... T up to the current time step T and the goal of the conversation g.
Here O is a set of all legitimate selections , which is defined to be a space of where each selection must be greater or equal than 0 and the sum of selections for the same item must be equal to its original quantity .
Since we only have a few items , it is possible to enumerate all the possibilities to get the set O. o * = arg max o? O i p ? ( o i |x 0 ... T , g ) ( 2 ) Agents will then collect rewards ( i.e. scores ) from the environment ( which will be 0 if they output conflicted decisions , e.g. the total number of items are different from the initial amount ) .
It is important to keep the agent producing sentences that are correct both grammatically and semantically and keeping them competitive at the same time .
Therefore , a common strategy is to train agents using supervised learning to learn natural language and to use reinforcement learning to optimize models ' performance using on goaloriented learning .
We measure two statistics score and agreement .
score is the average score for each agent ( 0 - 10 ) .
agreement is the percentage of dialogues where both agents agreed on the same decision .
To measure the extent of success of our adversarial agent , we use advantage which is easy to compute directly from adversarial agent score minus target agent score , i.e .
S adv ?
S ori .
Proposed Black - box Attack Algorithms
We first build our adversarial agent in black - box setting .
Black - box setting in goal-oriented dialogue system is defined where the target agent is unknown to the attacker , but it is possible to make queries to obtain the final decision made by the target agent .
To be noted , our aim is to test the robustness of the target agent .
Therefore , in the decision phase we let adversarial agent chooses the complementary of target agent 's choice , so those two agents will always reach agreement .
The adversarial agent thus only has the speaking module and there is no decision network needed .
In this section we proposed two adversarial agents in the black - box setting .
Reinforcement learning attack Inspired by the procedure of goal- based reinforcement learning , we modified the reward function of our adversarial agent with the advantage instead of the score he got : r adv = S adv ?
S ori ( 3 ) where S adv and S ori are adversarial agent score and target agent score respectively .
After a complete dialogue has been generated , we update ad-versarial agent 's parameters based on the outcome of the negotiation .
To learn the adversarial agent 's speaking network by reinforcement learning , we denote the subset of tokens generated by the adversarial agent as X adv .
In the completed dialogue , ? is the discount factor that rewards actions at the end of the dialogue more strongly , and ? is a running average of completed dialogue rewards so far .
We define the future reward R for an action x t ?
X adv as follows : R( x t ) = xt ?
X adv ? T ?t ( r adv ? ? ) . ( 4 ) Then by a standard policy gradient algorithm , we could train our adversarial agent .
Note that this attack does n't require the knowledge on the target agent 's structure / weights , and the experimental results demonstrate significant attack performance over regular agents .
Transfer attack Transfer attack is a popular idea for attacking black - box models ( Papernot et al. , 2017 ) .
In dialogue systems , we can also consider the following transfer process : a sentence that leads to low r adv in one dialogue might also lead to similar results in another dialogue .
To implement this idea , we first collect a list of last sentences spoken by the adversarial agent from dialogues with high reward , denoted by L .
In the conversations , we let our adversarial agent and the target agent negotiate n turns using the regular speaking module , and then plug in one sentence in L at the ( n + 1 ) - th turn .
Our experimental results show that this transfer attack does not work well in practice .
Proposed White - box Attack Algorithms
In the white - box setting , we assume that the attacker can access every part of the target agent , including the weights of both speaking and decision models , and the decision output in every dialogue .
Similar to the black - box attacks , we let the adversarial agent choose the complementary of target agent 's choices to ensure 100 % agreement .
By exploiting the knowledge of the target agent 's model , white - box attacks can achieve much higher advantage than black - box attacks .
Force target agent to select at a fixed turn
To begin with , we consider a simplified strategy where we first let our adversarial agent and the target agent negotiate n turns using regular speaking module .
For the ( n + 1 ) - th turn , we propose the following two ways to modify the output of regular speaking module to maximize the rewards of adversarial agent .
Reactive attack
The first strategy is that the adversarial agent produces a sentence that forces the target agent to say selection .
The conversation will then enter the decision phase .
At the same time , the sentence produced by the adversarial agent should guide the target agent to make a bad selection that would be in favor of the adversarial agent .
We call this method reactive attack .
We formulate this strategy as an optimization problem .
Let x = x tn ... T ?1 be the output sentence generated by adversarial agent in the speaking model after n - th turn .
Specifically , we define x 0 ... T ?1 as all the tokens in the dialogue history before selection . Z r ( x 0 ... T ?1 ) indicates the logit layer outputs for predicting x T based on chat history x 0 ... T ?1 in the speaking model .
Z o ( x 0 ... T ) indicates the logit layer outputs on conversation history x 0 ... T in the decision model .
Because we have a constraint to force the target agent to say the end-of-dialog token selection , we could format this constraint as [ Z r ( x 0 ... T ?1 ) ] k sel ? max i =k sel [ Z r ( x 0 ... T ?1 ) ] i ? 0 ( 5 ) where k sel is the corresponding index of end-ofdialog token selection .
At the same time , the score of output o should be in favor of our adversarial agent .
Assume the original decision output is o , L( x ) = max { [ Z o ( x 0 ... T ) ]
o ?max o? ? [ Z o ( x 0 ... T ) ]
o , ?} ( 6 ) where ? is the set of outputs that score of adversarial agent is greater than target agent i.e. ? = {o ? ?| S adv ( o ) > S ori ( o ) } , and ? ?
0 denotes the confidence margin parameter .
Note that x is a sub-sequence in x 0 ... T , so the right hand side of ( 6 ) is a function of x .
Combining these two equations together , we can get our final objective function : min x L( x ) ( 7 ) s.t. [ Z r ( x 0 ... T ?1 ) ] k sel ? max i =k sel [ Z r ( x 0 ... T ?1 ) ]
i ? 0 Eq ( 7 ) is a discrete optimization problem since x is the sentence produced by adversarial agent .
In this paper , we use a modified version of the greedy algorithm to optimize ( 7 ) .
Although the original algorithm proposed in ( Yang et al. , 2018 ) only considered the unconstrained discrete problem , we show that the following slightly modified version performs well for solving ( 7 ) .
At each iteration , we try to replace each word in x by the special token P AD .
A word that achieves minimal loss after swapping with P AD is then selected as the word to be replaced .
Then we try to replace the selected word with each word in the vocabulary .
For all the trials that satisfy the constraint , we choose the one with minimal loss and conduct the actual change .
We run this procedure iteratively to minimize ( 7 ) .
In the experiments , we only replace two words in x to ensure the fluency and correctness of the adversarial sentences .
Preemptive attack
The other attack strategy is to produce a sentence to guide the target agent to lower its demand in the reply instead of making target agent say endof-dialog token .
And after the reply from target agent , the adversarial agent speaks the end-ofdialogue token to enter the decision phase .
Similar to the reactive attack , adversarial agent 's score should be greater than target agent 's score in the decision phase .
Clearly , this strategy is more challenging than the previous one because there is an intermediate sentence spoken by the target agent before end-of-dialogue .
We call this preemptive attack .
Let x = x tn ... tn T be the output sentence generated by adversarial agent in the speaking model after turn n , where t n is the first word and t n T is the last word of the sentence .
Similarly , we could formally turn the intuition into optimization problem as follows : L( x ) = max { [ Z o ( x 0 ... T ) ]
o ?max o? ? [ Z o ( x 0 ... T ) ]
o , ?}
( 8 ) Since we do not need to force target agent to say end-of-dialogue , the problem becomes an unconstrained discrete optimization problem .
We then ( Yang et al. , 2018 ) to solve it .
Force target agent to select at arbitrary turn
While we could let our adversarial agent and the target agent negotiate n turns , it is still unknown which n should be chosen to get the best performance .
In other words , we aim to not only know what to say but also when to say to fool the target agent .
We propose two strategies to force target agent to make bad decisions at arbitrary turn .
The details are presented in Algorithm 1 .
When it is the turn for adversarial agent to speak , we first try to apply reactive and preemptive attacks .
If both attacks could n't make the loss L ( ? ) less than 0 , there are two strategies : 1 ) just output the sentence generated by the regular speaking module ( delayed attack ) , and 2 ) conduct transfer attack .
The comparisons can be found in the experiments .
Adversarial Training Adversarial training is a popular method to improve the robustness of machine learning models ( Miyato et al. , 2016 ; Madry et al. , 2018 ) .
In this section , we use the agents designed in the previous sections to improve the robustness of the target agent .
In standard adversarial training for neural network models ( Goodfellow et al. , 2014 ; Jia and Liang , 2017 ) , adversarial examples ( images or sentences ) generated by an attack are added to the training procedure to refine the model .
Since our setting is interactive and there is no fixed data used in selfplay , we should conduct training with adversarial agents instead of adversarial examples .
Moreover , as pointed out by ( Jia and Liang , 2017 ) , training on the examples generated by a single attack will lead to over-fitting to a particular attack , so we should do adversarial training iteratively .
Taking the black - box RL agent as an example , we consider the following min-max formulation : min ? ori { max ? adv S adv ?
S ori } , ( 9 ) where ? ori is the weights for the target agent and ? adv is the weights for the adversarial black - box agent .
We solve ( 9 ) by the following alternating minimization procedure .
At each iteration , we first update the target agent ( ? ori ) using the standard policy gradient algorithm , and then use our RL algorithm in Section 4.1 to update adversarial agent to counter the target model .
We iteratively conduct these updates until convergence .
The experiments show that the adversarial training procedure can improve the robustness not only under RL attack but also under other white - box attacks .
Experimental Results
We perform extensive experiments on evaluating the robustness of the negotiation agents developed in ( Lewis et al. , 2017 ) .
Furthermore , we show that the robustness of negotiation agents can be significantly improved using the proposed adversarial training procedure .
Our codes are publicly available at https://github.com/cmhcbb/
Robustness -of- Dialogue-systems .
Experimental Setup
We use the code released by the authors ( Lewis et al. , 2017 ) and follow their instructions to get the target end-to - end negotiation agents .
More specifically , we first train the model on 5808 dialogues , based on 2236 unique scenarios in supervised way to imitate the actions of human users .
We call this model supervised model ( SV agent ) .
Then we use reinforcement learning to conduct goal- oriented training in order to maximize the agent ' reward .
The second model is called the reinforcement learning model ( RL agent ) .
As a result , when doing selfplay between RL agent and SV agent , we could get RL agent with 5.86 perplexity , 89.57 % agreement and 7.23 average score , while SV agent achieves 5.47 perplexity and 4.55 average score .
These numbers are similar to the numbers reported in ( Lewis et al. , 2017 ) .
To evaluate the robustness of these agents , we conduct all the proposed attacks on both supervised model ( SV agent ) and reinforcement learning model ( RL agent ) .
The successfulness of an attack is measured by average score advantage and positive advantage rate ( PAR ) .
Average score advantage is defined by averaged adversarial agent 's score minus average target agent 's score .
The value is in the region of [ ?10 , 10 ] since the total values are controlled to be 10 for both sides , and a larger advantage indicates a more successful attack .
Also , we define positive advantage rate ( PAR ) as the ratio of dialogues that the adversarial agent gets a higher score than the target agent .
We will see that most attacks developed in this paper will improve both average score advantage and PAR .
Note that this is the first work on attacking a goal-oriented dialogue agent so there is no previous method that could be included in the comparisons .
Results on Black- box Attacks
As introduced in Section 4 , we have two black - box attacks : reinforcement learning attack ( RL attack ) and Transfer attack .
RL Attack .
In the reinforcement learning attack , we use a learning rate of 0.1 , clip gradients above 1.0 , and set the discount factor ? = 0.95 in ( 4 ) .
We train the adversarial agent for 4 epochs on all scenarios .
From Table 2 , we observe that with 100 % agreement rate , our adversarial agent could gain 2.32 score advantage against the RL agent and 4.25 advantage against the SV agent .
Also , our agent achieves a relatively high positive advantage rate at 84.45 % and 69.35 % respectively .
We show some adversarial dialogues played by adversarial agent and target agent in Table 3 .
It shows that RL agent is able to identify the weak point of target agent by saying " take book you get rest " , which could easily let the agent accept the deal and make a bad selection that is inconsistent with the context of dialogue .
Transfer attack .
In transfer attack , we first let our adversarial agent speak the sentence generated by the speaking model with target agent for 3 turns .
If the end-of-dialog token has never been mentioned , in the 4th turn , the adversarial agent speaks the sentence generated by our RL agent .
The detailed results are shown in Table 2 .
We observe that the transfer attack is not successful-only - 0.13 and - 1.189 score advantage are achieved .
We found that transferring sentences between dialogues is not successful because the item values and conversation histories are quite different between dialogues .
Results on White- box Attacks
We conduct the white - box attacks introduced in Section 5 .
Force target agent to select at a fixed turn .
There are two types of algorithms ( reactive attack and preemptive attack ) introduced in Section 5.1 .
The detailed results are shown in Table 2 .
We observe that the reactive attack could achieve better results than black - box method with 5.40 score advantage against SV agent and 4.98 score advantage against RL agent .
On the other hand , preemptive attack is not that successful - it gets 2.81 advantage against SV agent and 0.77 score advantage against RL agent .
Furthermore , we have included some adversarial dialogues played by white - box adversarial agent and target agent in Table 4 .
From these examples , we could see that white - box adversarial agent could generate the adversarial sentences , slightly unnatural however still readable , that could fool the target agent to make terrible decisions .
Force target agent to select at arbitrary turn .
To determine when should we begin the attack , we design combinations of reactive attack , preemptive attack and transfer attack or delayed attack in Section 5.2 .
Here , we conduct experiments to validate the effectiveness of these two attack combinations .
From Adversarial training helps to improve the robustness .
We then try to investigate the robustness of the adversarial trained model .
We found that in the original model , it is easy for an attacker to find a sentence to quickly end the dialogue .
However , after adversarial training , it becomes much harder to find such sentences .
Moreover , although we only conduct adversarial training on black - box RL model , the adversarial trained model still achieves better performance against other white - box attacks .
This indicates that the adversarial trained model could probably detect the slight unnaturalness of those sentences and thus have a better reading comprehension ability .
Conclusion
In this paper , we develop adversarial agents to evaluate the robustness of a goal-oriented dialogue system .
Our experimental results show that the current NN - based models are not robust against our adversarial agents .
Furthermore , by iterative adversarial training using our black - box RL agent , we can significantly improve the robustness of the dialogue system .
Table 1 : 1 Competitive negotiation dialogue generated between agent and human .
Input Human 3 xbook value 2 3 xhat value 1 1xball value 1 Agent 3 xbook value 1 3 xhat value 2 1xball value 1 Human I 'd like the books and the hats .
Agent I will take the books and hats .
Human I need the books and at least one other object .
Agent
Ok , you can have one book and one ball Human
If I can have all books , I can leave you the rest .
Agent Deal Human selection Output Reward Human 3 xhat 1 xball 7/10 Agent 3 xbook 6/10
