title
The SLT -Interactions Parsing System at the CoNLL 2018 Shared Task
abstract
This paper describes our system ( SLT - Interactions ) for the CoNLL 2018 shared task : Multilingual Parsing from Raw Text to Universal Dependencies .
Our system performs three main tasks : word segmentation ( only for few treebanks ) , POS tagging and parsing .
While segmentation is learned separately , we use neural stacking for joint learning of POS tagging and parsing tasks .
For all the tasks , we employ simple neural network architectures that rely on long short - term memory ( LSTM ) networks for learning task - dependent features .
At the basis of our parser , we use an arc-standard algorithm with Swap action for general non-projective parsing .
Additionally , we use neural stacking as a knowledge transfer mechanism for cross-domain parsing of low resource domains .
Our system shows substantial gains against the UDPipe baseline , with an average improvement of 4.18 % in LAS across all languages .
Overall , we are placed at the 12 th position on the official test sets .
Introduction
Our system for the CoNLL 2018 shared task ( Zeman et al. , 2018 ) contains the following modules : word segmentation , part-of-speech ( POS ) tagging and dependency parsing .
In some cases , we also use a transliteration module to transcribe data into Roman form for efficient processing .
?
Segmentation
We mainly use this module to identify word boundaries in certain languages such as Chinese where space is not used as a boundary marker .
?
POS tagging For all the languages , we only focus on universal POS tags while ignoring language specific POS tags and morphological features .
?
Dependency parsing
We use an arc-standard transition system ( Nivre , 2003 ) with an additional Swap action for unrestricted parsing ( Nivre , 2009 ) .
We rely on UDPipe 1.2 ( Straka and Strakov ? , 2017 ) for tokenization for almost all the treebanks except for Chinese and Japanese where we observed that the UDPipe segmentation had an adverse effect on parsing performance as opposed to gold segmentation on the development sets .
Moreover , we also observed that training a separate POS tagger was also beneficial as the UDPipe POS tagger had slightly lower performance in some languages .
However , other than tokenization , we ignored other morphological features predicted by UDPipe and did n't explore their effect on parsing .
Additionally , we use knowledge transfer approaches to enhance the performance of parsers trained on smaller treebanks .
We leverage related treebanks ( other treebanks of the same language ) using neural stacking for learning better cross-domain parsers .
We also trained a generic character - based parsing system for languages that have neither in- domain nor cross-domain training data .
Upon the official evaluation on 82 test sets , our system ( SLT - Interactions ) obtained the 12 th position in the parsing task and achieved an average improvement of 4.18 % in LAS over the UDPipe baseline .
2 System Architecture
Text Processing Given the nature of the shared task , sentence and word segmentation are the two major prerequisite tasks needed for parsing the evaluation data .
For most of the languages , we rely on UDPipe for both sentence segmentation and word segmentation .
However , in few languages such as Chinese and Japanese which do not use white space as explicit word boundary marker , we build our own word segmentation models .
Our segmentation models use a simple neural network classifier that relies on character bidirectional LSTM ( Bi - LSTM ) representations of a focus character to produce a probabilistic distribution over two boundary markers :
Begining of a word and Inside of a word .
The segmentation network is shown in Figure 1 .
The models are trained on the respective training data sets by merging the word forms in each sentence into a sequence of characters .
At inference , the segmentation model relies on sentence segmentation from UDPipe .
We employ an arc-standard transition system ( Nivre , 2003 ) as our parsing algorithm .
A typical transition - based parsing system uses the shiftreduce decoding algorithm to map a parse tree onto a sequence of transitions .
Throughout the decoding process a stack and a queue data structures are maintained .
The queue stores the sequence of raw input , while the stack stores the partially processed input which may be linked with the rest of the words in the queue .
The parse tree is build by consuming the words in the queue from left to right by applying a set of transition actions .
There are three kinds of transition actions that are performed in the parsing process : Shift , Left-Arc , Right - Arc .
Additionally , we use a Swap action which reorders top node in the stack and the top node in the queue for parsing non-projective arcs ( Nivre , 2009 ) .
B LSTM b LSTM b LSTM b LSTM b LSTM b LSTM b LSTM b LSTM f LSTM f LSTM f LSTM f LSTM f LSTM f LSTM f ? ? ? ? ? ? ? ? ? ? ? ? I B I I I B + + + + + + + MLP MLP
At training time , the transition actions are inferred from the gold parse trees and the mapping between the parser state and the transition action is learned using a simple LSTM - based neural networking architecture presented in Goldberg ( 2016 ) .
While training , we use the oracle presented in to restrict the number of Swap actions needed to parse non-projective arcs .
Given that Bi-LSTMs capture global sentential context at any given time step , we use minimal set of features in our parsing model .
At each parser state , we restrict our features to just two top nodes in the stack .
Since Swap action distorts the linear order of word sequence , it renders the LSTM representations irrelevant in case of non-projective sentences .
To capture this distortion , we also use the top most word in the queue as an additional feature .
Joint POS tagging and Parsing Inspired by stack - propagation model of Zhang and Weiss ( 2016 ) , we jointly model POS tagging and parsing using a stack of tagger and parser networks .
The parameters of the tagger network are shared and act as a regularization on the parsing model .
The overall model is trained by minimizing a joint negative log-likelihood loss for both tasks .
Unlike Zhang and Weiss ( 2016 ) , we compute the gradients of the log-loss function simultaneously for each training instance .
While the parser network is updated given the parsing loss only , the tagger network is updated with respect to both tagging and parsing losses .
Both tagger and parser networks comprise of an input layer , a feature layer , and an output layer as shown in Figure 2 . Following Zhang and Weiss ( 2016 ) , we refer to this model as stack - prop .
Tagger network :
The input layer of the tagger encodes each input word in a sentence by concatenating a pre-trained word embedding with its character embedding given by a character Bi-LSTM .
In the feature layer , the concatenated word and character representations are passed through two stacked Bi-LSTMs to generate a sequence of hidden representations which encode the contextual information spread across the sentence .
The first Bi-LSTM is shared with the parser network while the other is specific to the tagger .
Finally , output layer uses the feed -forward neural network with a softmax function for a probability distribution over the Universal POS tags .
We only use the forward and backward hidden representations of the focus word for classification .
( Zhang and Weiss , 2016 ) .
Parser Network : Similar to the tagger network , the input layer encodes the input sentence using word and character embeddings which are then passed to the shared Bi-LSTM .
The hidden representations from the shared Bi-LSTM are then concatenated with the dense representations from the feed -forward network of the tagger and passed through the Bi-LSTM specific to the parser .
This ensures that the tagging network is penalized for the parsing error caused by error propagation by back - propagating the gradients to the shared tagger parameters ( Zhang and Weiss , 2016 ) .
Finally , we use a non-linear feed -forward network to predict the labeled transitions for the parser configurations .
From each parser configuration , we extract the top node in the stack and the first node in the buffer and use their hidden representations from the parser specific Bi-LSTM for classification .
Cross-domain Transfer Among 57 languages , 17 languages presented in the task have multiple treebanks from different domains .
From among the 17 languages , almost 5 languages have at- least one treebank which is smaller in size than the rest containing no more than 2000 sentences for training .
To boost the performance of parsers trained on these smaller treebanks ( target ) , we leverage large cross-domain treebanks ( source ) in the same language using neural stacking as a knowledge transfer mechanism .
As we discussed above , we adapted feature - level neural stacking ( Zhang and Weiss , 2016 ; Chen et al. , 2016 ) for joint learning of POS tagging and parsing .
Similarly , we also adapt this stacking approach for cross-domain knowledge trans -fer by incorporating the syntactic knowledge from resource - rich domain into resource -poor domain .
Recently , Wang et al . ( 2017 ) ; Bhat et al. ( 2018 ) showed significant improvements in parsing social media texts by injecting syntactic knowledge from large cross-domain treebanks using neural stacking .
As shown in Figure 3 , we transfer both POS tagging and parsing information from the source model .
For tagging , we augment the input layer of the target tagger with the hidden layer of multilayered perceptron ( MLP ) of the source tagger .
For transferring parsing knowledge , hidden representations from the parser specific Bi-LSTM of the source parser are augmented with the input layer of the target parser which already includes the hidden layer of the target tagger , word and character embeddings .
In addition , we also add the MLP layer of the source parser to the MLP layer of the target parser .
The MLP layers of the source parser are generated using raw features from target parser configurations .
Apart from the addition of these learned representations from the source model , the overall target model remains similar to the base model shown in Figure 2 .
The tagging and parsing losses are back - propagated by traversing back the forward paths to all trainable parameters in the entire network for training and the whole network is used collectively for inference .
Experiments
We train three kinds of parsing models based on the availability of training data : stack - prop models trained for languages having large treebanks , ii ) stacking models for languages having smaller in - domain treebanks and large out-domain treebanks , and iii ) backoff character models for those languages which have neither in- domain nor outdomain training data .
We will first discuss the details about the experimental setup for all these models and subsequently , we will discuss the results .
Hyperparameters Word Representations
For the stack - prop and stacking models , we include lexical features in the input layer of the neural networks using 64 dimension pre-trained word embeddings concatenated with 64 - dimension character - based embeddings obtained using a Bi-LSTM over the characters of a word .
For each language , we include pre-trained embeddings only for 100 K most frequent words in the raw corpora .
The distributed word representations for each language are learned separately from their monolingual corpora collected from Web to Corpus ( W2C ) ( Majli ? , 2011 ) 2 and latest wiki dumps 3 .
The word representations are learned using Skipgram model with negative sampling which is implemented in word2vec toolkit ( Mikolov et al. , 2013 ) .
For our backoff character model we only use 64 - dimension character Bi-LSTM embeddings in the input layer of the network .
Hidden dimensions
The word- level Bi-LSTMs have 128 cells while the character - level Bi-LSTMs have 64 cells .
The POS tagger specific MLP has 64 hidden nodes while the parser MLP has 128 hidden nodes .
We use hyperbolic tangent as an activation function in all tasks .
Learning
We use momentum SGD for learning with a minibatch size of 1 .
The initial learning rate is set to 0.1 with a momentum of 0.9 .
The LSTM weights are initialized with random orthonormal matrices as described in ( Saxe et al. , 2013 ) .
We set the dropout rate to 30 % for all the hidden states in the network .
All the models are trained for up to 100 epochs , with early stopping based on the development set .
All of our neural network models are implemented in DyNet ( Neubig et al. , 2017 ) .
Results
In Table 4 , we present the results of our parsing models on all the official test sets , while in Table 5 , we report the average results across evaluation sets .
In both tables , we also provide comparison of results on all the evaluation matrices with the UDPipe baseline models .
For 74 out of 82 treebanks , we have obtained an average improvement of 5.8 % in LAS over the UDPipe baseline models .
Although , we ranked 12 th in the overall shared task , our rankings are particularly better for all those treebanks which were parsed using the stacking models or parsed after segmentation by our own segmentation models .
Our parsing system took around 1 hour 30 minutes to parse all the official test sets on TIRA virtual machine .
Impact of Word Segmentation
To evaluate the impact of our segmentation models , we conducted two parsing experiments ; one using the segmentation from the UDPipe models , and the other using the segmentation from our own segmentation models .
We compared the performance of both segmentations on Japanese and Chinese development sets .
The results are shown in Table 2 .
As shown in the Table , we achieved an average improvement of 3 % in LAS over the UDPipe baseline .
By using our segmentation models , we have achieved better ranking for these two languages than our average ranking in the official evaluation .
Impact of Domain Adaptation
We also conducted experiments to evaluate the impact of neural stacking for knowledge transfer from resourcerich domains to resource -poor domains .
In all the cases of neural stacking , we used the base models trained on those domains that have larger treebanks .
We show the comparison of performance of stacking models with the base models trained on just the in-domain smaller treebanks .
Results on development sets of multiple domains of English and French are shown in Table 3 .
For English domains , there is an improvement of 1 % to 2 % using eng ewt as source domain for knowledge transfer , while for French improvements are quite high ( 2 % to 5 % ) using fr gsd as source domain .
Similar to the impact of word segmentation , our ranking on treebanks that use neural stacking is better than our average .
Conclusion
In this paper , we have described our parsing models that we have submitted to CoNLL - 2018 parsing shared task on Universal Dependencies .
We have developed three types of models depending on the number of training samples .
All of our models learn POS tag and parse tree information jointly using stack - propagation .
For smaller treebanks , we have used neural stacking for knowledge transfer from large cross-domain treebanks .
Moreover , we also developed our own segmentation models for Japanese and Chinese for improving the parsing results of these languages .
We have significantly improved the baseline results from UDPipe for almost all the official test sets .
Finally , we have achieved 12 th rank in the shared task for average LAS .
158 BASELINE Figure 3 : 3 Figure3 : Knowledge transfer from resourcerich domains to resource-poor domains using neural stacking ( Zhang and Weiss , 2016 ; Chen et al. , 2016 ) .
