title
Accurate SHRG - Based Semantic Parsing
abstract
We demonstrate that an SHRG - based parser can produce semantic graphs much more accurately than previously shown , by relating synchronous production rules to the syntacto-semantic composition process .
Our parser achieves an accuracy of 90.35 for EDS ( 89.51 for DMRS ) in terms of ELEMENTARY DEPENDENCY MATCH , which is a 4.87 ( 5.45 ) point improvement over the best existing data-driven model , indicating , in our view , the importance of linguistically - informed derivation for data-driven semantic parsing .
This accuracy is equivalent to that of English Resource Grammar guided models , suggesting that ( recurrent ) neural network models are able to effectively learn deep linguistic knowledge from annotations .
Introduction Graph-structured semantic representations , e.g. Semantic Dependency Graphs ( SDG ; Clark et al. , 2002 ; Ivanova et al. , 2012 ) , Elementary Dependency Structure ( EDS ; Oepen and L?nning , 2006 ) , Abstract Meaning Representation ( AMR ; Banarescu et al. , 2013 ) , Dependency - based Minimal Recursion Semantics ( DMRS ; Copestake , 2009 ) , and Universal Conceptual Cognitive Annotation ( UCCA ; Abend and Rappoport , 2013 ) , provide a lightweight yet effective way to encode rich semantic information of natural language sentences ( Kuhlmann and Oepen , 2016 ) .
Parsing to semantic graphs has been extensively studied recently .
At the risk of oversimplifying , work in this area can be divided into three types , according to how much structural information of a target graph is explicitly modeled .
Parsers of the first type throw an input sentence into a sequence - to-sequence model and leverage the power of deep learning technologies to obtain auxiliary symbols to transform the output sequence into a graph ( Peng et al. , 2017 b ; Konstas et al. , 2017 ) .
The strategy of the second type is to gradually generate a graph in a greedy search fashion ( Zhang et al. , 2016 ; Buys and Blunsom , 2017 ) .
Usually , a transition system is defined to handle graph construction .
The last solution explicitly associates each basic part with a target graph score , and casts parsing as the search for the graphs with highest sum of partial scores ( Flanigan et al. , 2014 ; Cao et al. , 2017 ) .
Although many parsers achieve encouraging results , they are very hard for linguists to interpret and understand , partially because they do not explicitly model the syntacto-semantic composition process which is a significant characteristic of natural languages .
In theory , Synchronous Hyperedge Replacement Grammar ( SHRG ; Drewes et al. , 1997 ) provides a mathematically sound framework to construct semantic graphs .
In practice , however , initial results on the utility of SHRG for semantic parsing were somewhat disappointing ( Peng et al. , 2015 ; Peng and Gildea , 2016 ) .
In this paper , we show that the performance that can be achieved by an SHRG - based parser is far higher than what has previously been demonstrated .
We focus here on relating SHRG rules to the syntactosemantic composition process because we feel that information about syntax -semantics interface has been underexploited in the data-driven parsing architecture .
We demonstrate the feasibility of inducing a high-quality , linguistically - informed SHRG from compositional semantic annotations licensed by English Resource Grammar ( ERG ; Flickinger , 2000 ) , dubbed English Resource Semantics 1 ( ERS ) .
Coupled with RNN - based pars - Peng et al. , 2017a ; Buys and Blunsom , 2017 ) . ing techniques , we build a robust SHRG parser that is able to produce semantic analysis for all sentences .
Our parser achieves an accuracy of 90.35 for EDS and 89.51 for DMRS in terms of EL-EMENTARY DEPENDENCY MATCH ( EDM ) which outperforms the best existing grammar-free model ( Buys and Blunsom , 2017 ) by a significant margin ( see Table 1 ) .
This marked result affirms the value of modeling the syntacto-semantic composition process for semantic parsing .
On sentences that can be parsed by ERG - guided parsers , e.g. PET 2 or ACE 3 , significant accuracy gaps between ERG - guided parsers and data-driven parsers are repeatedly reported ( see Table 1 ) .
The main challenge for ERG - guided parsing is limited coverage .
Even for treebanking on WSJ sentences from PTB , such a parser lacks analyses for c.a. 11 % of sentences .
Our parser yields equivalent accuracy to ERG - guided parsers and equivalent coverage , full- coverage in fact , to data-driven parsers .
We see this investigation as striking a balance between data-driven and grammar-driven parsing .
It is not our goal to argue against the use of unification grammar in high - performance deep linguistic processing .
Nevertheless , we do take it as a reflection of two points : ( 1 ) ( recurrent ) neural network models are able to effectively learn deep linguistic knowledge from annotations ; ( 2 ) practical parsing may benefit from transforming a model-theoretic grammar into a generative - enumerative grammar .
The architecture of our parser has potential uses beyond establishing a strong string - to - graph parser .
Our grammar extraction algorithm has some freedom to induce different SHRGs following different linguistic hypothesis , and allows some issues in theoretical linguistics to be empirically investigated .
In this paper , we examine the Red edges are the hyperedges that will be replaced in the next step , while the blue edges in the next step constitute their corresponding RHS graphs .
lexicalist / constructivist hypothesis , a divide across a variety of theoretical frameworks , in an empirical setup .
The lexicalist tradition traces its origins to Chomsky ( 1970 ) and is widely accepted by various computational grammar formalisms , including CCG , LFG , HPSG and LTAG .
A lexicalist approach argues that the lexical properties of words determine their syntactic and semantic behaviors .
The constructivist perspective , e.g. Borer 's Exo-Skeletal approach ( 2005 b ; 2005a ; 2013 ) , emphasizes the role of syntax in constructing meanings .
In this paper , we focus on lexicalist and constructivist hypotheses for syntacto-semantic composition .
We present our computation - oriented analysis in ?6 .
Under the architecture of our neural parser , a construction grammar works much better than a lexicalized grammar .
Our parser is available at https://github. com / draplater /hrg-parser/ .
Hyperedge Replacement Grammar Hyperedge replacement grammar ( HRG ) is a context-free rewriting formalism for graph generation ( Drewes et al. , 1997 ) .
An edge-labeled , directed hypergraph is a tuple H = V , E , l , X , where V is a finite set of nodes , and E ? V + is a finite set of hyperedges .
A hyperedge is an extension of a normal edge which can connect to more than two nodes or only one node .
l : E ? L RULES ? RULES ? {( A , ALL -EDGES , INTERNAL - NODES , EXTERNAL - NODES ) } 18 : end for assigns a label from a finite set L to each edge .
X ? V * defines an ordered list of nodes , i.e. , external nodes , which specify the connecting parts when replacing a hyperedge .
An HRG G = N , T , P , S is a graph rewriting system , where N and T are two disjoint finite sets of nonterminal and terminal symbols respectively .
S ? N is the start symbol .
P is a finite set of productions of the form A ? R , where the left hand side ( LHS ) A ?
N , and the right hand side ( RHS ) R is a hypergraph with edge labels over N ? T .
The rewriting process replaces a nonterminal hyperedge with the graph fragment specified by a production 's RHS , attaching each external node to the matched node of the corresponding LHS .
An example is shown in Figure 1 . Following Chiang et al. ( 2013 ) , we make the nodes only describe connections between edges and store no other information .
A synchronous grammar defines mappings between different grammars .
Here we focus on relating a string grammar , CFG in our case , to a graph grammar , i.e. , HRG .
SHRG can be represented as tuple G = N , T , T , P , S .
N is a finite set of nonterminal symbols in both CFG and HRG .
T and T are finite sets of terminal symbols in CFG and HRG , respectively .
S ? N is the start symbol .
P is a finite set of productions of the form A ? R , R , ? , where A ? N , R is a hypergraph fragment with edge labels over N ?
T , and R is a symbol sequence over N ? T . ? is a mapping between the nonterminals in R and R .
When a coherent CFG derivation is ready , we can interpret it using the corresponding HRG and get a semantic graph .
Grammar Extraction
Graph Representations for ERS ERS are richly detailed semantic representations produced by the ERG , a hand-crafted , linguistically - motivated HPSG grammar for English .
Beyond basic predicate - argument structures , ERS also includes other information about various complex phenomena such as the distinction between scopal and non-scopal arguments , conditionals , comparatives , and many others .
ERS are in the formalism of Minimal Recursion Semantics ( MRS ; Copestake et al. , 2005 ) , but can be expressed in different ways .
Semantic graphs , including EDS and DMRS , can be reduced from the standard feature structure encoded representations , with or without a loss of information .
In this paper , we conduct experiments on ERS data , but our grammar extraction algorithm and the parser are not limited to ERS .
One distinguished characteristic of ERS is that the construction of ERS strictly follows the prin- ciple of compositionality ( Bender et al. , 2015 ) .
A precise syntax -semantics interface is introduced to guarantee compositionality and therefore all meaning units can be traced back to linguistic signals , including both lexical and constructional ones .
Take Figure 2 for example .
Every concept , e.g. the existence quantifier some q , is associated with a surface string .
We favor such correspondence not because it eases extraction of SHRGs , but because we emphasize sentence meanings that are from forms .
The connection between syntax ( sentence form ) and semantics ( word and sentence meaning ) is fundamental to the study of language .
N ( 1,2 ) bv D ( 0,1 ) arg1 V ( 4,5 ) arg1 arg2 V ( 2,3 ) _boy_n _1 ( 1, 2 ) bv _some_q ( 0 ,
The Algorithm
We introduce a novel SHRG extraction algorithm , which requires and only requires alignments between conceptual edges and surface strings .
A tree is also required , but this tree does not have to be a gold-standard syntactic tree .
All trees that are compatible with an alignment can be used .
The syntactic part of DeepBank is a phrase structure which describes HPSG derivation .
The vast majority of syntactic rules in DeepBank are binary , and the rest are unary .
In ?5 , we report evaluation results based on DeepBank trees .
A conceptual graph is composed by two kinds of edges : 1 ) conceptual edges that carry semantic concept information and are connected with only one node , and 2 ) structural edges that build relationships among concepts by connecting nodes .
The grammar extraction process repeatedly replaces a subgraph with a nonterminal hyperedge , defining the nonterminal symbol as LHS and the subgraph as RHS .
The key problem is to identify an appropriate subgraph in each step .
To this end , we take advantage of DeepBank 's accurate and fine- grained alignments between the surface string in syntactic tree and concepts in semantic graphs .
To extract the HRG rule synchronized with the syntactic rewriting rule A ? B + C , we assume that conceptual edges sharing common spans with A , B or C are in the same subgraph .
This subgraph acts as the RHS of the HRG rule .
We make the extraction process go in the direction of postorder traversal of the syntactic tree , to ensure that all sub-spans of A , B or C are already replaced with hyperedges .
We then add the structural edges that connect the above conceptual edges to RHS .
After the subgraph is identified , it is easy to distinguish between internal nodes and external nodes .
If all edges connected to a node are in the subgraph , this node is an internal node .
Otherwise , it is external node .
Finally , the subgraph is replaced with a nonterminal edge .
Algorithm 1 presents a precise demonstration and Figure 2 illustrates an example .
A Neural SHRG Parser Under the SHRG formalism , semantic parsing can be divided into two steps : syntactic parsing and semantic interpretation .
Syntactic parsing utilizes the CFG part to get a derivation that is shared by the HRG part .
At one derivation step , there may be more than one HRG rule applicable .
In this case , we need a semantic disambiguation model to choose a good one .
Syntactic Parsing Following the LSTM - Minus approach proposed by Cross and Huang ( 2016 ) , we build a constituent parser with a CKY decoder .
We denote the output vectors of forward and backward LSTM as f i and b i .
The feature s i , j of a span ( i , j ) can be calculated from the differences of LSTM encodings : s i , j = ( f j ? f i ) ? ( b i ? b j )
The operator ? indicates the concatenation of two vectors .
Constituency parsing can be regarded as predicting scores for spans and labels , and getting the best syntactic tree with dynamic programming .
Following Stern et al. ( 2017 ) 's approach , We calculate the span scores SCORE span ( i , j ) and labels scores SCORE label ( i , j , l ) from s i , j with multilayer perceptrons ( MLPs ) : SCORE span ( i , j ) = MLP span ( s i , j ) SCORE label ( i , j , l ) = MLP label ( s i , j ) [ l ] x[ i ] indicates the ith element of a vector x .
We condense the unary chains into one label to ensure that only one rule is corresponds with a specific span .
Because the construction rules from Deep - Bank are either unary or binary , we do not deal with binarization .
Because the SHRG synchronizes at rule level , we need to restrict the parser to ensure that the output agrees with the known rules .
The restriction can be directly added into the CKY decoder .
To simplify the semantic interpretation process , we add extra label information to enrich the nonterminals in CFG rules .
In particular , we consider the count of external nodes of a corresponding HRG rule .
For example , the LHS of rule { in Figure 2 will be labeled as " HD - CMP # 2 " , since the RHS of its HRG counterpart has two external nodes .
Semantic Interpretation
When a phrase structure tree , i.e. , a derivation tree , T is available , semantic interpretation can be regarded as translating T to the derivation of graph construction by assigning a corresponding HRG rule to each syntactic counterpart .
Our approach to finding the optimal HRG rule combination R = {r 1 , r 2 , ...} from the search space R ( T ) :
R = argmax R?R( T ) SCORE ( R|T ) ( 1 )
To solve this optimization problem , we implement a greedy search decoder and a bottom - up beam search decoder .
The final semantic graph G is read off from R .
Greedy Search Model
In this model , we assume that each HRG rule is selected independently of the others .
The score of G is defined as the sum of all rule scores : SCORE ( R = {r 1 , r 2 , ...}| T ) = r?R SCORE ( r|T )
The maximization of the graph score can be decomposed into the maximization of each rule score .
SCORE ( r|T ) can be calculated in many ways .
Count - based approach is the simplest one , where the rule score is estimated by its frequency in the training data .
We also evaluate a sophisticated scoring method , i.e. , training a classifier based on rule embedding : SCORE ( r|T ) = MLP ( s i , j ? r) Inspired by the bag-of-words model , we represent the rule as bag of edge labels .
The i-th position in r indicates the number of times the i-th label appears in the rule .
Bottom - Up Beam Search Model
We can also leverage structured prediction to approximate SCORE ( R|T ) and employ principled decoding algorithms to solve the optimization problem ( 1 ) .
We propose a factorization model to assign scores to the graph and subgraphs in the intermediate state .
The score of a certain graph can be seen as the sum of each factor score .
SCORE ( R|T ) = i?PART ( R , T )
SCOREPART ( i )
We use predicates and arguments as factors for scoring .
There are two kinds of factors : 1 ) A conceptual edge aligned with span ( i , j ) taking predicate name p .
We use the span embedding s i , j as features , and scoring with non-linear transformation : SCOREPART pred ( i , j , p ) = MLP pred ( s i , j ) [ p ]
2 ) A structural edge with label L connects with predicates p a and p b , which are aligned with spans ( i 1 , j 1 ) and ( i 2 , j 2 ) respectively .
We use the span embedding s i 1 , j 1 , s i 2 , j 2 and random initialized predicate embedding p a , p b as features , and scoring with non-linear transformation : SCOREPART arg ( i 1 , j 1 , i 2 , j 2 , p a , p b , L ) = MLP arg ( s i 1 , j 1 ? s i 2 , j 2 ? p a ? p b ) [ L ]
We assign a beam to each node in the syntactic tree .
To ensure that we always get a subgraph which does not contain any nonterminal edges during the search process , we perform the beam search in the bottom - up direction .
We only reserve top k subgraphs in each beam .
Figure 3 illustrates the process .
Training
The objective of training is to make the score of the correct graph higher than incorrect graphs .
We use the score difference between the correct graph R g and the highest scoring incorrect graph as the loss : loss = max R = Rg SCORE ( R|T ) ?SCORE ( R g | T ) Following ( Kiperwasser and Goldberg , 2016 ) 's experience of loss augmented inference , in order to update graphs which have high model scores but are very wrong , we augment each factor belonging to the gold graph by adding a penalty term c to its score .
Finally the loss term is : loss = SCORE ( R g | T ) ? i?PART ( Rg , T ) c? max ( SCORE ( R|T ) ? i?PART ( R , T ) ? PART ( Rg , T ) c )
Experiments
Set - up DeepBank is an annotation of the Penn TreeBank Wall Street Journal which is annotated under the formalism of HPSG .
We use DeepBank version 1.1 , corresponding to ERG 1214 , and use the standard data split .
Therefore the numeric performance can be directly compared to results reported in Buys and Blunsom ( 2017 ) .
We use the pyDelphin library to extract DMRS and EDS graphs and use the tool provided by jigsaw 4 to separate punctuation marks from the words they attach to .
We use DyNet 5 to implement our neural models , and automatic batch technique ( Neubig et al. , 2017 ) in DyNet to perform mini-batch gradient descent training .
The detailed network hyper-parameters can be seen in Table 2 .
The same pre-trained word embedding as ( Kiperwasser and Goldberg , 2016 ) is employed .
Results of Grammar Extraction DeepBank provides fine-grained syntactic trees with rich information .
For example , the label SP - HD HC C denotes that this is a " head+ specifier " construction , where the semantic head is also the syntactic head .
But there is also the potential for data sparseness .
In our experiments , we extract SHRG with three kinds of labels : fine - grained labels , coarse- grained labels and single Xs ( meaning unlabeled parsing ) .
The fine- grained labels are the original labels , namely fine- grained construction types .
We use the part before the first underscore of each label , e.g. SP - HD , as a coarse-grained label .
The coarse- grained labels are more like the highly generalized rule schemata proposed by Pollard and Sag ( 1994 ) .
Some statistics are shown in Table 3 . Instead of using gold -standard trees to extract a synchronous grammar , we also tried randomlygenerated alignment -compatible trees .
The result is shown in Table 4 . Gold standard trees exhibit a low entropy , indicating a high regularity .
Results of Syntactic Parsing
In addition to the standard evaluation method for phrase -structure parsing , we find a more suitable measurement , i.e. condensed score , for our task .
Because we condense unary rule chains into one label and extract synchronous grammar under this condensed syntactic tree , it is better to calculate the correctness of the condensed label rather than Table 5 : Accuracy of syntactic parsing under different labels on development data .
We add the count of external nodes of corresponding HRG rule .
" POS " concerns the prediction of preterminals , while " BCKT " denotes bracketing .
a single label .
The additional label " # N " that indicates the number of external points is also considered in our condensed score evaluation method .
The result is shown in Table 5 .
Results of Semantic Interpretation Dridan and Oepen ( 2011 ) proposed the EDM metric to evaluate the performance the ERS - based graphs .
EDM uses the alignment between the nodes in a graph and the spans in a string to detect the common parts between two graphs .
It converts the predicate and predicate -argument relationship to comparable triples and calculates the correctness in these triples .
A predicate of label L and span S is denoted as triple ( S , NAME , L ) and a relationship R between the predicate labelled P and argument labelled A is denoted as triple ( P , R , A ) .
We calculate the F 1 value of the total triples as EDM score .
Similarity , we compute the F 1 score of only predicate triples and only the relation triples as EDM P and EDM A .
We reuse the word embeddings and bidirectional LSTM in the trained syntactic parsing model to extract span embedding s i , j .
The results of the count- based model , rule embedding model and structured model with beam decoder are summarized in Table 6 .
We report the standard EDM metrics .
The count- based model can achieve considerably good results , showing the correctness of our grammar extraction method .
We also try different labels for the syntactic trees .
The results are shown in Table 7 . Models based on coarsegrained labels achieve optimal performance .
The results on test set of EDS data are shown in Table 8 .
We achieve state - of - the - art performance with a remarkable improvement over Buys and Blunsom ( 2017 ) 's neural parser .
Model
On Syntax -Semantics Interface
In this paper , we empirically study the lexicalist / constructivist hypothesis , a divide across a variety of theoretical frameworks , taking semantic parsing as a case study .
Although the original grammar that guides the annotation of ERS data , namely ERG , is highly lexicalized in that the majority of information is encoded in lexical entries ( or lexical rules ) as opposed to being represented in constructions ( i.e. , rules operating on phrases ) , our grammar extraction algorithm has some freedom to induce different SHRGs that choose between the lexicalist and constructivist approaches .
We modify algorithm 1 to follow the key insights of the lexicalist approach .
This is done by considering all outgoing edges when finding the subgraph of the lexical rules .
The differences between two kinds of grammars is shown in Table 9 .
Different grammars allow the lexicalist / constructivist issue in theoretical linguistics to be empirically examined .
The comparison of the counts of rules in each grammar is summarized in We think that the success of applying SHRG to resolve semantic parsing highly relies on the compositionality nature of ERS ' sentence - level semantic annotation .
This is the property that makes sure the extracted rules are consistent and regular .
Previous investigation by Peng et al . ( 2015 ) on SHRG - based semantic parsing utilizes AMR - Bank which lacks this property to some extent ( see Bender et al. 's argument ) .
We think this may be one reason for the disappointing parsing performance .
Think about the AMR graph associated " John wants Bob to believe that he saw him . "
The AMR 's annotation for co-reference is a kind of non-compositional , speaker meaning , and results in grammar sparseness .
On Deep Linguistic Knowledge Semantic annotations have a tremendous impact on semantic parsing .
In parallel with developing new semantic annotations , e.g. AMRBank , there is a resurgence of interest in exploring existing annotations grounded under deep grammar formalisms , such as semantic analysis provided by ERS ( Flickinger , 2000 ) .
In stark contrast , it seems that only the annotation results gain interests , but not the core annotation engine-knowledgeextensive grammar .
The tendency to continually ignore the positive impact of precision grammar on semantic parsing is somewhat strange .
For sentences that can be parsed by an ERG - guided parser , there is a significant accuracy gap which is repeatedly reported .
See Table 1 for recent results .
The main challenges for precision grammar-guided parsing are unsat - isfactory coverage and efficiency that limit their uses in NLP applications .
Even for treebanking on newswire data , i.e. , Wall Street Journal data from Penn TreeBank ( Marcus et al. , 1993 ) , ERG lacks analyses for c.a. 11 % of sentences .
For text data from the web , e.g. tweets , this problem is even more serious .
Moreover , checking all possible linguistic constraints makes a grammar-guided parser too slow for many realistic NLP applications .
Robustness and efficiency , thus , are two major problems for practical NLP applications .
Lexicon Construction Lexicalized CFG Counterpart Construction Lexicalized some Recent encouraging progress achieved with purely data-driven models helps resolve the above two problems .
Nevertheless , it seems too radical to remove all explicit linguistic knowledge about the syntacto-semantic composition process , the key characteristics of natural languages .
In this paper , we introduce a neural SHRG - based semantic parser that strikes a balance between datadriven and grammar-guided parsing .
We encode deep linguistic knowledge partially in a symbolic way and partially in a statistical way .
It is worth noting that the symbolic system is a derivational , generative - enumerative grammar , while the origin of the data source is grounded under a representational , model- theoretic grammar .
While grammar writers may favor the convenience provided by a unification grammar formalism , a practical parser may re-use algorithms by another formalism by translating grammars through data .
Experiments also suggest that ( recurrent ) neural network models are able to effectively gain some deep linguistic knowledge from annotations .
Conclusion
The advantages of using graph grammars to resolve semantic parsing is clear in concept but underexploited in practice .
Here , we have shown ways to improve SHRG - based string - to-semanticgraph parsing .
Especially , we emphasize the importance of modeling syntax -semantic interface and the compositional property of semantic annotations .
Just like recent explorations on many other NLP tasks , we also show that neural network models are very powerful to advance deep language understanding .
2 Figure 1 : 1 Figure1 : A partial rewriting process of HRG on the semantic graph associated with " Some boys want to go . "
Lowercase symbols indicate terminal edges , while bold , uppercase symbols indicate nonterminal edges .
Red edges are the hyperedges that will be replaced in the next step , while the blue edges in the next step constitute their corresponding RHS graphs .
