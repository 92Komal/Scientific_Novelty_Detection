title
LLT - PolyU : Identifying Sentiment Intensity in Ironic Tweets
abstract
In this paper , we describe the system we built for Task 11 of SemEval2015 , which aims at identifying the sentiment intensity of figurative language in tweets .
We use various features , including those specially concerned with the identification of irony and sarcasm .
The features are evaluated through a decision tree regression model and a support vector regression model .
The experiment result of the fivecross validation on the training data shows that the tree regression model outperforms the support vector regression model .
The former is therefore used for the final evaluation of the task .
The results show that our model performs especially well in predicting the sentiment intensity of tweets involving irony and sarcasm .
Introduction Sentiment analysis aims to identify the polarity and intensity of certain texts in order to shed light on people 's sentiments , perceptions , opinions , and beliefs about a particular product , service , scheme , etc .
Knowing what people think can , in fact , help companies , political parties , and other public entities in strategizing and decision making .
While impressive results have been achieved in analysing literal texts ( Abbasi et al. , 2008 ; Yan et al. , 2014 ) , the study of polarity shifting in sentiment analysis still requires much research .
For example , Li , et.al. ( 2010 ) , explores the polarity shifters in English which significantly improve the performance of sentiment analysis .
Besides , figurative uses of language , such as irony or sarcasm , are also able to invert the polarity of the surface text .
Theoretical research in irony and sarcasm often emphasize that humans have difficulties in deciphering messages with underlying meaning ( Hay , 2001 ; Kotthoff , 2003 ; Kreuz and Caucci , 2007 ) .
Factors that can facilitate the understanding of these messages include prosody ( e.g. stress or intonation ) , kinesics ( e.g. facial gestures ) , co-text ( i.e. immediate textual environment ) and context ( i.e. wider environment ) , as well as cultural background .
Computers , however , cannot always rely on this kind of information .
Currently , there is no method that can guarantee the unequivocal recognition of irony or sarcasm .
Training a computer to perform such a highly pragmatic task does indeed pose a challenge to computational linguists .
A good number of studies have been recently devoted to finding a solution to the problem .
Most of them have focused on tweets ( Gonz?lez- Ib?ez et al. , 2011 ; Reyes et al. , 2013 ; Liebrecht et al. , 2013 ; Riloff et al. , 2013 ; Vanzo et al. , 2014 ) .
Identifying figurative language in short messages ( generally consisting of no more than 140 characters ) that do not make use of conventional language , but employ " little space - consuming " elements , such as emoticons ( " : D " ) , abbreviations ( " abbr. " ) and slang ( " slng " ) is not a self-evident task .
The reason why none of these studies has proved to be the representative method that could widely be adopted and applied by other researchers is that they have not yet reached optimal results .
Thus , the devising of a computational model able to accurately detect polarity is very much on -going .
This paper describes the model we developed for Task 11 of SemEval - 2015 ( Ghosh et al. , 2015 ) , which is concerned with the Sentiment Analysis of Figurative Language in Twitter .
Our model came first in the SemEval - 2015 task for irony and third in the overall ranking , showing that the features we proposed produce more reliable results in sentiment analysis of ironic tweets .
Related Work Irony is defined by Quintilian in the first century CE as " saying the opposite of what you mean " ( Quintilian , 1922 ) .
It violates the expectations of the listener by flouting the maxim of quality ( Grice , 1975 ; Stringfellow Jr , 1994 ; Gibbs and Colston , 2007 ; Tungthamthiti et al. , 2014 ) .
In the same fashion , sarcasm is generally understood as the use of irony " to mock or convey contempt " ( Stevenson , 2010 ) .
While irony and sarcasm are well studied in linguistics and psychology , their automatic identification through Natural Language Processing methods is a relatively novel task ( Pang and Lee , 2008 ) .
Not to mention that irony and sarcasm pose a difficult problem in Sentiment Analysis of micro blogging and social media .
Up to this date , several approaches have been proposed to automatically identify irony and sarcasm in tweets and comments .
Carvalho et al. ( 2009 ) , for example , proposed to identify irony in comments to newspaper articles by relying on the presence of emoticons , onomatopoeic expressions , and heavy punctuation in the text surface .
Hao and Veale ( 2010 ) have investigated similes of the form " x as y " in a large corpus , proposing a method to automatically discriminate ironic from non-ironic similes .
proposed a semi-supervised approach for the automatic recognition of sarcasm in Amazon product reviews , exploiting some features that were specific to Amazon .
Their method employed two modules : a semi-supervised acquisition of sarcastic patterns and a classifier .
This method was then applied to tweets by , achieving even better results .
Gonz?lez-Ib?ez et al. ( 2011 ) constructed a corpus of sarcastic tweets and used it to compare judgements made by humans and machine learning algorithms , concluding that none of them performed well .
More recently , Reyes et al. ( 2013 ) defined a complex model for identifying sarcasm which goes far behind the surface of the text and takes into account features on four levels : signatures , degree of unexpectedness , style , and emotional scenarios .
They have demonstrated that these features do not help the identification in isolation .
However , they do if they are combined in a complex framework .
focused their approach on the use of lexical and semantic features , such as the frequency of the words in different reference corpora , the length of the words , and the number of related synsets in WordNet ( Miller and Fellbaum , 1998 ) .
Finally , Buschmeier et al. ( 2014 ) assessed the impact of features used in previous studies , and they provide an important baseline for irony detection in English .
Many datasets for the study of irony and sarcasm in Twitter are nowadays available .
Thanks to the use of hashtags , it is easier to collect data with specific characteristics in Twitter .
Reyes et al. ( 2013 ) , for example , created a corpus of 40.000 tweets with four categories : Irony , Education , Humour , and Politics .
Among the other resources , it is worth mentioning the sarcastic Amazon product reviews collected by Filatova ( 2012 ) and the Italian examples collected and annotated by Gianti et al . ( 2012 ) , later used in Bosco et al . ( 2013 ) .
Methodology
Data Pre-processing Considering the unregulated and arbitrary nature of the texts we are working with , we use some heuristic rules to pre-process them .
These rules help us get more reliable syntactic structures when calling the syntactic parser .
Twitter users often use repeated vowels ( e.g. " loooove " ) or capitalization ( e.g. " LOVE " ) to emphasize certain sentiments or emotions .
The normalization consists of removing the repeated vowels ( e.g. from " loooove " to " love " ) and the capitalization ( e.g. from " LOVE " to " love " ) .
The normalized forms can help improve the parsing accuracy .
Moreover , they are saved in a special feature bag as they are important indicators of sentiments , especially when they are in sentiment lexicons .
Other special uses of language in tweets include the so-called heavy punctuation and emoticons .
In our system , we substitute every combination of exclamation and question marks ( e.g. " ?!?!! " ) with the form " ?! " .
We also compiled an emoticon dictionary based on training data and internet resources .
Another step that we considered relevant at this point is the maximal matching segmentation .
The segmentation is , in fact , often lost in tweets , as white spaces and punctuation are not always used in their customary format ( e.g. " yeahright " ) .
In order to get rid of this problem , we tried to segment all the out of vocabulary tokens through a maximal matching algorithm according to an English dictionary ( e.g. the token " yeahright " would be segmented as " yeah right " ) .
Finally , we use Stanford parser ( Klein and Manning , 2003 ) to get the POS tags and dependency structures of the normalized tweets .
Feature Set After the pre-processing , we then extract features of the following kinds .
UniToken
Token uni-grams are the basic features in our approach .
The normalized forms of the emphasized tokens are put in a special bag with tags describing their emphasis types { duplicate vowel , capitalized , heavy punctuation , emoticon }
BiToken Bi-grams of the normalized tokens are also used as features .
DepTokenPair
The " parent-child " pairs based on dependency structures are also used as features .
PolarityWin
In order to identify the polarity values of tokens , we used four sentiment dictionaries : Opinion Lexicon ( Hu and Liu , 2004 ) , Afinn ( Nielsen , 2011 ) , MPQA ( Wiebe et al. , 2005 ) , and SentiWordnet ( Baccianella et al. , 2010 ) .
Their union and their intersection are also used as two additional dictionaries .
A window size of five is used to verify whether negations are present .
If a negation is present the resulting value is set to zero .
Six features are used to save the sum polarity values of a tweet based on the six dictionaries respectively .
Besides , we also use features recording the polarity contribution of different POS tags .
For example , one possible feature - value pair can be ( adj - mpqa , 1.0 ) meaning that according to the dictionary M P QA , the sum of the polarity contributed by adjectives in the current tweet is 1.0 .
PolarityDep
This feature set is similar to P olarity W in , but it differs in that the negation is checked in the dependency structure .
PolarShiftWin
This feature set is designed for irony which has been discussed in ( Riloff et al. , 2013 ) .
Let us consider the tweets ( 1 ) " I love working for eight hours without any break " and ( 2 ) " I hate people giving me such a big surprise " .
In these tweets the verbs " love " ( positive ) and " hate " ( negative ) are used with reference to a negative and a positive clause ( " working for eight hours without any break " and " people giving me such a big surprise " ) respectively .
Based on a 5 - window we check whether a shift of polarity is present .
PolarShiftDep
This feature set is similar to P olarShif tW in , but it differs in that the shift is checked in the dependency structure .
Feature Normalization and Evaluation
In order to avoid noise and sparseness , only features that occur at least 3 times are kept .
All the feature values are normalized into the range [ - 1 , 1 ] according to the formula shown in Equation 1 , where f i , j is the value of feature j in the ith example , and N is the sample size .
norm ( f i , j ) = f i , j max 1?k?N |f k , j | ( 1 ) We use the correlative coefficient ( Pearson 's r ) measure to rank all the features .
Then , we can use the threshold value of r to rule out less important features .
The calculation of r is described in Equation 2 , where X and Y are the two variables that are evaluated , X i is the ith sample value of X , Y i is the ith sample value of Y and N is the sample size .
r( X , Y ) = ?
N i=1 ( X i ? X ) ( Y i ? ? ) ? ? N i=1 ( X i ? X ) 2 ? ? N i=1 ( Y i ? ? ) 2 ( 2 ) The goal of the first experiment is to find the optimal threshold value of r with all the features as listed in 3.2 .
Regression model ( RepTree ) implemented in Weka ( Hall et al. , 2009 ) and Support Vector Regression model ( SVR ) implemented in LibSVM ( Chang and Lin , 2011 ) .
The result is shown in Figure 1 .
The best performance is obtained with the value of r between 0.03 and 0.04 with the RepTree model .
The experiment also shows that RepTree always outperforms SVR ( i.e. higher cosine value and lower rmse value ) .
Therefore , in the following experiments and in the evaluation the RepTree model is adopted .
In the second experiment , we use r = 0.035 as threshold for feature selection by testing how different kinds of features contribute to the overall performance .
The features listed in Section 3.2 are gradually added and their contribution is assessed .
If the new feature does not improve the performance , it is removed in the next running .
The results of the second experiment are shown in Table 1 .
The baseline is obtained with a naive prediction using the average polarity value of the training data .
As can be seen , only BiT oken harms the performance , while all other features contribute to its improvement .
Evaluation Result Based on the described analysis , for the final test we used RepTree and all the feature sets , except for BiT oken .
The threshold for feature frequency is set to 3 and the r value for feature selection is set to 0.035 .
Finally , the trained model on the 8,000 tweets is used to predict the sentiment intensity of the evaluation dataset which includes 4,000 tweets .
The results are shown in Table 2 . Among the fifteen participants in the SemEval task on Sentiment Analysis of Figurative Language in Twitter , our model achieves the best performance in the identification of irony , and ranks third in the overall performance .
Conclusions
In this paper , we introduced our model for the Sentiment Analysis of Figurative Language in Twitter following the track of Task 11 of SemEval 2015 .
We first used heuristic rules to pre-process the tweets by identifying and normalizing the emphasized tokens .
Then , features were extracted based on both window and dependency structures .
We adopted polarity shift features with special consideration on the identification of irony .
As expected , our system performed best in predicting the sentiment intensity of tweets containing irony according to the evaluation .
This confirms the robustness of our design and points to promising development of automatic processing of irony in the future .
Figure 1 : 1 Figure 1 : Effect of Pearson value threshold on the overall performance in cosine ( left ) and root mean squared error ( right ) .
Table 1 : 1 Two different models are used : Decision Tree Experiment result of the 5 - fold cross validation by RegTree and SVR on the training data .
Feature Set Features mse cosine Baseline N/A 1.9847 0.8184 UniToken 136 1.6821 0.8507 + BiToken 410 1.7007 0.8485 + DepTokenPair 409 1.6733 0.8514 + PolarityWin 582 1.6573 0.8524 + PolarityDep 748 1.6436 0.8536 + PolarShiftWin 825 1.6403 0.8542 + PolarShiftDep 841 1.6393 0.8543
Table 2 : 2 Test result of SemEval Task 11 .
category mse cosine Sarcasm 0.997 0.896 Irony 0.671 0.918 Metaphor 3.917 0.535 Other 4.617 0.290 Overall 2.602 0.687
