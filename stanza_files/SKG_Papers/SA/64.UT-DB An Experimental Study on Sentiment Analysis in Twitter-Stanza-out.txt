title
UT -DB : An Experimental Study on Sentiment Analysis in Twitter
abstract
This paper describes our system for participating SemEval2013 Task2 - B ( Kozareva et al. , 2013 ) : Sentiment Analysis in Twitter .
Given a message , our system classifies whether the message is positive , negative or neutral sentiment .
It uses a co-occurrence rate model .
The training data are constrained to the data provided by the task organizers ( No other tweet data are used ) .
We consider 9 types of features and use a subset of them in our submitted system .
To see the contribution of each type of features , we do experimental study on features by leaving one type of features out each time .
Results suggest that unigrams are the most important features , bigrams and POS tags seem not helpful , and stopwords should be retained to achieve the best results .
The overall results of our system are promising regarding the constrained features and data we use .
Introduction
The past years have witnessed the emergence and popularity of short messages such as tweets and SMS messages .
Comparing with the traditional genres such as newswire data , tweets are very short and use informal grammar and expressions .
The shortness and informality make them a new genre and bring new challenges to sentiment analysis ( Pang et al. , 2002 ) as well as other NLP applications such named entity recognition ( Habib et al. , 2013 ) .
Recently a wide range of methods and features have been applied to sentimental analysis over tweets .
Go et al. ( 2009 ) train sentiment classifiers using machine learning methods , such as Naive Bayes , Maximum Entropy and SVMs , with different combinations of features such as unigrams , bigrams and Part- of - Speech ( POS ) tags .
Microblogging features such as hashtags , emoticons , abbreviations , allcaps and character repetitions are also found helpful ( Kouloumpis et al. , 2011 ) . Saif et al. ( 2012 ) train Naive Bayes models with semantic features .
Also the lexicon prior polarities have been proved very useful ( Agarwal et al. , 2011 ) . Davidov et al. ( 2010 ) utilize hashtags and smileys to build a largescale annotated tweet dataset automatically .
This avoids the need for labour intensive manual annotation .
Due to the fact that tweets are generated constantly , sentiment analysis over tweets has some interesting applications , such as predicting stock market movement ( Bollen et al. , 2011 ) and predicting election results ( Tumasjan et al. , 2010 ; O'Connor et al. , 2010 ) .
But there are still some unclear parts in the literature .
For example , it is unclear whether using POS tags improves the sentiment analysis performance or not .
Conflicting results are reported ( Pak and Paroubek , 2010 ; Go et al. , 2009 ) .
It is also a little surprising that not removing stopwords increases performance ( Saif et al. , 2012 ) .
In this paper , we build a system based on the concept of cooccurrence rate .
9 different types of features are considered .
We find that using a subset of these features achieves the best results in our system , so we use this subset of features rather than all the 9 types of features in our submitted system .
To see the contribution of each type of features , we perform experiments by leaving one type of features out each time .
Results show that unigrams are the most important features , bigrams and POS tags seem not helpful , and retaining stopwords makes the results better .
The overall results of our system are also promising regarding the constrained features and data we use .
System Description
Method
We use a supervised method which is similar to the Naive Bayes classifier .
The score of a tweet , denoted by t , and a sentiment category , denoted by c , is calculated according to the following formula : Score( t , c ) = [ n i=1 log CR ( f i , c ) ] + log P ( c ) , where f i is a feature extracted from t .
The sentiment category c can be positive , negative or neutral .
And CR ( f i , c ) is Co-occurrence Rate ( CR ) of f i and c which can be obtained as follows : CR ( f , c ) = P ( f i , c ) P ( f i ) P ( c ) ? #( f i , c ) #( f i ) # ( c ) , where #( * ) is the number of times that the pattern * appears in the training dataset .
Then the category of the highest score arg max c Score(t , c ) is the prediction .
This method assumes all the features are independent which is also the assumption of the Naive Bayes model .
But our model excludes P ( f i ) because they are observations .
Hence comparing with Naive Bayes , our model saves the effort to model feature distributions P ( f i ) .
Also this method can be trained efficiently because it only depends on the empirical distributions .
Features
To make our system general , we constrain to the text features .
That is we do not use the features outside the tweet texts such as features related to the user profiles , discourse information or links .
The following 9 types of features are considered : 1 . Unigrams .
We use lemmas as the form of unigrams .
The lemmas are obtained by the Stanford CoreNLP 1 ( Toutanova et al. , 2003 ) . Hash - 1 http://nlp.stanford.edu/software/corenlp.shtml tags and emoticons are also considered as unigrams .
Some of the unigrams are stopwords which will be discussed in the next section .
2 . Bigrams .
We consider two adjacent lemmas as bigrams .
3 . Named entities .
We use the CMU Twitter Tagger ( Gimpel et al. , 2011 ; Owoputi et al. , 2013 ) 5 . Lexicon prior polarity .
The prior polarity of lexicons have been proved very useful to sentiment analysis .
Many lexicon resources have been developed .
But for a single lexicon resource , the coverage is limited .
To achieve better coverage , we merge three lexicon resources .
The first one is SentiStrength 3 ( Kucuktunc et al. , 2012 ) .
SentiStrength provides a fine- granularity system for grading lexicon polarity which ranges from ?5 ( most negative ) to + 5 ( most positive ) .
Our grading system consists of three categories : negative , neutral and positive .
So we map the words ranging from ?5 to ?1 in SentiStrength to negative in our grading system , and the words ranging from + 1 to + 5 to positive .
The rest are mapped to neutral .
We do the same for the other two lexicon resources : OpinionFinder 4 ( Wiebe et al. , 2005 ) and SentiWordNet 5 ( Esuli and Sebastiani , 2006 ; Baccianella and Sebastiani , 2010 ) .
6 . Intensifiers .
The tweets containing intensifiers are more likely to be non-neutral .
In the submitted system , we merge the boosters in Sen-tiStrength and the intensifiers in OpinionFinder to form a list of intensifiers .
Some of these intensifiers strengthen emotion ( e.g. ' definitely ' ) , but others weaken emotion ( e.g. ' slightly ' ) .
They are distinguished and assigned with different labels { intensifier strengthen , intensifier weaken} .
7 . All-caps and repeat characters .
All - caps 6 and repeat characters are common expressions in tweets to make emphasis on the applied tokens .
They can be considered as implicit intensifiers .
In our system , we first normalize the repeat characters .
For example , happyyyy is normalized to happy as there are ?
3 consequent y.
Then they are treated in the same way as intensifier features discussed above .
8 . Interrogative sentence .
Interrogative sentences are more likely to be neutral .
So we add if a tweet includes interrogative sentences as a feature to our system .
The sentences ending with a question mark ' ? ' are considered as interrogative sentences .
We first use the Stanford CoreNLP to find the sentence boundaries in a tweet , then check the ending mark of each sentence .
9 . Imperative sentence .
Intuitively , imperative sentences are more likely to be negative .
So if a tweet contains imperative sentences can be a feature .
We consider the sentences start with a verb as imperative sentences .
The verbs are identified by the CMU Twitter Tagger .
We further filter out the low-frequency features which have been observed less than 3 times in the training data .
Because these features are not stable indicators of sentiment .
Our experiments show that removing these low-frequency features increases the accuracy .
Pre-processing
The pre-processing of our system includes two steps .
In the first step , we replace the abbreviations as described in Section 2.3.1 .
In the second step , we use the CMU Twitter Tagger to extract the features of emoticons ( e.g. :) ) , hashtags ( e.g. # Friday ) , reciepts ( e.g. @ Peter ) and URLs , and remove these symbols from tweet texts for further processing .
Replacing Abbreviations
Abbreviations are replaced by their original expressions .
We use the Internet Lingo Dictionary ( Wasden , 2010 ) to obtain the original expressions of abbreviations .
This dictionary originally contains 748 acronyms .
But we do not use the acronyms in which all characters are digits .
Because we find they are more likely to be numbers than acronyms .
This results in 735 acronyms .
Experiments
Our system is implemented in Java and organized as a pipeline consisting of a sequence of annotators and extractors .
This architecture is very similar to the framework of UIMA ( Ferrucci and Lally , 2004 ) .
With such an architecture , we can easily vary the configurations of our system .
Datasets
We use the standard dataset provided by Se-mEval2013 Task2 - B ( Kozareva et al. , 2013 ) for training and testing .
The training and development data provided are merged together to train our model .
Originally , the training and development data contain 9,684 and 1,654 instances , respectively .
But due to the policy of Twitter , only the tweet IDs can be released publicly .
So we need to fetch the actual tweets by their IDs .
Some of the tweets are no longer existing after they were downloaded for annotation .
So the number of tweets used for training is less than the original tweets provided by the organizers .
In our case , we obtained 10,370 tweets for training our model .
There are two test datasets : Twitter and SMS .
The first dataset consists of 3,813 twitter messages and the second dataset contains 2,094 SMS messages .
The purpose of having a separate test set of SMS messages is to see how well systems trained on twitter data will generalize to other types of data .
Results of Our Submitted System
We use a subset of features described in Section 2.2 in our submitted system : unigrams , named entities , dependency relations , lexicon prior polarity , intensifiers , all - caps and repeat characters , interrogative and imperative sentences .
The official results on the two datasets are given in Table ( 1 , 2 ) .
Our system is ranked as # 14/51 on the Twitter dataset and # 18/44 on the SMS dataset .
Feature Contribution Analysis
To see the contribution of each type of features , we vary the configuration of our system by leaving one type of features out each time .
The results are listed in Table 3 . In Table 3 , ' Y ( T ) ' means the corresponding feature is used and the test dataset is the Twitter Data , and ' N ( sms ) ' means the corresponding feature is left out and the test dataset is SMS Data .
From Table 3 , we can see that unigrams are the most important features .
Leaving out unigrams leads to a radical decrease of F-scores .
On the Twitter dataset , the F-score drops from 59.87 to 41.44 , and on the SMS dataset , the F-score drops from 52 .
64 Saif et al. ( 2012 ) .
By taking a close look at the stopwords we use , we find that some of the stopwords are highly related to the sentiment polarity , such as ' can ' , ' no ' , ' very ' and ' want ' , but others are not , such as ' the ' , ' him ' and ' on ' .
Removing the stopwords which are related to the sentiment is obviously harmful .
This means the stopwords which originally developed for the purpose of information retrieval are not suitable for sentimental analysis .
Dependency relations are also helpful features which increase F-scores by about 0.5 percent .
The POS tags and bigrams seem not helpful in our experiments , which is consistent with the results reported by ( Kouloumpis et al. , 2011 ) .
Conclusions
We described the method and features used in our system .
We also did analysis on feautre contribution .
Experiment results suggest that unigrams are the most important features , POS tags and bigrams seem not helpful , filtering out the low-frequency features is helpful and retaining stopwords makes the results better .
Table 2 : 2 Submitted System on SMS Data Class Precision Recall F-Score Positive 74.86 60.05 66.64 Negative 47.80 59.73 53.11 Neutral 67.02 73.60 70.15 Avg ( Pos & Neg ) 61.33 59.89 59.87 Table 1 : Submitted System on Twitter Data Class Precision Recall F-Score Positive 54.81 57.93 56.32 Negative 37.87 67.77 48.59 Neutral 80.78 58.11 67.60 Avg ( Pos & Neg ) 46.34 62.85 52.46
to 35.09 .
And also filtering out the low- Feature Y ( T ) N ( T ) Y( sms ) N( sms ) Stopword 59.87 58.19 52.64 51.00 POS Tag 58.68 59.87 51.87 52.64 Bigram 58.47 59.87 51.94 52.64 Unigram 59.87 41.22 52.64 35.09 3 ? 59.87 57.66 52.64 51.20 Intensifier 59.87 59.47 52.64 52.39 Lexicon 59.87 58.33 52.64 51.26 Named Ent. 59.87 59.71 52.64 51.80 Interrogative 59.87 59.67 52.64 52.93 Imperative 59.87 59.54 52.64 52.14 Dependence 59.87 59.37 52.64 52.08
Table 3 : 3 Avg ( Pos & Neg ) of Leave-one- out Experiments frequency features which happens less than 3 times increases the F-scores on Twitter data from 57.66 to 59.87 , and on SMS data from 51.20 to 52.64 .
Removing stopwords decreases the scores by 1.66 percent .
This result is consistent with that reported by
http://www.ark.cs.cmu.edu/TweetNLP/ 3 http://sentistrength.wlv.ac.uk/
https://code.google.com/p/opinionfinder/ 5 http://sentiwordnet.isti.cnr.it/
6
All characters of a token are in upper case .
