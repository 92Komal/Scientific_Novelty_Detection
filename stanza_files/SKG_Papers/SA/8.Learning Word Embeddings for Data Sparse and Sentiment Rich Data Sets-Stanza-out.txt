title
Learning Word Embeddings for Data Sparse and Sentiment Rich Data Sets
abstract
This research proposal describes two algorithms that are aimed at learning word embeddings for data sparse and sentiment rich data sets .
The goal is to use word embeddings adapted for domain specific data sets in downstream applications such as sentiment classification .
The first approach learns word embeddings in a supervised fashion via SWESA ( Supervised Word Embeddings for Sentiment Analysis ) , an algorithm for sentiment analysis on data sets that are of modest size .
SWESA leverages document labels to jointly learn polarity - aware word embeddings and a classifier to classify unseen documents .
In the second approach domain adapted ( DA ) word embeddings are learned by exploiting the specificity of domain specific data sets and the breadth of generic word embeddings .
The new embeddings are formed by aligning corresponding word vectors using Canonical Correlation Analysis ( CCA ) or the related nonlinear Kernel CCA .
Experimental results on binary sentiment classification tasks using both approaches for standard data sets are presented .
Introduction Generic word embeddings such as Glove and word2vec ( Pennington et al. , 2014 ; Mikolov et al. , 2013 ) which are pre-trained on large sets of raw text , in addition to having desirable structural properties have demonstrated remarkable success when used as features to a supervised learner in various applications such as the sentiment classification of text documents .
There are , however , many applications with domain specific vocabu-laries and relatively small amounts of data .
The performance of word embedding approaches in such applications is limited , since word embeddings pre-trained on generic corpora do not capture domain specific semantics / knowledge , while embeddings trained on small data sets are of low quality .
Since word embeddings are used to initialize most algorithms for sentiment analysis etc , generic word embeddings further make for poor initialization of algorithms for tasks on domain specific data sets .
A concrete example of a small-sized domain specific corpus is the Substances User Disorders ( SUDs ) data set ( Quanbeck et al. , 2014 ; Litvin et al. , 2013 ) , which contains messages from discussion forums for people with substance addictions .
These forums are part of mobile health intervention treatments that encourages participants to engage in sobriety - related discussions .
The aim with digital intervention treatments is to analyze the daily content of participants ' messages and predicit relapse risk .
This data is both domain specific and limited in size .
Other examples include customer support tickets reporting issues with taxi- cab services , reviews of restaurants and movies , discussions by special interest groups , and political surveys .
In general they are common in fields where words have different sentiments from what they would have elsewhere .
Such data sets present significant challenges for algorithms based on word embeddings .
First , the data is on specific topics and has a very different distribution from generic corpora , so pre-trained generic word embeddings such as those trained on Common Crawl or Wikipedia are unlikely to yield accurate results in downstream tasks .
When performing sentiment classification using pre-trained word embeddings , differences in domains of training and test data sets limit the applicability of the embedding algorithm .
For example , in SUDs , dis-cussions are focused on topics related to recovery and addiction ; the sentiment behind the word ' party ' may be very different in a dating context than in a substance abuse context .
Similarly seemingly neutral words such as ' holidays ' , ' alcohol ' etc are indicative of stronger negative sentiment in these domains , while words like ' clean ' are indicative of stronger positive sentiment .
Thus domain specific vocabularies and word semantics may be a problem for pre-trained sentiment classification models ( Blitzer et al. , 2007 ) .
Second , there is insufficient data to completely train a word embedding .
The SUD data set consists of a few hundred people and only a fraction of these are active ( Firth et al. , 2017 ) and ( Naslund et al. , 2015 ) .
This results in a small data set of text messages available for analysis .
Furthermore , the content is generated spontaneously on a day to day basis , and language use is informal and unstructured .
Running the generic word embedding constructions algorithms on such a data set leads to very noisy outputs that are not suitable as input for downstream applications like sentiment classification .
Fine-tuning the generic word embedding also leads to noisy outputs due to the highly nonconvex training objective and the small amount of the data .
This proposal briefly describes two possible solutions to address this problem .
Section 3 describes a Canonical Correlation Analysis ( CCA ) based approach to obtain domain adapted word embeddings .
Section 2 describes an biconvex optimization algorithm that jointly learns polarity aware word embeddings and a classifier .
Section 4 discusses results from both approaches and outlines potential future work .
Supervised Word Embeddings for Sentiment Analysis on Small Sized Data Sets Supervised Word Embedding for Sentiment Analysis ( SWESA ) algorithm is an iterative algorithm that minimizes a cost function for both a classifier and word embeddings under unit norm constraint on the word vectors .
SWESA incorporates document label information while learning word embeddings from small sized data sets .
Mathematical model and optimization
Text documents d i in this framework are represented as a weighted linear combination of words in a given vocabulary .
Weights ?
i used are term frequencies .
SWESA aims to find vector representations for words , and by extension of text documents such that applying a nonlinear transformation f to the product ( ?
W ? ) results in a binary label y indicating the polarity of the document .
Mathematically we assume that , P[ Y = 1 | d = W ? , ?] = f ( ? W ? ) ( 1 ) for some function f
The optimization problem in ( 1 ) can be solved as the following minimization problem , J ( ? , W ) def = ?1 N C + y i =+1 log P( Y = y i | W ? i , ? ) + C ? y i =?1 log P( Y = y i | W ? i , ? ) +? ? || ? || 2 2 .
This optimization problem can now be written as min ?R k , W?R k?V J (? , W ) ( 2 ) s.t. || w j || 2 = 1 ?j = 1 , . . . V. Class imbalance is accounted for by using misclassification costs C ? , C + as in ( Lin et al. , 2002 ) .
The unit norm constraint in the optimization problem shown in ( 2 ) is enforced on word embeddings to discourage degenerate solutions of w j .
This optimization problem is bi-convex .
Algorithm 1 shows the algorithm that we use to solve the optimization problem in ( 2 ) .
This algorithm is an alternating minimization procedure that initializes the word embedding matrix W with W 0 and then alternates between minimizing the objective function w.r.t. the weight vector ? and the word embeddings W. The probability model used in this work is logistic regression .
Under this assumption the minimization problem in Step 3 of Algorithm 1 is a standard logistic regression problem .
In order to solve the optimization problem in line 4 of Algorithm 1 a projected stochastic gradient descent ( SGD ) with suffix averaging ( Rakhlin et al. , 2011 ) .
Algorithm 2 implements the SGD algorithm ( with stochastic gradients instead of full gradients ) for solving the optimization problem in step 4 of Algorithm 1 .
W 0 is initialized via pretrained word2vec embeddings and Latent Semantic Analysis ( LSA ) ( Dumais , 2004 )
based word Algorithm 1 Supervised Word Embeddings for Sentiment Analysis ( SWESA ) Require : W 0 , ? , C + , C ? , ? ? , 0 < k < V , La- bels : y = [ y 1 , . . . , y N ] , Iterations : T > 0 , 1 : Initialize W = W 0 . 2 : for t = 1 , . . . , T do 3 : Solve ? t ? arg min ? J ( ? , W t?1 ) .
4 : Solve W t ? arg min W J (? t , W ) .
5 : end for 6 : Return ? T , W T Algorithm 2 Stochastic Gradient Descent for W Require : ? , ? , W 0 , Labels : y = [ y 1 , . . . , y N ] , Iterations : N , step size : ? > 0 , and suffix parameter : 0 < ? ? N . 1 : Randomly shuffle the dataset .
2 : for t = 1 , . . . , N do 3 : Set C t = C + if y t = + 1 , C t = C ? if y t = ?1 .
4 : W t+1 = W t ?
? Ct 1 + e y i ( ?
W ? i ) ?(?y i ? ? i ) 5 : W t+1 , j = W t+1 , j /|| W t+1 , j || 2 ?j = 1 , 2 , . . . , V 6 : ? ? ? t 7 : end for 8 : Return W = 1 ? N t=N ?
W t embeddings obtained form a matrix of term frequencies from the given data .
Dimension k of word vectors is determined empirically by selecting the dimension that provides the best performance across all pairs of training and test data sets .
Experiment evaluation and results SWESA is evaluated against the following baselines and data sets , Datasets : 3 balanced data sets ( Kotzias et al. , 2015 ) of 1000 reviews from Amazon , IMDB and Yelp with binary ' positive ' and ' negative ' sentiment labels are considered .
One imbalanced data set with 2500 text messages obtained from a study involving subjects with alcohol addiction is considered .
Only 8 % of the messages are indicative of ' relapse risk ' while the rest are ' benign ' .
Note that this imbalance influences the performance metrics and can be seen by comparing against the scores achieved by the balanced data sets .
Additional information such as number of word tokens etc can be found in the supplemental section .
?
Naive Bayes :
This is a standard baseline that is best suited for classification in small sized data sets .
?
Recursive Neural Tensor Network : RNTN is a dependency parser based sentiment analysis algorithm .
Both pre-trained RNTN and the RNTN algorithm retrained on the data sets considered here are used to obtain classification accuracy .
Note that with the RNTN we do not get probabilities for classes hence we do not compute AUC .
? Two - Step ( TS ) :
In this set up , embeddings obtained via word2vec on the test data sets and LSA are used to obtain document representation via weighted averaging .
Documents are then classified using a Logistic Regressor .
Hyperparameters :
Parameters such as dimension of word embeddings , regularization on the logistic regressor etc are determined via 10 - fold cross validation .
Results : Average Precision and AUC are reported in table 2 .
Note that , the word2vec embeddings used in TS are obtained by retraining the word2vec algorithm on the test data sets .
To reinforce the point that retraining neural network based algorithms on sparse data sets depreciates their performance , results from pre-trained and retrained RNTN are presented to further support this fact .
Since SWESA makes use of document labels when learning word embeddings , resulting word embeddings are polarity aware .
Using cosine similarity , word antonym pairs are observed .
Given words ' Good , '' fair ' and ' Awful , ' the antonym pair ' Good / Awful ' is determined via cosine similarity between w Good and w Awf ul .
Figure 1 shows a small sample of word embeddings learned on the Amazon data set by SWESA and word2vec .
The cosine similarity ( angle ) between the most dissimilar words is calculated and words are depicted as points on the unit circle .
These examples illustrate that SWESA captures sentiment polarity at word embedding level despite limited data .
Domain Adapted Word Embeddings for Improved Sentiment Classification
While SWESA learns embeddings from domain specific data alone , this approach proposes a method for obtaining high quality Domain Adapted ( DA ) embeddings by combining generic embeddings and Domain Specific ( DS ) embeddings via CCA / KCCA .
Generic embeddings are trained on large corpora and do not capture domain specific semantics , while DS embeddings are obtained from the domain specific data set via algorithms such as Latent Semantic Analysis ( LSA ) or other embedding methods .
Thus DA embed-dings exploit the breath of generic embeddings and the specificity of DS embeddings .
The two sets of embeddings are combined using a linear CCA ( Hotelling , 1936 ) or a nonlinear kernel CCA ( KCCA ) ( Hardoon et al. , 2004 ) .
They are projected along the directions of maximum correlation , and a new ( DA ) embedding is formed by averaging the projections of the generic embeddings and DS embeddings .
The DA embeddings are then evaluated in a sentiment classification setting .
Empirically , it is shown that the combined DA embeddings improve substantially over the generic embeddings , DS embeddings and a concatenation - SVD ( conc - SVD ) based baseline .
Brief description of CCA / KCCA Let W DS ? R |V DS |?d
1 be the matrix whose columns are the domain specific word embeddings ( obtained by , e.g. , running the LSA algorithm on the domain specific data set ) , where V DS is its vocabulary and d 1 is the dimension of the embeddings .
Similarly , let W G ? R |V G |?d 2 be the matrix of generic word embeddings ( obtained by , e.g. , running the GloVe algorithm on the Common Crawl data ) , where V G is the vocabulary and d 2 is the dimension of the embeddings .
Let V ? = V DS ?V G . Let w i , DS be the domain specific embedding of the word i ?
V ? , and w i, G be its generic embedding .
For one dimensional CCA , let ? DS and ?
G be the projection directions of w i , DS and w i , G respectively .
Then the projected values are , wi , DS = w i , DS ?
DS wi , G = w i, G ? G . ( 3 ) CCA maximizes the correlation ?
between wi , DS and wi , G to obtain ?
DS and ?
G such that ?(?
DS , ? G ) = max ? DS , ?
G E [ wi , DS wi , G ] E [ w2 i , DS ] E [ w2 i , G ] ( 4 ) where the expectation is over all words i ?
V ? .
The d-dimensional CCA with d > 1 can be defined recursively .
Suppose the first d ?
1 pairs of canonical variables are defined .
Then the d th pair is defined by seeking vectors maximizing the same correlation function subject to the constraint that they be uncorrelated with the first d ?
1 pairs .
Equivalently , matrices of projection vectors ? DS ? R d 1 ?d and ?
G ? R
The final domain adapted embedding for word i is given by ?i , DA = ? wi , DS + ? wi , G , where the parameters ? and ? can be obtained by solving the ( 5 ) Solving ( 5 ) gives a weighted combination with ? = ? = 1 2 , i.e. , the new vector is equal to the average of the two projections : ?i , DA = 1 2 wi , DS + 1 2 wi , G . ( 6 ) Because of its linear structure , the CCA in ( 4 ) may not always capture the best relationships between the two matrices .
To account for nonlinearities , a kernel function , which implicitly maps the data into a high dimensional feature space , can be applied .
For example , given a vector w ?
R d , a kernel function K is written in the form of a feature map ? defined by ? : w = ( w 1 , . . . , w d ) ? ?( w ) = ( ? 1 ( w ) , . . . , ? m ( w ) ) ( d < m ) such that given w a and w b K( w a , w b ) = ?( w a ) , ?( w b ) .
In kernel CCA , data is first projected onto a high dimensional feature space before performing CCA .
In this work the kernel function used is a Gaussian kernel , i.e. , K( w a , w b ) = exp ? || w a ? w b || 2 2 ?
2 . The implementation of kernel CCA follows the standard algorithm described in several texts such as ( Hardoon et al. , 2004 ) ; see reference for details .
Experimental evaluation and results DA embeddings are evaluated in binary sentiment classification tasks on four data sets described in Section 2.2 .
Document embeddings are obtained via i ) a standard framework that expresses documents as weighted combination of their constituent word embeddings and ii ) by initializing a state of the art sentence encoding algorithm In-ferSent ( Conneau et al. , 2017 ) with word embeddings to obtain sentence embeddings .
Encoded sentences are then classified using a Logistic Regressor .
Word embeddings and baselines : ?
Generic word embeddings : Generic word embeddings used are GloVe 1 from both Wikipedia and common crawl and the word2vec ( Skip-gram ) embeddings 2 .
These generic embeddings will be denoted as Glv , GlvCC and w2v. ?
DS word embeddings : DS embeddings are obtained via Latent Semantic Analysis ( LSA ) and via retraining word2vec on the test data sets using the implementation in gensim 3 . DS embeddings via LSA are denoted by LSA and DS embeddings via word2vec are denoted by DSw2v.
? concatenation -SVD baseline : Generic and DS embeddings are concatenated to form a single embeddings matrix .
SVD is performed on this matrix and the resulting singular vectors are projected onto the d largest singular values to form resultant word embeddings .
These meta-embeddings proposed by ( Yin and Sch?tze , 2016 ) have demonstrated considerable success in intrinsic tasks such as similarities , analogies etc .
Details about dimensions of the word embeddings and kernel hyperparameter tuning are found in the supplemental material .
Note that InferSent is fine-tuned with a combination of GloVe common crawl embeddings and DA embeddings , and concSVD .
Since the data sets at hand do not contain all the tokens required to retrain InferSent , we replace word tokens
Discussion of results
From tables 2 and 3 we see that DA embeddings perform better than concSVD as well as the generic and DS word embeddings , when used in a standard classification task as well as when used to initialize a sentence encoding algorithm .
As expected LSA DS embeddings provide better results than word2vec DS embeddings .
Also since the A-CHESS dataset is imbalanced , we look at precision closely over the other metric since the positive class is in minority .
These results are because i ) CCA / KCCA provides an intuitively better technique to preserve information from both the generic and DS embeddings .
On the other hand the concSVD based embeddings do not exploit information in both the generic and DS embeddings .
ii ) Furthermore , in their work ( Yin and Sch?tze , 2016 ) propose to learn an ' ensemble ' of meta-embeddings by learning weights to combine different generic word embeddings via a simple neural network .
Via the simple optimization problem we propose in equation ( 5 ) , we determine the proper weight for combination of DS and generic embeddings in the CCA / KCCA space .
Thus , task specific DA embeddings formed by a proper weighted combination of DS and generic word embeddings are expected to do better than the concSVD and other embeddings and this is verified empirically .
Also note that the LSA DS embeddings do better than the word2vec DS embeddings .
This is expected due to the size of the test sets and the nature of the word2vec algorithm .
We expect similar observations when using GloVe DS embeddings owing to the similarities between word2vec and GloVe .
Future work and Conclusions
From these initial preliminary results we can see that while SWESA learns embeddings from the domain specific data sets along , DA embeddings combine both generic and domain specific embeddings thereby achieving better performance metrics than SWESA or DS embeddings alone .
However , SWESA imparts potentially desirable structural properties to its word embeddings .
As a next step we would like to infer from both these approaches to learn better polarized and domain adapted word embeddings .
Figure 1 : 1 Figure 1 : This figure depicts word embeddings on a unit circle .
Cosine angle between embeddings is used to show dissimilar word pairs learned via SWESA and word2vec .
min {d 1 1 , d 2 }. Embeddings obtained by wi , DS = w i , DS ?
DS and wi , G = w i, G ?
G are projections along the directions of maximum correlation .
Table 1 : 1 This table shows results from a standard sentiment classification task on all four data sets .
Data Set Method Avg Precision Avg AUC SWESA ( LSA ) 78.09?2.84 86.06?2.4 SWESA ( word2vec ) TS ( LSA ) 78.35?4.62 76.27?3.0 86.03?3.5 83.05?5.0 Yelp TS ( word2vec ) 65.22?4.4 69.08?3.5 NB 70.31?5.6 57.07?3.3 RNTN ( pre-trained ) 83.31?1.1 - RNTN ( re-trained ) 51.15?4.3 - SWESA ( LSA ) 80.31?3.3 87.54?4.2 SWESA ( word2vec ) TS ( LSA ) 80.36?2.8 77.32?4.6 87.19?3.3 85.00 ?6.2 Amazon TS ( word2vec ) 71.09?6.2 77.09?5.3 NB 72.54?6.4 61.16?4.5 RNTN ( pre-trained ) 82.84?0.6 - RNTN ( re-trained ) 49.15?2.1 - SWESA ( LSA ) 76.40?5.2 81.08?7.6 SWESA ( word2vec ) TS ( LSA ) 77.27?5.4 70.36?5.5 81.04?6.8 77.54?6.8 IMDB TS ( word2vec ) 56.87?7.6 59.34?8.9 NB 73.31?5.6 48.40?2.9 RNTN ( pre-trained ) 80.88?0.7 - RNTN ( re-trained ) 53.95?1.9 - SWESA ( LSA ) SWESA ( word2vec ) 35.80?2.5 35.40?2.0 83.80?3.1 83.40?2.6 A-CHESS TS ( LSA ) TS ( word2vec ) 32.20?3.2 23.60?2.4 83.80?3.1 68.00?1.2 NB 30.30?3.8 45.23?3.3 RNTN ( pre-trained ) - - RNTN ( re-trained ) - - Results from SWESA are in boldface and results from pre-trained RNTN are in blue .
Table 2 : 2 d 2 ?d are obtained for all vectors in W DS and W G where d ?
This table shows results from the classification task using sentence embeddings obtained from weighted averaging of word embeddings .
Metrics reported are average Precision , F-score and AUC and the corresponding standard deviations ( STD ) .
Best results are attained by KCCA ( GlvCC , LSA ) and are highlighted in boldface .
73.84?1.3 73.07?3.6 73.17?2.4 73.35?2.0 73.00?3.2 73.06?2.0 82.36?4.4 80.66?4.5 78.95?2.7 75.95?4.5 79.66?2.6 77.23?3.8 54.50?2.5 54.42?2.9 53.91?2.0 54.08?2.0 53.03?3.5 54.90?2.1 60.65?3.5 58.95?3.2 58.95?3.7 58.47?2.7 57.62?3.0 58.03?3.9 73.25?3.7 74.55?3.2 73.02?4.7 53.87?2.2 51.77?5.8 53.54?1.9 78.28?3.2 77.67?3.7 74.55?2.9 64.44?2.6 65.18?3.5 64.62?2.6 50.53?1.8 62.39?3.5 49.96?2.3 78.92?3.7 74.88?3.1 75.60?2.4 67.92?1.7 69.79?5.3 69.71?3.8 56.87?3.6 56.04?3.1 59.53?8.9 KCCA ( Glv , LSA ) CCA ( Glv , LSA ) 32.07?1.3 32.70?1.5 39.32?2.5 35.48?4.2 65.96?1.3 62.15?2.9 DA KCCA ( w2v , LSA ) CCA ( w2v , LSA ) KCCA ( GlvCC , LSA ) CCA ( GlvCC , LSA ) 33.45?1.3 33.06?3.2 36.38?1.2 32.11?2.9 39.81?1.0 34.02?1.1 34.71?4.8 36.85?4.4 65.92?0.6 60.91?0.9 61.36?2.6 62.99?3.1 KCCA ( w2v , DSw2v ) 25.59?1.2 28.27?3.1 57.25?1.7 A-CHESS CCA ( w2v , DSw2v ) concSVD ( Glv , LSA ) 24.88?1.4 27.27?2.9 29.17?3.1 34.45?3.0 57.76?2.0 61.59?2.3 concSVD ( w2v , LSA ) 29.84?2.3 36.32?3.3 62.94?1.1 concSVD ( GlvCC , LSA ) 28.09?1.9 35.06?1.4 62.13?2.6 GloVe 30.82?2.0 33.67?3.4 60.80?2.3 WG GloVe-CC 38.13?0.8 27.45?3.1 57.49?1.2 word2vec 32.67?2.9 31.72?1.6 59.64?0.5 LSA 27.42?1.6 34.38?2.3 61.56?1.9 WDS word2vec 24.48?0.8 27.97?3.7 57.08?2.5
Table 3 : 3
This table shows results obtained by using sentence embeddings from the InferSent encoder in the sentiment classification task .
Metrics reported are average Precision , F-score and AUC along with the corresponding standard deviations ( STD ) .
Best results are obtained by KCCA ( GlvCC , LSA ) and are highlighted in boldface .
Data Set Embedding Avg Precision Avg F-score Avg AUC GlvCC 86.47?1.9 83.51?2.6 83.83?2.2 Yelp KCCA ( GlvCC , LSA ) CCA ( GlvCC , LSA ) 91.06?0.8 86.26?1.4 88.66?2.4 82.61?1.1 88.76?2.4 83.99?0.8 concSVD ( GlvCC , LSA ) 85.53?2.1 84.90?1.7 84.96?1.5 RNTN 83.11?1.1 - - GlvCC 87.93?2.7 82.41?3.3 83.24?2.8 Amazon KCCA ( GlvCC , LSA ) CCA ( GlvCC , LSA ) 90.56?2.1 87.12?2.6 86.52?2.0 83.18?2.2 86.74?1.9 83.78?2.1 concSVD ( GlvCC , LSA ) 85.73?1.9 85.19?2.4 85.17?2.6 RNTN 82.84?0.6 - - GlvCC 54.02?3.2 53.03?5.2 53.01?2.0 IMDB KCCA ( GlvCC , LSA ) CCA ( GlvCC , LSA ) concSVD ( GlvCC , LSA ) 59.76?7.3 53.62?1.6 52.75?2.3 53.26?6.1 50.62?5.1 53.05?6.0 56.46?3.4 58.75?3.7 53.54?2.5 A-CHESS RNTN GlvCC KCCA ( GlvCC , LSA ) CCA ( GlvCC , LSA ) 80.88?0.7 52.21?5.1 55.37?5.5 54.34?3.6 -55.26?5.6 50.67?5.0 48.76?2.9 -74.28?3.6 69.89?3.1 68.78?2.4 concSVD ( GlvCC , LSA ) 40.41?4.2 44.75?5.2 68.13?3.8 RNTN - - - following optimization , min ? , ? wi , DS ? ( ? wi , DS + ? wi , G ) 2 2 + wi , G ? ( ? wi , DS + ? wi , G ) 2 2 .
Table 5 5 presents the dimensions of DS and generic word embeddings used to obtain DA embeddings .
Word embedding Dimension GloVe 100 word2vec 300 LSA 70 CCA-DA 68 KCCA -DA 68 GloVe common crawl 300 AdaptGloVe 300
Table 5 : 5
This table presents the average dimensions of LSA , generic and DA word embeddings .
